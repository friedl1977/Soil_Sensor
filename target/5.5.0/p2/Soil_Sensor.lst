
/Users/friedl/Desktop/Projects/Soil_Sensor/target/5.5.0/p2/Soil_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fd000  085fd000  0000d000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085fd018  085fd018  0000d018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fdaa8  085fd0a8  0000daa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00002540  023fdab0  085fd0b0  0000dab0  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  6 .data         0000008c  1007acf0  085ff5f0  0001acf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000026c  1007ad7c  1007ad7c  0002ad7c  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ff67c  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000938  085ff680  085ff680  0001f680  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001f680  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   00150702  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000158fa  00000000  00000000  00170702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00040c8b  00000000  00000000  00185ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002db0  00000000  00000000  001c6c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000bfa8  00000000  00000000  001c9a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00028037  00000000  00000000  001d59df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00045310  00000000  00000000  001fda16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000d6d02  00000000  00000000  00242d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008238  00000000  00000000  00319a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fd018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fd018:	4813      	ldr	r0, [pc, #76]	; (85fd068 <module_user_pre_init+0x50>)
 85fd01a:	4914      	ldr	r1, [pc, #80]	; (85fd06c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fd01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fd01e:	4288      	cmp	r0, r1
 85fd020:	d005      	beq.n	85fd02e <module_user_pre_init+0x16>
 85fd022:	4a13      	ldr	r2, [pc, #76]	; (85fd070 <module_user_pre_init+0x58>)
 85fd024:	4282      	cmp	r2, r0
 85fd026:	d002      	beq.n	85fd02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fd028:	4b12      	ldr	r3, [pc, #72]	; (85fd074 <module_user_pre_init+0x5c>)
 85fd02a:	1a12      	subs	r2, r2, r0
 85fd02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fd02e:	4812      	ldr	r0, [pc, #72]	; (85fd078 <module_user_pre_init+0x60>)
 85fd030:	4a12      	ldr	r2, [pc, #72]	; (85fd07c <module_user_pre_init+0x64>)
 85fd032:	2100      	movs	r1, #0
 85fd034:	4b12      	ldr	r3, [pc, #72]	; (85fd080 <module_user_pre_init+0x68>)
 85fd036:	1a12      	subs	r2, r2, r0
 85fd038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85fd03a:	4812      	ldr	r0, [pc, #72]	; (85fd084 <module_user_pre_init+0x6c>)
 85fd03c:	4912      	ldr	r1, [pc, #72]	; (85fd088 <module_user_pre_init+0x70>)
 85fd03e:	4288      	cmp	r0, r1
 85fd040:	d005      	beq.n	85fd04e <module_user_pre_init+0x36>
 85fd042:	4a12      	ldr	r2, [pc, #72]	; (85fd08c <module_user_pre_init+0x74>)
 85fd044:	4282      	cmp	r2, r0
 85fd046:	d002      	beq.n	85fd04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85fd048:	4b0a      	ldr	r3, [pc, #40]	; (85fd074 <module_user_pre_init+0x5c>)
 85fd04a:	1a12      	subs	r2, r2, r0
 85fd04c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fd04e:	4810      	ldr	r0, [pc, #64]	; (85fd090 <module_user_pre_init+0x78>)
 85fd050:	4910      	ldr	r1, [pc, #64]	; (85fd094 <module_user_pre_init+0x7c>)
 85fd052:	4288      	cmp	r0, r1
 85fd054:	d005      	beq.n	85fd062 <module_user_pre_init+0x4a>
 85fd056:	4a10      	ldr	r2, [pc, #64]	; (85fd098 <module_user_pre_init+0x80>)
 85fd058:	4282      	cmp	r2, r0
 85fd05a:	d002      	beq.n	85fd062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fd05c:	4b05      	ldr	r3, [pc, #20]	; (85fd074 <module_user_pre_init+0x5c>)
 85fd05e:	1a12      	subs	r2, r2, r0
 85fd060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fd062:	4801      	ldr	r0, [pc, #4]	; (85fd068 <module_user_pre_init+0x50>)
 85fd064:	bd08      	pop	{r3, pc}
 85fd066:	bf00      	nop
 85fd068:	1007acf0 	.word	0x1007acf0
 85fd06c:	085ff5f0 	.word	0x085ff5f0
 85fd070:	1007ad7c 	.word	0x1007ad7c
 85fd074:	10110d2d 	.word	0x10110d2d
 85fd078:	1007ad7c 	.word	0x1007ad7c
 85fd07c:	1007afe8 	.word	0x1007afe8
 85fd080:	10110ea1 	.word	0x10110ea1
 85fd084:	023fdaa8 	.word	0x023fdaa8
 85fd088:	085fd0a8 	.word	0x085fd0a8
 85fd08c:	023fdab0 	.word	0x023fdab0
 85fd090:	023fdab0 	.word	0x023fdab0
 85fd094:	085fd0b0 	.word	0x085fd0b0
 85fd098:	023ffff0 	.word	0x023ffff0

085fd09c <dynalib_preinit>:
 85fd09c:	085fd019 00000000                       .._.....

Disassembly of section .psram_text:

023fdab0 <strcmp>:
 23fdab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fdab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 23fdab8:	2a01      	cmp	r2, #1
 23fdaba:	bf28      	it	cs
 23fdabc:	429a      	cmpcs	r2, r3
 23fdabe:	d0f7      	beq.n	23fdab0 <strcmp>
 23fdac0:	1ad0      	subs	r0, r2, r3
 23fdac2:	4770      	bx	lr

023fdac4 <strlen>:
 23fdac4:	4603      	mov	r3, r0
 23fdac6:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fdaca:	2a00      	cmp	r2, #0
 23fdacc:	d1fb      	bne.n	23fdac6 <strlen+0x2>
 23fdace:	1a18      	subs	r0, r3, r0
 23fdad0:	3801      	subs	r0, #1
 23fdad2:	4770      	bx	lr

023fdad4 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fdad4:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fdad6:	f001 fe73 	bl	23ff7c0 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fdada:	2500      	movs	r5, #0
 23fdadc:	4e05      	ldr	r6, [pc, #20]	; (23fdaf4 <module_user_init+0x20>)
 23fdade:	4c06      	ldr	r4, [pc, #24]	; (23fdaf8 <module_user_init+0x24>)
 23fdae0:	1ba4      	subs	r4, r4, r6
 23fdae2:	08a4      	lsrs	r4, r4, #2
 23fdae4:	42ac      	cmp	r4, r5
 23fdae6:	d100      	bne.n	23fdaea <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fdae8:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fdaea:	f856 3b04 	ldr.w	r3, [r6], #4
 23fdaee:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fdaf0:	3501      	adds	r5, #1
 23fdaf2:	e7f7      	b.n	23fdae4 <module_user_init+0x10>
 23fdaf4:	023fffcc 	.word	0x023fffcc
 23fdaf8:	023ffff0 	.word	0x023ffff0

023fdafc <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fdafc:	f000 b87a 	b.w	23fdbf4 <setup>

023fdb00 <module_user_loop>:
}

void module_user_loop() {
 23fdb00:	b508      	push	{r3, lr}
    loop();
 23fdb02:	f000 fa67 	bl	23fdfd4 <loop>
    _post_loop();
}
 23fdb06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fdb0a:	f001 be11 	b.w	23ff730 <_post_loop>

023fdb0e <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fdb0e:	f000 be3d 	b.w	23fe78c <malloc>

023fdb12 <_Znaj>:
 23fdb12:	f000 be3b 	b.w	23fe78c <malloc>

023fdb16 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fdb16:	f000 be47 	b.w	23fe7a8 <free>

023fdb1a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fdb1a:	7800      	ldrb	r0, [r0, #0]
 23fdb1c:	fab0 f080 	clz	r0, r0
 23fdb20:	0940      	lsrs	r0, r0, #5
 23fdb22:	4770      	bx	lr

023fdb24 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fdb24:	2301      	movs	r3, #1
 23fdb26:	7003      	strb	r3, [r0, #0]
 23fdb28:	4770      	bx	lr
	...

023fdb2c <_Z10water_type6String>:

 delay(100);

}

int water_type(String command) {                                // Exposing function/variable to the cloud
 23fdb2c:	b510      	push	{r4, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23fdb2e:	490d      	ldr	r1, [pc, #52]	; (23fdb64 <_Z10water_type6String+0x38>)
 23fdb30:	4604      	mov	r4, r0
 23fdb32:	f001 fc8e 	bl	23ff452 <_ZNK6String6equalsEPKc>
  
  if(command == "0") {            // "Tropical"
 23fdb36:	b118      	cbz	r0, 23fdb40 <_Z10water_type6String+0x14>
    soil_level = 0;
 23fdb38:	2000      	movs	r0, #0
  } else if (command == "1") {    // "Sub-Tropical"
    soil_level = 1;
    return 1;

  } else if (command == "2") {    // "Succulent"
    soil_level = 2;
 23fdb3a:	4b0b      	ldr	r3, [pc, #44]	; (23fdb68 <_Z10water_type6String+0x3c>)
 23fdb3c:	6018      	str	r0, [r3, #0]
    return 2;
  }

  else return -1;
}
 23fdb3e:	bd10      	pop	{r4, pc}
 23fdb40:	4620      	mov	r0, r4
 23fdb42:	490a      	ldr	r1, [pc, #40]	; (23fdb6c <_Z10water_type6String+0x40>)
 23fdb44:	f001 fc85 	bl	23ff452 <_ZNK6String6equalsEPKc>
  } else if (command == "1") {    // "Sub-Tropical"
 23fdb48:	b108      	cbz	r0, 23fdb4e <_Z10water_type6String+0x22>
    soil_level = 1;
 23fdb4a:	2001      	movs	r0, #1
 23fdb4c:	e7f5      	b.n	23fdb3a <_Z10water_type6String+0xe>
 23fdb4e:	4620      	mov	r0, r4
 23fdb50:	4907      	ldr	r1, [pc, #28]	; (23fdb70 <_Z10water_type6String+0x44>)
 23fdb52:	f001 fc7e 	bl	23ff452 <_ZNK6String6equalsEPKc>
  } else if (command == "2") {    // "Succulent"
 23fdb56:	b108      	cbz	r0, 23fdb5c <_Z10water_type6String+0x30>
    soil_level = 2;
 23fdb58:	2002      	movs	r0, #2
 23fdb5a:	e7ee      	b.n	23fdb3a <_Z10water_type6String+0xe>
  else return -1;
 23fdb5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fdb60:	e7ed      	b.n	23fdb3e <_Z10water_type6String+0x12>
 23fdb62:	bf00      	nop
 23fdb64:	023ffcd0 	.word	0x023ffcd0
 23fdb68:	1007ae5c 	.word	0x1007ae5c
 23fdb6c:	023ffcd2 	.word	0x023ffcd2
 23fdb70:	023ffcd4 	.word	0x023ffcd4

023fdb74 <_Z8sun_type6String>:

int sun_type(String command) {                                // Exposing function/variable to the cloud
 23fdb74:	b510      	push	{r4, lr}
 23fdb76:	4910      	ldr	r1, [pc, #64]	; (23fdbb8 <_Z8sun_type6String+0x44>)
 23fdb78:	4604      	mov	r4, r0
 23fdb7a:	f001 fc6a 	bl	23ff452 <_ZNK6String6equalsEPKc>

  if(command == "0") {
 23fdb7e:	b118      	cbz	r0, 23fdb88 <_Z8sun_type6String+0x14>
    sun_light_level = 0;
 23fdb80:	2000      	movs	r0, #0
  } else if (command == "2") {
    sun_light_level = 2;
    return 2;
  
  } else if (command == "3") {
    sun_light_level = 3;
 23fdb82:	4b0e      	ldr	r3, [pc, #56]	; (23fdbbc <_Z8sun_type6String+0x48>)
 23fdb84:	6018      	str	r0, [r3, #0]
    return 3;  
  }

  else return -1;
}
 23fdb86:	bd10      	pop	{r4, pc}
 23fdb88:	4620      	mov	r0, r4
 23fdb8a:	490d      	ldr	r1, [pc, #52]	; (23fdbc0 <_Z8sun_type6String+0x4c>)
 23fdb8c:	f001 fc61 	bl	23ff452 <_ZNK6String6equalsEPKc>
  } else if (command == "1") {
 23fdb90:	b108      	cbz	r0, 23fdb96 <_Z8sun_type6String+0x22>
    sun_light_level = 1;
 23fdb92:	2001      	movs	r0, #1
 23fdb94:	e7f5      	b.n	23fdb82 <_Z8sun_type6String+0xe>
 23fdb96:	4620      	mov	r0, r4
 23fdb98:	490a      	ldr	r1, [pc, #40]	; (23fdbc4 <_Z8sun_type6String+0x50>)
 23fdb9a:	f001 fc5a 	bl	23ff452 <_ZNK6String6equalsEPKc>
  } else if (command == "2") {
 23fdb9e:	b108      	cbz	r0, 23fdba4 <_Z8sun_type6String+0x30>
    sun_light_level = 2;
 23fdba0:	2002      	movs	r0, #2
 23fdba2:	e7ee      	b.n	23fdb82 <_Z8sun_type6String+0xe>
 23fdba4:	4620      	mov	r0, r4
 23fdba6:	4908      	ldr	r1, [pc, #32]	; (23fdbc8 <_Z8sun_type6String+0x54>)
 23fdba8:	f001 fc53 	bl	23ff452 <_ZNK6String6equalsEPKc>
  } else if (command == "3") {
 23fdbac:	b108      	cbz	r0, 23fdbb2 <_Z8sun_type6String+0x3e>
    sun_light_level = 3;
 23fdbae:	2003      	movs	r0, #3
 23fdbb0:	e7e7      	b.n	23fdb82 <_Z8sun_type6String+0xe>
  else return -1;
 23fdbb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fdbb6:	e7e6      	b.n	23fdb86 <_Z8sun_type6String+0x12>
 23fdbb8:	023ffcd0 	.word	0x023ffcd0
 23fdbbc:	1007ae64 	.word	0x1007ae64
 23fdbc0:	023ffcd2 	.word	0x023ffcd2
 23fdbc4:	023ffcd4 	.word	0x023ffcd4
 23fdbc8:	023ffcd6 	.word	0x023ffcd6

023fdbcc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
 23fdbcc:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 23fdbce:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
 23fdbd0:	4606      	mov	r6, r0
 23fdbd2:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
 23fdbd4:	da0b      	bge.n	23fdbee <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
 23fdbd6:	2a0a      	cmp	r2, #10
 23fdbd8:	d109      	bne.n	23fdbee <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
 23fdbda:	212d      	movs	r1, #45	; 0x2d
 23fdbdc:	f001 fb78 	bl	23ff2d0 <_ZN5Print5printEc>
            val = -n;
 23fdbe0:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fdbe2:	4630      	mov	r0, r6
 23fdbe4:	b2ea      	uxtb	r2, r5
    }
}
 23fdbe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
 23fdbea:	f001 bb8a 	b.w	23ff302 <_ZN5Print11printNumberEmh>
            val = n;
 23fdbee:	4621      	mov	r1, r4
 23fdbf0:	e7f7      	b.n	23fdbe2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>
	...

023fdbf4 <setup>:
void setup() {
 23fdbf4:	b570      	push	{r4, r5, r6, lr}
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 23fdbf6:	4c2d      	ldr	r4, [pc, #180]	; (23fdcac <setup+0xb8>)
  pinMode(red_pin, OUTPUT);
 23fdbf8:	4e2d      	ldr	r6, [pc, #180]	; (23fdcb0 <setup+0xbc>)
 23fdbfa:	4620      	mov	r0, r4
 23fdbfc:	4a2d      	ldr	r2, [pc, #180]	; (23fdcb4 <setup+0xc0>)
 23fdbfe:	492e      	ldr	r1, [pc, #184]	; (23fdcb8 <setup+0xc4>)
 23fdc00:	f000 feef 	bl	23fe9e2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  pinMode(green_pin, OUTPUT);
 23fdc04:	4d2d      	ldr	r5, [pc, #180]	; (23fdcbc <setup+0xc8>)
 23fdc06:	4a2e      	ldr	r2, [pc, #184]	; (23fdcc0 <setup+0xcc>)
 23fdc08:	4620      	mov	r0, r4
 23fdc0a:	492e      	ldr	r1, [pc, #184]	; (23fdcc4 <setup+0xd0>)
 23fdc0c:	f000 fee9 	bl	23fe9e2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  pinMode(blue_pin, OUTPUT);
 23fdc10:	4c2d      	ldr	r4, [pc, #180]	; (23fdcc8 <setup+0xd4>)
  pinMode(red_pin, OUTPUT);
 23fdc12:	8830      	ldrh	r0, [r6, #0]
 23fdc14:	2101      	movs	r1, #1
 23fdc16:	f001 fe43 	bl	23ff8a0 <pinMode>
  pinMode(green_pin, OUTPUT);
 23fdc1a:	8828      	ldrh	r0, [r5, #0]
 23fdc1c:	2101      	movs	r1, #1
 23fdc1e:	f001 fe3f 	bl	23ff8a0 <pinMode>
  pinMode(blue_pin, OUTPUT);
 23fdc22:	8820      	ldrh	r0, [r4, #0]
 23fdc24:	2101      	movs	r1, #1
 23fdc26:	f001 fe3b 	bl	23ff8a0 <pinMode>
  pinMode(soil_pin, INPUT);
 23fdc2a:	4b28      	ldr	r3, [pc, #160]	; (23fdccc <setup+0xd8>)
 23fdc2c:	2100      	movs	r1, #0
 23fdc2e:	8818      	ldrh	r0, [r3, #0]
 23fdc30:	f001 fe36 	bl	23ff8a0 <pinMode>
  delay(500);
 23fdc34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23fdc38:	f000 fe24 	bl	23fe884 <delay>
  digitalWrite (red_pin, HIGH);
 23fdc3c:	8830      	ldrh	r0, [r6, #0]
 23fdc3e:	2101      	movs	r1, #1
 23fdc40:	f001 fe3f 	bl	23ff8c2 <digitalWrite>
  digitalWrite (green_pin, HIGH);
 23fdc44:	8828      	ldrh	r0, [r5, #0]
 23fdc46:	2101      	movs	r1, #1
 23fdc48:	f001 fe3b 	bl	23ff8c2 <digitalWrite>
  digitalWrite (blue_pin, HIGH);
 23fdc4c:	2101      	movs	r1, #1
 23fdc4e:	8820      	ldrh	r0, [r4, #0]
 23fdc50:	f001 fe37 	bl	23ff8c2 <digitalWrite>
  delay(100);
 23fdc54:	2064      	movs	r0, #100	; 0x64
 23fdc56:	f000 fe15 	bl	23fe884 <delay>
 digitalWrite (red_pin, LOW);
 23fdc5a:	2100      	movs	r1, #0
 23fdc5c:	8830      	ldrh	r0, [r6, #0]
 23fdc5e:	f001 fe30 	bl	23ff8c2 <digitalWrite>
 delay(1000);
 23fdc62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23fdc66:	f000 fe0d 	bl	23fe884 <delay>
 digitalWrite (red_pin, HIGH);
 23fdc6a:	8830      	ldrh	r0, [r6, #0]
 23fdc6c:	2101      	movs	r1, #1
 23fdc6e:	f001 fe28 	bl	23ff8c2 <digitalWrite>
 digitalWrite (green_pin, LOW);
 23fdc72:	2100      	movs	r1, #0
 23fdc74:	8828      	ldrh	r0, [r5, #0]
 23fdc76:	f001 fe24 	bl	23ff8c2 <digitalWrite>
 delay(1000);
 23fdc7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23fdc7e:	f000 fe01 	bl	23fe884 <delay>
 digitalWrite (green_pin, HIGH);
 23fdc82:	8828      	ldrh	r0, [r5, #0]
 23fdc84:	2101      	movs	r1, #1
 23fdc86:	f001 fe1c 	bl	23ff8c2 <digitalWrite>
 digitalWrite (blue_pin, LOW);
 23fdc8a:	2100      	movs	r1, #0
 23fdc8c:	8820      	ldrh	r0, [r4, #0]
 23fdc8e:	f001 fe18 	bl	23ff8c2 <digitalWrite>
 delay(1000);
 23fdc92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23fdc96:	f000 fdf5 	bl	23fe884 <delay>
 digitalWrite (blue_pin, HIGH);
 23fdc9a:	8820      	ldrh	r0, [r4, #0]
 23fdc9c:	2101      	movs	r1, #1
 23fdc9e:	f001 fe10 	bl	23ff8c2 <digitalWrite>
}
 23fdca2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 delay(100);
 23fdca6:	2064      	movs	r0, #100	; 0x64
 23fdca8:	f000 bdec 	b.w	23fe884 <delay>
 23fdcac:	023fe9b7 	.word	0x023fe9b7
 23fdcb0:	1007ad08 	.word	0x1007ad08
 23fdcb4:	023ffcd8 	.word	0x023ffcd8
 23fdcb8:	023fdb2d 	.word	0x023fdb2d
 23fdcbc:	1007acf8 	.word	0x1007acf8
 23fdcc0:	023ffcde 	.word	0x023ffcde
 23fdcc4:	023fdb75 	.word	0x023fdb75
 23fdcc8:	1007acf4 	.word	0x1007acf4
 23fdccc:	1007ad0c 	.word	0x1007ad0c

023fdcd0 <_Z4soilv>:


void soil() {
 23fdcd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

switch (soil_level) {
 23fdcd4:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 23fddd4 <_Z4soilv+0x104>
 23fdcd8:	4a34      	ldr	r2, [pc, #208]	; (23fddac <_Z4soilv+0xdc>)
 23fdcda:	f8d8 1000 	ldr.w	r1, [r8]
 23fdcde:	4b34      	ldr	r3, [pc, #208]	; (23fddb0 <_Z4soilv+0xe0>)
 23fdce0:	2901      	cmp	r1, #1
 23fdce2:	d022      	beq.n	23fdd2a <_Z4soilv+0x5a>
 23fdce4:	2902      	cmp	r1, #2
 23fdce6:	d024      	beq.n	23fdd32 <_Z4soilv+0x62>
 23fdce8:	bb29      	cbnz	r1, 23fdd36 <_Z4soilv+0x66>

  case 0:                 // Plants that require less watering - Succulent
    water_upper = 20;
 23fdcea:	2114      	movs	r1, #20
 23fdcec:	6011      	str	r1, [r2, #0]
    water_lower = 5;
 23fdcee:	2205      	movs	r2, #5
    break;
    
  case 1:
    water_upper = 40;     // Plants that require MODERATE watering - Most plants are covered in this category
    water_lower = 20;
 23fdcf0:	601a      	str	r2, [r3, #0]

int val_prev = 0;                                 //  temporary variables to determine  
int val_new = 0;                                  //  ..
int val_accum = 0;                                //  average value from multiple readings

ave_soil_val = 0;                               
 23fdcf2:	2400      	movs	r4, #0
int val_prev = 0;                                 //  temporary variables to determine  
 23fdcf4:	4625      	mov	r5, r4
ave_soil_val = 0;                               
 23fdcf6:	4f2f      	ldr	r7, [pc, #188]	; (23fddb4 <_Z4soilv+0xe4>)
soil_percentage = 0;
 23fdcf8:	4e2f      	ldr	r6, [pc, #188]	; (23fddb8 <_Z4soilv+0xe8>)
  
    for (int i=0; i<number_attempts; i++) {       //  Start taking measurements
 23fdcfa:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 23fddd8 <_Z4soilv+0x108>
 23fdcfe:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 23fdddc <_Z4soilv+0x10c>

        val = analogRead(soil_pin);
 23fdd02:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 23fdde0 <_Z4soilv+0x110>
ave_soil_val = 0;                               
 23fdd06:	603c      	str	r4, [r7, #0]
soil_percentage = 0;
 23fdd08:	6034      	str	r4, [r6, #0]
    for (int i=0; i<number_attempts; i++) {       //  Start taking measurements
 23fdd0a:	f8db 0000 	ldr.w	r0, [fp]
 23fdd0e:	42a0      	cmp	r0, r4
 23fdd10:	dd15      	ble.n	23fdd3e <_Z4soilv+0x6e>
        val = analogRead(soil_pin);
 23fdd12:	f8ba 0000 	ldrh.w	r0, [sl]
 23fdd16:	f001 fded 	bl	23ff8f4 <analogRead>
 23fdd1a:	f8c9 0000 	str.w	r0, [r9]
        val_new = val;
        val_accum = (val_new + val_prev);   
 23fdd1e:	4405      	add	r5, r0

        val_prev = val_accum;                     // Accumilated value over all samples 
        delay(50);
 23fdd20:	2032      	movs	r0, #50	; 0x32
 23fdd22:	f000 fdaf 	bl	23fe884 <delay>
    for (int i=0; i<number_attempts; i++) {       //  Start taking measurements
 23fdd26:	3401      	adds	r4, #1
 23fdd28:	e7ef      	b.n	23fdd0a <_Z4soilv+0x3a>
    water_upper = 40;     // Plants that require MODERATE watering - Most plants are covered in this category
 23fdd2a:	2128      	movs	r1, #40	; 0x28
 23fdd2c:	6011      	str	r1, [r2, #0]
    water_lower = 20;
 23fdd2e:	2214      	movs	r2, #20
 23fdd30:	e7de      	b.n	23fdcf0 <_Z4soilv+0x20>
    water_upper = 60;     // Plants that require more watering - Tropical
 23fdd32:	213c      	movs	r1, #60	; 0x3c
 23fdd34:	e7fa      	b.n	23fdd2c <_Z4soilv+0x5c>
    water_upper = 0;
 23fdd36:	2100      	movs	r1, #0
 23fdd38:	6011      	str	r1, [r2, #0]
    water_lower = 0;
 23fdd3a:	6019      	str	r1, [r3, #0]
    break;
 23fdd3c:	e7d9      	b.n	23fdcf2 <_Z4soilv+0x22>
    }

ave_soil_val = val_accum/number_attempts;                   //  Determine average value
//soil_percentage = map(ave_soil_val, 3700, 1875,0,100);    //  Map average value with pullup
soil_percentage = map(ave_soil_val, max_raw_value, min_raw_value,0,100);      //  Map average value
 23fdd3e:	2364      	movs	r3, #100	; 0x64
ave_soil_val = val_accum/number_attempts;                   //  Determine average value
 23fdd40:	fb95 f0f0 	sdiv	r0, r5, r0
soil_percentage = map(ave_soil_val, max_raw_value, min_raw_value,0,100);      //  Map average value
 23fdd44:	4a1d      	ldr	r2, [pc, #116]	; (23fddbc <_Z4soilv+0xec>)
 23fdd46:	491e      	ldr	r1, [pc, #120]	; (23fddc0 <_Z4soilv+0xf0>)
 23fdd48:	9300      	str	r3, [sp, #0]
 23fdd4a:	6809      	ldr	r1, [r1, #0]
 23fdd4c:	2300      	movs	r3, #0
 23fdd4e:	6812      	ldr	r2, [r2, #0]
ave_soil_val = val_accum/number_attempts;                   //  Determine average value
 23fdd50:	6038      	str	r0, [r7, #0]
soil_percentage = map(ave_soil_val, max_raw_value, min_raw_value,0,100);      //  Map average value
 23fdd52:	f000 fd8b 	bl	23fe86c <_Z3mapiiiii>

new_soil_level = soil_level;
 23fdd56:	4b1b      	ldr	r3, [pc, #108]	; (23fddc4 <_Z4soilv+0xf4>)
 23fdd58:	f8d8 2000 	ldr.w	r2, [r8]
soil_percentage = map(ave_soil_val, max_raw_value, min_raw_value,0,100);      //  Map average value
 23fdd5c:	6030      	str	r0, [r6, #0]
new_soil_level = soil_level;
 23fdd5e:	601a      	str	r2, [r3, #0]

  Serial.print(val);                           //  DEBUG
 23fdd60:	f001 fc56 	bl	23ff610 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
 23fdd64:	220a      	movs	r2, #10
 23fdd66:	f8d9 1000 	ldr.w	r1, [r9]
 23fdd6a:	f7ff ff2f 	bl	23fdbcc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
  Serial.println(" Single Read");                  //  DEBUG
 23fdd6e:	f001 fc4f 	bl	23ff610 <_Z16_fetch_usbserialv>
 23fdd72:	4915      	ldr	r1, [pc, #84]	; (23fddc8 <_Z4soilv+0xf8>)
 23fdd74:	f001 fabb 	bl	23ff2ee <_ZN5Print7printlnEPKc>
  Serial.print(ave_soil_val);                      //  DEBUG
 23fdd78:	f001 fc4a 	bl	23ff610 <_Z16_fetch_usbserialv>
 23fdd7c:	220a      	movs	r2, #10
 23fdd7e:	6839      	ldr	r1, [r7, #0]
 23fdd80:	f7ff ff24 	bl	23fdbcc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
  Serial.println(" ACG");                          //  DEBUG
 23fdd84:	f001 fc44 	bl	23ff610 <_Z16_fetch_usbserialv>
 23fdd88:	4910      	ldr	r1, [pc, #64]	; (23fddcc <_Z4soilv+0xfc>)
 23fdd8a:	f001 fab0 	bl	23ff2ee <_ZN5Print7printlnEPKc>
  Serial.print(soil_percentage);                   //  DEBUG
 23fdd8e:	f001 fc3f 	bl	23ff610 <_Z16_fetch_usbserialv>
 23fdd92:	6831      	ldr	r1, [r6, #0]
 23fdd94:	220a      	movs	r2, #10
 23fdd96:	f7ff ff19 	bl	23fdbcc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
  Serial.println(" %");
 23fdd9a:	f001 fc39 	bl	23ff610 <_Z16_fetch_usbserialv>
 23fdd9e:	490c      	ldr	r1, [pc, #48]	; (23fddd0 <_Z4soilv+0x100>)
  // Serial.print("Upper Limit: ");                  //  DEBUG
  // Serial.println(water_upper);                    //  DEBUG

  // Serial.print("Lower Limit: ");                  //  DEBUG
  // Serial.println(water_lower);                    //  DEBUG
}
 23fdda0:	b003      	add	sp, #12
 23fdda2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Serial.println(" %");
 23fdda6:	f001 baa2 	b.w	23ff2ee <_ZN5Print7printlnEPKc>
 23fddaa:	bf00      	nop
 23fddac:	1007ae78 	.word	0x1007ae78
 23fddb0:	1007ae74 	.word	0x1007ae74
 23fddb4:	1007ad8c 	.word	0x1007ad8c
 23fddb8:	1007ae60 	.word	0x1007ae60
 23fddbc:	1007ad00 	.word	0x1007ad00
 23fddc0:	1007acfc 	.word	0x1007acfc
 23fddc4:	1007ae54 	.word	0x1007ae54
 23fddc8:	023ffce7 	.word	0x023ffce7
 23fddcc:	023ffcf4 	.word	0x023ffcf4
 23fddd0:	023ffcf9 	.word	0x023ffcf9
 23fddd4:	1007ae5c 	.word	0x1007ae5c
 23fddd8:	1007ad04 	.word	0x1007ad04
 23fdddc:	1007ae70 	.word	0x1007ae70
 23fdde0:	1007ad0c 	.word	0x1007ad0c

023fdde4 <_Z3U_Vv>:

void U_V() {
 23fdde4:	b538      	push	{r3, r4, r5, lr}
  
UV = LTR390_UVS();
 23fdde6:	f000 f979 	bl	23fe0dc <_Z10LTR390_UVSv>
 23fddea:	4d19      	ldr	r5, [pc, #100]	; (23fde50 <_Z3U_Vv+0x6c>)
 23fddec:	6028      	str	r0, [r5, #0]

Serial.print("UV = ");                            // DEBUG
 23fddee:	f001 fc0f 	bl	23ff610 <_Z16_fetch_usbserialv>
 23fddf2:	4918      	ldr	r1, [pc, #96]	; (23fde54 <_Z3U_Vv+0x70>)
 23fddf4:	f001 fa68 	bl	23ff2c8 <_ZN5Print5printEPKc>
Serial.println(UV);                               // DEBUG 
 23fddf8:	f001 fc0a 	bl	23ff610 <_Z16_fetch_usbserialv>
 23fddfc:	4604      	mov	r4, r0
        return printNumber(val, base) + t;
 23fddfe:	220a      	movs	r2, #10
 23fde00:	6829      	ldr	r1, [r5, #0]
 23fde02:	f001 fa7e 	bl	23ff302 <_ZN5Print11printNumberEmh>
        n += println();
 23fde06:	4620      	mov	r0, r4
 23fde08:	f001 fa65 	bl	23ff2d6 <_ZN5Print7printlnEv>
DEV_Delay_ms(500);
 23fde0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23fde10:	f000 f91a 	bl	23fe048 <_Z12DEV_Delay_msm>

switch (sun_light_level) {
 23fde14:	4b10      	ldr	r3, [pc, #64]	; (23fde58 <_Z3U_Vv+0x74>)
 23fde16:	4911      	ldr	r1, [pc, #68]	; (23fde5c <_Z3U_Vv+0x78>)
 23fde18:	681b      	ldr	r3, [r3, #0]
 23fde1a:	4a11      	ldr	r2, [pc, #68]	; (23fde60 <_Z3U_Vv+0x7c>)
 23fde1c:	2b03      	cmp	r3, #3
 23fde1e:	dc04      	bgt.n	23fde2a <_Z3U_Vv+0x46>
 23fde20:	2b01      	cmp	r3, #1
 23fde22:	dc11      	bgt.n	23fde48 <_Z3U_Vv+0x64>
 23fde24:	b12b      	cbz	r3, 23fde32 <_Z3U_Vv+0x4e>
 23fde26:	2b01      	cmp	r3, #1
 23fde28:	d008      	beq.n	23fde3c <_Z3U_Vv+0x58>
    sun_upper = 1;      // Indoor Plants 
    sun_lower = 0;
    break;

  default:
    sun_upper = 0;
 23fde2a:	2000      	movs	r0, #0
 23fde2c:	6008      	str	r0, [r1, #0]
    sun_lower = 0;
 23fde2e:	6010      	str	r0, [r2, #0]
    break;
 23fde30:	e007      	b.n	23fde42 <_Z3U_Vv+0x5e>
    sun_upper = 6;
 23fde32:	2006      	movs	r0, #6
 23fde34:	6008      	str	r0, [r1, #0]
    sun_lower = 2;
 23fde36:	2102      	movs	r1, #2
    sun_lower = 0;
 23fde38:	6011      	str	r1, [r2, #0]
    break;
 23fde3a:	e002      	b.n	23fde42 <_Z3U_Vv+0x5e>
    sun_upper = 2;       // Plants that require partial sun
 23fde3c:	2002      	movs	r0, #2
    sun_lower = 1;
 23fde3e:	6013      	str	r3, [r2, #0]
    sun_upper = 2;       // Plants that require partial sun
 23fde40:	6008      	str	r0, [r1, #0]
  }

new_sun_light_level = sun_light_level;
 23fde42:	4a08      	ldr	r2, [pc, #32]	; (23fde64 <_Z3U_Vv+0x80>)
 23fde44:	6013      	str	r3, [r2, #0]
// Serial.print("UV Lower Limit: ");            //  DEBUG
// Serial.println(sun_lower);                   //  DEBUG

  // if(digitalRead(8) == 1){                //  Triggers interrupt if cindiction is met
  //   Serial.println("INT");
}
 23fde46:	bd38      	pop	{r3, r4, r5, pc}
    sun_upper = 1;      // Plants that require full shade
 23fde48:	2001      	movs	r0, #1
 23fde4a:	6008      	str	r0, [r1, #0]
    sun_lower = 0;
 23fde4c:	2100      	movs	r1, #0
 23fde4e:	e7f3      	b.n	23fde38 <_Z3U_Vv+0x54>
 23fde50:	1007ad80 	.word	0x1007ad80
 23fde54:	023ffcfc 	.word	0x023ffcfc
 23fde58:	1007ae64 	.word	0x1007ae64
 23fde5c:	1007ae6c 	.word	0x1007ae6c
 23fde60:	1007ae68 	.word	0x1007ae68
 23fde64:	1007ae58 	.word	0x1007ae58

023fde68 <_Z12Error_statesv>:

void Error_states () {
 23fde68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

if ((UV > sun_upper) || (UV < sun_lower)) {
 23fde6a:	4a23      	ldr	r2, [pc, #140]	; (23fdef8 <_Z12Error_statesv+0x90>)
 23fde6c:	4b23      	ldr	r3, [pc, #140]	; (23fdefc <_Z12Error_statesv+0x94>)
 23fde6e:	6812      	ldr	r2, [r2, #0]
 23fde70:	681b      	ldr	r3, [r3, #0]
 23fde72:	4293      	cmp	r3, r2
 23fde74:	d820      	bhi.n	23fdeb8 <_Z12Error_statesv+0x50>
 23fde76:	4a22      	ldr	r2, [pc, #136]	; (23fdf00 <_Z12Error_statesv+0x98>)
 23fde78:	6812      	ldr	r2, [r2, #0]
 23fde7a:	4293      	cmp	r3, r2
 23fde7c:	bf2c      	ite	cs
 23fde7e:	2300      	movcs	r3, #0
 23fde80:	2301      	movcc	r3, #1
 23fde82:	4a20      	ldr	r2, [pc, #128]	; (23fdf04 <_Z12Error_statesv+0x9c>)
 23fde84:	4f20      	ldr	r7, [pc, #128]	; (23fdf08 <_Z12Error_statesv+0xa0>)
 23fde86:	6013      	str	r3, [r2, #0]
  UV_Error = 1;
    } else {
      UV_Error = 0;
    }

if (soil_percentage < water_lower) {
 23fde88:	4b20      	ldr	r3, [pc, #128]	; (23fdf0c <_Z12Error_statesv+0xa4>)
 23fde8a:	4a21      	ldr	r2, [pc, #132]	; (23fdf10 <_Z12Error_statesv+0xa8>)
 23fde8c:	681b      	ldr	r3, [r3, #0]
 23fde8e:	6812      	ldr	r2, [r2, #0]
 23fde90:	4e20      	ldr	r6, [pc, #128]	; (23fdf14 <_Z12Error_statesv+0xac>)
 23fde92:	4293      	cmp	r3, r2
 23fde94:	4d20      	ldr	r5, [pc, #128]	; (23fdf18 <_Z12Error_statesv+0xb0>)
 23fde96:	4c21      	ldr	r4, [pc, #132]	; (23fdf1c <_Z12Error_statesv+0xb4>)
 23fde98:	da10      	bge.n	23fdebc <_Z12Error_statesv+0x54>
    digitalWrite (red_pin, LOW);                  // Red indicator when plant requires watering
 23fde9a:	2100      	movs	r1, #0
 23fde9c:	8838      	ldrh	r0, [r7, #0]
 23fde9e:	f001 fd10 	bl	23ff8c2 <digitalWrite>
    digitalWrite (blue_pin, HIGH);
 23fdea2:	2101      	movs	r1, #1
 23fdea4:	8830      	ldrh	r0, [r6, #0]
 23fdea6:	f001 fd0c 	bl	23ff8c2 <digitalWrite>
    digitalWrite (green_pin, HIGH);
 23fdeaa:	2101      	movs	r1, #1
 23fdeac:	8828      	ldrh	r0, [r5, #0]
    H2O_Error = 1;

      } else if (soil_percentage > water_upper) {
        digitalWrite (blue_pin, LOW);             // Blue indicator when plant is overwatered
        digitalWrite (green_pin, HIGH);
        digitalWrite (red_pin, HIGH);
 23fdeae:	f001 fd08 	bl	23ff8c2 <digitalWrite>
        H2O_Error = 1;
 23fdeb2:	2301      	movs	r3, #1

      } else {
        digitalWrite (red_pin, HIGH);
        digitalWrite (blue_pin, HIGH);
        digitalWrite (green_pin, LOW);
        H2O_Error = 0;
 23fdeb4:	6023      	str	r3, [r4, #0]
      }
}
 23fdeb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UV_Error = 1;
 23fdeb8:	2301      	movs	r3, #1
 23fdeba:	e7e2      	b.n	23fde82 <_Z12Error_statesv+0x1a>
      } else if (soil_percentage > water_upper) {
 23fdebc:	4a18      	ldr	r2, [pc, #96]	; (23fdf20 <_Z12Error_statesv+0xb8>)
 23fdebe:	6812      	ldr	r2, [r2, #0]
 23fdec0:	4293      	cmp	r3, r2
 23fdec2:	dd0a      	ble.n	23fdeda <_Z12Error_statesv+0x72>
        digitalWrite (blue_pin, LOW);             // Blue indicator when plant is overwatered
 23fdec4:	2100      	movs	r1, #0
 23fdec6:	8830      	ldrh	r0, [r6, #0]
 23fdec8:	f001 fcfb 	bl	23ff8c2 <digitalWrite>
        digitalWrite (green_pin, HIGH);
 23fdecc:	2101      	movs	r1, #1
 23fdece:	8828      	ldrh	r0, [r5, #0]
 23fded0:	f001 fcf7 	bl	23ff8c2 <digitalWrite>
        digitalWrite (red_pin, HIGH);
 23fded4:	2101      	movs	r1, #1
 23fded6:	8838      	ldrh	r0, [r7, #0]
 23fded8:	e7e9      	b.n	23fdeae <_Z12Error_statesv+0x46>
        digitalWrite (red_pin, HIGH);
 23fdeda:	2101      	movs	r1, #1
 23fdedc:	8838      	ldrh	r0, [r7, #0]
 23fdede:	f001 fcf0 	bl	23ff8c2 <digitalWrite>
        digitalWrite (blue_pin, HIGH);
 23fdee2:	2101      	movs	r1, #1
 23fdee4:	8830      	ldrh	r0, [r6, #0]
 23fdee6:	f001 fcec 	bl	23ff8c2 <digitalWrite>
        digitalWrite (green_pin, LOW);
 23fdeea:	2100      	movs	r1, #0
 23fdeec:	8828      	ldrh	r0, [r5, #0]
 23fdeee:	f001 fce8 	bl	23ff8c2 <digitalWrite>
        H2O_Error = 0;
 23fdef2:	2300      	movs	r3, #0
 23fdef4:	e7de      	b.n	23fdeb4 <_Z12Error_statesv+0x4c>
 23fdef6:	bf00      	nop
 23fdef8:	1007ae6c 	.word	0x1007ae6c
 23fdefc:	1007ad80 	.word	0x1007ad80
 23fdf00:	1007ae68 	.word	0x1007ae68
 23fdf04:	1007ad84 	.word	0x1007ad84
 23fdf08:	1007ad08 	.word	0x1007ad08
 23fdf0c:	1007ae60 	.word	0x1007ae60
 23fdf10:	1007ae74 	.word	0x1007ae74
 23fdf14:	1007acf4 	.word	0x1007acf4
 23fdf18:	1007acf8 	.word	0x1007acf8
 23fdf1c:	1007ad7c 	.word	0x1007ad7c
 23fdf20:	1007ae78 	.word	0x1007ae78

023fdf24 <_Z7publishv>:


void publish () {
 23fdf24:	b510      	push	{r4, lr}
    
    snprintf(data, sizeof(data) 
 23fdf26:	4b1e      	ldr	r3, [pc, #120]	; (23fdfa0 <_Z7publishv+0x7c>)
void publish () {
 23fdf28:	b08a      	sub	sp, #40	; 0x28
    snprintf(data, sizeof(data) 
 23fdf2a:	681b      	ldr	r3, [r3, #0]
 23fdf2c:	21c0      	movs	r1, #192	; 0xc0
 23fdf2e:	9307      	str	r3, [sp, #28]
 23fdf30:	4b1c      	ldr	r3, [pc, #112]	; (23fdfa4 <_Z7publishv+0x80>)
 23fdf32:	4a1d      	ldr	r2, [pc, #116]	; (23fdfa8 <_Z7publishv+0x84>)
 23fdf34:	681b      	ldr	r3, [r3, #0]
 23fdf36:	481d      	ldr	r0, [pc, #116]	; (23fdfac <_Z7publishv+0x88>)
 23fdf38:	9306      	str	r3, [sp, #24]
 23fdf3a:	4b1d      	ldr	r3, [pc, #116]	; (23fdfb0 <_Z7publishv+0x8c>)
 23fdf3c:	681b      	ldr	r3, [r3, #0]
 23fdf3e:	9305      	str	r3, [sp, #20]
 23fdf40:	4b1c      	ldr	r3, [pc, #112]	; (23fdfb4 <_Z7publishv+0x90>)
 23fdf42:	681b      	ldr	r3, [r3, #0]
 23fdf44:	9304      	str	r3, [sp, #16]
 23fdf46:	4b1c      	ldr	r3, [pc, #112]	; (23fdfb8 <_Z7publishv+0x94>)
 23fdf48:	681b      	ldr	r3, [r3, #0]
 23fdf4a:	9303      	str	r3, [sp, #12]
 23fdf4c:	4b1b      	ldr	r3, [pc, #108]	; (23fdfbc <_Z7publishv+0x98>)
 23fdf4e:	681b      	ldr	r3, [r3, #0]
 23fdf50:	9302      	str	r3, [sp, #8]
 23fdf52:	4b1b      	ldr	r3, [pc, #108]	; (23fdfc0 <_Z7publishv+0x9c>)
 23fdf54:	681b      	ldr	r3, [r3, #0]
 23fdf56:	9301      	str	r3, [sp, #4]
 23fdf58:	4b1a      	ldr	r3, [pc, #104]	; (23fdfc4 <_Z7publishv+0xa0>)
 23fdf5a:	681b      	ldr	r3, [r3, #0]
 23fdf5c:	9300      	str	r3, [sp, #0]
 23fdf5e:	4b1a      	ldr	r3, [pc, #104]	; (23fdfc8 <_Z7publishv+0xa4>)
 23fdf60:	f000 fc3e 	bl	23fe7e0 <snprintf>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 23fdf64:	4b19      	ldr	r3, [pc, #100]	; (23fdfcc <_Z7publishv+0xa8>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 23fdf66:	4a11      	ldr	r2, [pc, #68]	; (23fdfac <_Z7publishv+0x88>)
 23fdf68:	781b      	ldrb	r3, [r3, #0]
 23fdf6a:	4919      	ldr	r1, [pc, #100]	; (23fdfd0 <_Z7publishv+0xac>)
 23fdf6c:	f88d 3000 	strb.w	r3, [sp]
 23fdf70:	a808      	add	r0, sp, #32
 23fdf72:	233c      	movs	r3, #60	; 0x3c
 23fdf74:	f000 fe28 	bl	23febc8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 23fdf78:	9c09      	ldr	r4, [sp, #36]	; 0x24
 23fdf7a:	b17c      	cbz	r4, 23fdf9c <_Z7publishv+0x78>
      if (--_M_use_count == 0)
 23fdf7c:	6863      	ldr	r3, [r4, #4]
 23fdf7e:	3b01      	subs	r3, #1
 23fdf80:	6063      	str	r3, [r4, #4]
 23fdf82:	b95b      	cbnz	r3, 23fdf9c <_Z7publishv+0x78>
          _M_dispose();
 23fdf84:	6823      	ldr	r3, [r4, #0]
 23fdf86:	4620      	mov	r0, r4
 23fdf88:	689b      	ldr	r3, [r3, #8]
 23fdf8a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fdf8c:	68a3      	ldr	r3, [r4, #8]
 23fdf8e:	3b01      	subs	r3, #1
 23fdf90:	60a3      	str	r3, [r4, #8]
 23fdf92:	b91b      	cbnz	r3, 23fdf9c <_Z7publishv+0x78>
            _M_destroy();
 23fdf94:	6823      	ldr	r3, [r4, #0]
 23fdf96:	4620      	mov	r0, r4
 23fdf98:	68db      	ldr	r3, [r3, #12]
 23fdf9a:	4798      	blx	r3
        , "{\"t\":\"%s\",\"new_sun_light_level\":%i,\"new_soil_level\":%i,\"sun_upper\":%i,\"sun_lower\":%i,\"water_upper\":%i,\"water_lower\":%i,\"H2O_Error\":%i,\"UV_Error\":%i}"
        , BLYNK_AUTH_TOKEN, UV,soil_percentage,sun_upper,sun_lower,water_upper,water_lower,H2O_Error,UV_Error
        );  
        
        Particle.publish("Send_smartpot_data", data, PRIVATE);
}
 23fdf9c:	b00a      	add	sp, #40	; 0x28
 23fdf9e:	bd10      	pop	{r4, pc}
 23fdfa0:	1007ad84 	.word	0x1007ad84
 23fdfa4:	1007ad7c 	.word	0x1007ad7c
 23fdfa8:	023ffd23 	.word	0x023ffd23
 23fdfac:	1007ad90 	.word	0x1007ad90
 23fdfb0:	1007ae74 	.word	0x1007ae74
 23fdfb4:	1007ae78 	.word	0x1007ae78
 23fdfb8:	1007ae68 	.word	0x1007ae68
 23fdfbc:	1007ae6c 	.word	0x1007ae6c
 23fdfc0:	1007ae60 	.word	0x1007ae60
 23fdfc4:	1007ad80 	.word	0x1007ad80
 23fdfc8:	023ffd02 	.word	0x023ffd02
 23fdfcc:	1007ad88 	.word	0x1007ad88
 23fdfd0:	023ffdb8 	.word	0x023ffdb8

023fdfd4 <loop>:


void loop() { 
 23fdfd4:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fdfd6:	f000 f8bb 	bl	23fe150 <HAL_Timer_Get_Milli_Seconds>

unsigned long now = millis();
	 
  if ((now - lastTime) >= 20000) {
 23fdfda:	f644 611f 	movw	r1, #19999	; 0x4e1f
 23fdfde:	4a12      	ldr	r2, [pc, #72]	; (23fe028 <loop+0x54>)
 23fdfe0:	6813      	ldr	r3, [r2, #0]
 23fdfe2:	1ac3      	subs	r3, r0, r3
 23fdfe4:	428b      	cmp	r3, r1
 23fdfe6:	d908      	bls.n	23fdffa <loop+0x26>
		lastTime = now;
 23fdfe8:	6010      	str	r0, [r2, #0]
    
    soil();
 23fdfea:	f7ff fe71 	bl	23fdcd0 <_Z4soilv>
    U_V();
 23fdfee:	f7ff fef9 	bl	23fdde4 <_Z3U_Vv>
    Error_states ();
 23fdff2:	f7ff ff39 	bl	23fde68 <_Z12Error_statesv>
    publish();
 23fdff6:	f7ff ff95 	bl	23fdf24 <_Z7publishv>
	} 

  if ((new_soil_level != soil_level) || (new_sun_light_level != sun_light_level)) {
 23fdffa:	4b0c      	ldr	r3, [pc, #48]	; (23fe02c <loop+0x58>)
 23fdffc:	681a      	ldr	r2, [r3, #0]
 23fdffe:	4b0c      	ldr	r3, [pc, #48]	; (23fe030 <loop+0x5c>)
 23fe000:	681b      	ldr	r3, [r3, #0]
 23fe002:	429a      	cmp	r2, r3
 23fe004:	d105      	bne.n	23fe012 <loop+0x3e>
 23fe006:	4b0b      	ldr	r3, [pc, #44]	; (23fe034 <loop+0x60>)
 23fe008:	681a      	ldr	r2, [r3, #0]
 23fe00a:	4b0b      	ldr	r3, [pc, #44]	; (23fe038 <loop+0x64>)
 23fe00c:	681b      	ldr	r3, [r3, #0]
 23fe00e:	429a      	cmp	r2, r3
 23fe010:	d009      	beq.n	23fe026 <loop+0x52>
    soil();
 23fe012:	f7ff fe5d 	bl	23fdcd0 <_Z4soilv>
    U_V();
 23fe016:	f7ff fee5 	bl	23fdde4 <_Z3U_Vv>
    Error_states ();
 23fe01a:	f7ff ff25 	bl	23fde68 <_Z12Error_statesv>
    publish();
  }
 23fe01e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    publish();
 23fe022:	f7ff bf7f 	b.w	23fdf24 <_Z7publishv>
 23fe026:	bd08      	pop	{r3, pc}
 23fe028:	1007ae50 	.word	0x1007ae50
 23fe02c:	1007ae54 	.word	0x1007ae54
 23fe030:	1007ae5c 	.word	0x1007ae5c
 23fe034:	1007ae58 	.word	0x1007ae58
 23fe038:	1007ae64 	.word	0x1007ae64

023fe03c <_GLOBAL__sub_I_WEBHOOK_NAME>:
        val_(val) {
 23fe03c:	2201      	movs	r2, #1
 23fe03e:	4b01      	ldr	r3, [pc, #4]	; (23fe044 <_GLOBAL__sub_I_WEBHOOK_NAME+0x8>)
 23fe040:	701a      	strb	r2, [r3, #0]
 23fe042:	4770      	bx	lr
 23fe044:	1007ad88 	.word	0x1007ad88

023fe048 <_Z12DEV_Delay_msm>:
/**
 * delay x ms
**/
void DEV_Delay_ms(UDOUBLE xms)
{
	delay(xms);
 23fe048:	f000 bc1c 	b.w	23fe884 <delay>

023fe04c <_Z14I2C_Write_Bytehh>:
	Wire.begin();
#endif
}

void I2C_Write_Byte(uint8_t Cmd, uint8_t value)
{
 23fe04c:	b538      	push	{r3, r4, r5, lr}
 23fe04e:	460c      	mov	r4, r1
 23fe050:	4605      	mov	r5, r0
#if DEV_I2C
	Wire.beginTransmission(I2C_ADDR);
 23fe052:	f001 fc7d 	bl	23ff950 <_Z19__fetch_global_Wirev>
 23fe056:	4b0b      	ldr	r3, [pc, #44]	; (23fe084 <_Z14I2C_Write_Bytehh+0x38>)
 23fe058:	7819      	ldrb	r1, [r3, #0]
 23fe05a:	f000 ffd0 	bl	23feffe <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(Cmd);
 23fe05e:	f001 fc77 	bl	23ff950 <_Z19__fetch_global_Wirev>
 23fe062:	6803      	ldr	r3, [r0, #0]
 23fe064:	4629      	mov	r1, r5
 23fe066:	689b      	ldr	r3, [r3, #8]
 23fe068:	4798      	blx	r3
	Wire.write(value & 0xFF);
 23fe06a:	f001 fc71 	bl	23ff950 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 23fe06e:	6803      	ldr	r3, [r0, #0]
 23fe070:	4621      	mov	r1, r4
 23fe072:	689b      	ldr	r3, [r3, #8]
 23fe074:	4798      	blx	r3
	Wire.endTransmission();
 23fe076:	f001 fc6b 	bl	23ff950 <_Z19__fetch_global_Wirev>
#endif
}
 23fe07a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Wire.endTransmission();
 23fe07e:	f000 bfc6 	b.w	23ff00e <_ZN7TwoWire15endTransmissionEv>
 23fe082:	bf00      	nop
 23fe084:	1007ae7c 	.word	0x1007ae7c

023fe088 <_Z13I2C_Read_Byteh>:

int I2C_Read_Byte(uint8_t Cmd)
{
 23fe088:	b570      	push	{r4, r5, r6, lr}
#if DEV_I2C
	Wire.beginTransmission(I2C_ADDR);
 23fe08a:	4d13      	ldr	r5, [pc, #76]	; (23fe0d8 <_Z13I2C_Read_Byteh+0x50>)
{
 23fe08c:	4604      	mov	r4, r0
	Wire.beginTransmission(I2C_ADDR);
 23fe08e:	f001 fc5f 	bl	23ff950 <_Z19__fetch_global_Wirev>
 23fe092:	7829      	ldrb	r1, [r5, #0]
 23fe094:	f000 ffb3 	bl	23feffe <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(Cmd);
 23fe098:	f001 fc5a 	bl	23ff950 <_Z19__fetch_global_Wirev>
 23fe09c:	6803      	ldr	r3, [r0, #0]
 23fe09e:	4621      	mov	r1, r4
 23fe0a0:	689b      	ldr	r3, [r3, #8]
 23fe0a2:	4798      	blx	r3
	Wire.endTransmission();
 23fe0a4:	f001 fc54 	bl	23ff950 <_Z19__fetch_global_Wirev>
 23fe0a8:	f000 ffb1 	bl	23ff00e <_ZN7TwoWire15endTransmissionEv>
    
    Wire.requestFrom(I2C_ADDR, 1, 1);
 23fe0ac:	f001 fc50 	bl	23ff950 <_Z19__fetch_global_Wirev>
 23fe0b0:	2301      	movs	r3, #1
 23fe0b2:	7829      	ldrb	r1, [r5, #0]
 23fe0b4:	461a      	mov	r2, r3
 23fe0b6:	f000 ff90 	bl	23fefda <_ZN7TwoWire11requestFromEhjh>
    
	if (Wire.available()) {
 23fe0ba:	f001 fc49 	bl	23ff950 <_Z19__fetch_global_Wirev>
 23fe0be:	6803      	ldr	r3, [r0, #0]
 23fe0c0:	691b      	ldr	r3, [r3, #16]
 23fe0c2:	4798      	blx	r3
 23fe0c4:	b130      	cbz	r0, 23fe0d4 <_Z13I2C_Read_Byteh+0x4c>
		return Wire.read();
 23fe0c6:	f001 fc43 	bl	23ff950 <_Z19__fetch_global_Wirev>
	}
    
	return 0;
#endif
}
 23fe0ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return Wire.read();
 23fe0ce:	6803      	ldr	r3, [r0, #0]
 23fe0d0:	695b      	ldr	r3, [r3, #20]
 23fe0d2:	4718      	bx	r3
}
 23fe0d4:	bd70      	pop	{r4, r5, r6, pc}
 23fe0d6:	bf00      	nop
 23fe0d8:	1007ae7c 	.word	0x1007ae7c

023fe0dc <_Z10LTR390_UVSv>:
    
	return 0;
}

UDOUBLE LTR390_UVS(void)
{
 23fe0dc:	b538      	push	{r3, r4, r5, lr}
	I2C_Write_Byte(cmd, val);
 23fe0de:	2134      	movs	r1, #52	; 0x34
 23fe0e0:	2019      	movs	r0, #25
 23fe0e2:	f7ff ffb3 	bl	23fe04c <_Z14I2C_Write_Bytehh>
 23fe0e6:	210a      	movs	r1, #10
 23fe0e8:	2000      	movs	r0, #0
 23fe0ea:	f7ff ffaf 	bl	23fe04c <_Z14I2C_Write_Bytehh>
	return I2C_Read_Byte(val);
 23fe0ee:	2010      	movs	r0, #16
 23fe0f0:	f7ff ffca 	bl	23fe088 <_Z13I2C_Read_Byteh>
 23fe0f4:	4605      	mov	r5, r0
 23fe0f6:	2011      	movs	r0, #17
 23fe0f8:	f7ff ffc6 	bl	23fe088 <_Z13I2C_Read_Byteh>
 23fe0fc:	4604      	mov	r4, r0
 23fe0fe:	2012      	movs	r0, #18
 23fe100:	f7ff ffc2 	bl	23fe088 <_Z13I2C_Read_Byteh>
    LTR390_Write(LTR390_MAIN_CTRL, 0x0A); //  UVS in Active Mode
    UDOUBLE Data1 = LTR390_Read(LTR390_UVSDATA);
    UDOUBLE Data2 = LTR390_Read(LTR390_UVSDATA + 1);
    UDOUBLE Data3 = LTR390_Read(LTR390_UVSDATA + 2);
    UDOUBLE uv;
    uv =  (Data3<<16)| (Data2<<8) | Data1;
 23fe104:	0224      	lsls	r4, r4, #8
 23fe106:	0403      	lsls	r3, r0, #16
 23fe108:	b2a4      	uxth	r4, r4
 23fe10a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 23fe10e:	4323      	orrs	r3, r4
    UDOUBLE Data1 = LTR390_Read(LTR390_UVSDATA);
 23fe110:	b2e8      	uxtb	r0, r5
    return uv;
}
 23fe112:	4318      	orrs	r0, r3
 23fe114:	bd38      	pop	{r3, r4, r5, pc}
	...

023fe118 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fe118:	b509      	push	{r0, r3, lr}
 23fe11a:	4804      	ldr	r0, [pc, #16]	; (23fe12c <os_mutex_recursive_create+0x14>)
 23fe11c:	6800      	ldr	r0, [r0, #0]
 23fe11e:	4b04      	ldr	r3, [pc, #16]	; (23fe130 <os_mutex_recursive_create+0x18>)
 23fe120:	4403      	add	r3, r0
 23fe122:	681b      	ldr	r3, [r3, #0]
 23fe124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fe126:	9302      	str	r3, [sp, #8]
 23fe128:	bd09      	pop	{r0, r3, pc}
 23fe12a:	0000      	.short	0x0000
 23fe12c:	1007acf0 	.word	0x1007acf0
 23fe130:	00000030 	.word	0x00000030

023fe134 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fe134:	b509      	push	{r0, r3, lr}
 23fe136:	4804      	ldr	r0, [pc, #16]	; (23fe148 <HAL_RNG_GetRandomNumber+0x14>)
 23fe138:	6800      	ldr	r0, [r0, #0]
 23fe13a:	4b04      	ldr	r3, [pc, #16]	; (23fe14c <HAL_RNG_GetRandomNumber+0x18>)
 23fe13c:	4403      	add	r3, r0
 23fe13e:	681b      	ldr	r3, [r3, #0]
 23fe140:	685b      	ldr	r3, [r3, #4]
 23fe142:	9302      	str	r3, [sp, #8]
 23fe144:	bd09      	pop	{r0, r3, pc}
 23fe146:	0000      	.short	0x0000
 23fe148:	1007acf0 	.word	0x1007acf0
 23fe14c:	00000000 	.word	0x00000000

023fe150 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fe150:	b509      	push	{r0, r3, lr}
 23fe152:	4804      	ldr	r0, [pc, #16]	; (23fe164 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fe154:	6800      	ldr	r0, [r0, #0]
 23fe156:	4b04      	ldr	r3, [pc, #16]	; (23fe168 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fe158:	4403      	add	r3, r0
 23fe15a:	681b      	ldr	r3, [r3, #0]
 23fe15c:	695b      	ldr	r3, [r3, #20]
 23fe15e:	9302      	str	r3, [sp, #8]
 23fe160:	bd09      	pop	{r0, r3, pc}
 23fe162:	0000      	.short	0x0000
 23fe164:	1007acf0 	.word	0x1007acf0
 23fe168:	00000000 	.word	0x00000000

023fe16c <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
 23fe16c:	b509      	push	{r0, r3, lr}
 23fe16e:	4804      	ldr	r0, [pc, #16]	; (23fe180 <hal_pin_validate_function+0x14>)
 23fe170:	6800      	ldr	r0, [r0, #0]
 23fe172:	4b04      	ldr	r3, [pc, #16]	; (23fe184 <hal_pin_validate_function+0x18>)
 23fe174:	4403      	add	r3, r0
 23fe176:	681b      	ldr	r3, [r3, #0]
 23fe178:	685b      	ldr	r3, [r3, #4]
 23fe17a:	9302      	str	r3, [sp, #8]
 23fe17c:	bd09      	pop	{r0, r3, pc}
 23fe17e:	0000      	.short	0x0000
 23fe180:	1007acf0 	.word	0x1007acf0
 23fe184:	00000014 	.word	0x00000014

023fe188 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fe188:	b509      	push	{r0, r3, lr}
 23fe18a:	4804      	ldr	r0, [pc, #16]	; (23fe19c <hal_gpio_mode+0x14>)
 23fe18c:	6800      	ldr	r0, [r0, #0]
 23fe18e:	4b04      	ldr	r3, [pc, #16]	; (23fe1a0 <hal_gpio_mode+0x18>)
 23fe190:	4403      	add	r3, r0
 23fe192:	681b      	ldr	r3, [r3, #0]
 23fe194:	689b      	ldr	r3, [r3, #8]
 23fe196:	9302      	str	r3, [sp, #8]
 23fe198:	bd09      	pop	{r0, r3, pc}
 23fe19a:	0000      	.short	0x0000
 23fe19c:	1007acf0 	.word	0x1007acf0
 23fe1a0:	00000014 	.word	0x00000014

023fe1a4 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fe1a4:	b509      	push	{r0, r3, lr}
 23fe1a6:	4804      	ldr	r0, [pc, #16]	; (23fe1b8 <hal_gpio_get_mode+0x14>)
 23fe1a8:	6800      	ldr	r0, [r0, #0]
 23fe1aa:	4b04      	ldr	r3, [pc, #16]	; (23fe1bc <hal_gpio_get_mode+0x18>)
 23fe1ac:	4403      	add	r3, r0
 23fe1ae:	681b      	ldr	r3, [r3, #0]
 23fe1b0:	68db      	ldr	r3, [r3, #12]
 23fe1b2:	9302      	str	r3, [sp, #8]
 23fe1b4:	bd09      	pop	{r0, r3, pc}
 23fe1b6:	0000      	.short	0x0000
 23fe1b8:	1007acf0 	.word	0x1007acf0
 23fe1bc:	00000014 	.word	0x00000014

023fe1c0 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fe1c0:	b509      	push	{r0, r3, lr}
 23fe1c2:	4804      	ldr	r0, [pc, #16]	; (23fe1d4 <hal_gpio_write+0x14>)
 23fe1c4:	6800      	ldr	r0, [r0, #0]
 23fe1c6:	4b04      	ldr	r3, [pc, #16]	; (23fe1d8 <hal_gpio_write+0x18>)
 23fe1c8:	4403      	add	r3, r0
 23fe1ca:	681b      	ldr	r3, [r3, #0]
 23fe1cc:	691b      	ldr	r3, [r3, #16]
 23fe1ce:	9302      	str	r3, [sp, #8]
 23fe1d0:	bd09      	pop	{r0, r3, pc}
 23fe1d2:	0000      	.short	0x0000
 23fe1d4:	1007acf0 	.word	0x1007acf0
 23fe1d8:	00000014 	.word	0x00000014

023fe1dc <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 23fe1dc:	b509      	push	{r0, r3, lr}
 23fe1de:	4804      	ldr	r0, [pc, #16]	; (23fe1f0 <hal_adc_read+0x14>)
 23fe1e0:	6800      	ldr	r0, [r0, #0]
 23fe1e2:	4b04      	ldr	r3, [pc, #16]	; (23fe1f4 <hal_adc_read+0x18>)
 23fe1e4:	4403      	add	r3, r0
 23fe1e6:	681b      	ldr	r3, [r3, #0]
 23fe1e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fe1ea:	9302      	str	r3, [sp, #8]
 23fe1ec:	bd09      	pop	{r0, r3, pc}
 23fe1ee:	0000      	.short	0x0000
 23fe1f0:	1007acf0 	.word	0x1007acf0
 23fe1f4:	00000014 	.word	0x00000014

023fe1f8 <hal_i2c_begin_transmission>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23fe1f8:	b509      	push	{r0, r3, lr}
 23fe1fa:	4804      	ldr	r0, [pc, #16]	; (23fe20c <hal_i2c_begin_transmission+0x14>)
 23fe1fc:	6800      	ldr	r0, [r0, #0]
 23fe1fe:	4b04      	ldr	r3, [pc, #16]	; (23fe210 <hal_i2c_begin_transmission+0x18>)
 23fe200:	4403      	add	r3, r0
 23fe202:	681b      	ldr	r3, [r3, #0]
 23fe204:	699b      	ldr	r3, [r3, #24]
 23fe206:	9302      	str	r3, [sp, #8]
 23fe208:	bd09      	pop	{r0, r3, pc}
 23fe20a:	0000      	.short	0x0000
 23fe20c:	1007acf0 	.word	0x1007acf0
 23fe210:	00000010 	.word	0x00000010

023fe214 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23fe214:	b509      	push	{r0, r3, lr}
 23fe216:	4804      	ldr	r0, [pc, #16]	; (23fe228 <hal_i2c_end_transmission+0x14>)
 23fe218:	6800      	ldr	r0, [r0, #0]
 23fe21a:	4b04      	ldr	r3, [pc, #16]	; (23fe22c <hal_i2c_end_transmission+0x18>)
 23fe21c:	4403      	add	r3, r0
 23fe21e:	681b      	ldr	r3, [r3, #0]
 23fe220:	69db      	ldr	r3, [r3, #28]
 23fe222:	9302      	str	r3, [sp, #8]
 23fe224:	bd09      	pop	{r0, r3, pc}
 23fe226:	0000      	.short	0x0000
 23fe228:	1007acf0 	.word	0x1007acf0
 23fe22c:	00000010 	.word	0x00000010

023fe230 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fe230:	b509      	push	{r0, r3, lr}
 23fe232:	4804      	ldr	r0, [pc, #16]	; (23fe244 <hal_i2c_write+0x14>)
 23fe234:	6800      	ldr	r0, [r0, #0]
 23fe236:	4b04      	ldr	r3, [pc, #16]	; (23fe248 <hal_i2c_write+0x18>)
 23fe238:	4403      	add	r3, r0
 23fe23a:	681b      	ldr	r3, [r3, #0]
 23fe23c:	6a1b      	ldr	r3, [r3, #32]
 23fe23e:	9302      	str	r3, [sp, #8]
 23fe240:	bd09      	pop	{r0, r3, pc}
 23fe242:	0000      	.short	0x0000
 23fe244:	1007acf0 	.word	0x1007acf0
 23fe248:	00000010 	.word	0x00000010

023fe24c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fe24c:	b509      	push	{r0, r3, lr}
 23fe24e:	4804      	ldr	r0, [pc, #16]	; (23fe260 <hal_i2c_available+0x14>)
 23fe250:	6800      	ldr	r0, [r0, #0]
 23fe252:	4b04      	ldr	r3, [pc, #16]	; (23fe264 <hal_i2c_available+0x18>)
 23fe254:	4403      	add	r3, r0
 23fe256:	681b      	ldr	r3, [r3, #0]
 23fe258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fe25a:	9302      	str	r3, [sp, #8]
 23fe25c:	bd09      	pop	{r0, r3, pc}
 23fe25e:	0000      	.short	0x0000
 23fe260:	1007acf0 	.word	0x1007acf0
 23fe264:	00000010 	.word	0x00000010

023fe268 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fe268:	b509      	push	{r0, r3, lr}
 23fe26a:	4804      	ldr	r0, [pc, #16]	; (23fe27c <hal_i2c_read+0x14>)
 23fe26c:	6800      	ldr	r0, [r0, #0]
 23fe26e:	4b04      	ldr	r3, [pc, #16]	; (23fe280 <hal_i2c_read+0x18>)
 23fe270:	4403      	add	r3, r0
 23fe272:	681b      	ldr	r3, [r3, #0]
 23fe274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fe276:	9302      	str	r3, [sp, #8]
 23fe278:	bd09      	pop	{r0, r3, pc}
 23fe27a:	0000      	.short	0x0000
 23fe27c:	1007acf0 	.word	0x1007acf0
 23fe280:	00000010 	.word	0x00000010

023fe284 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fe284:	b509      	push	{r0, r3, lr}
 23fe286:	4804      	ldr	r0, [pc, #16]	; (23fe298 <hal_i2c_peek+0x14>)
 23fe288:	6800      	ldr	r0, [r0, #0]
 23fe28a:	4b04      	ldr	r3, [pc, #16]	; (23fe29c <hal_i2c_peek+0x18>)
 23fe28c:	4403      	add	r3, r0
 23fe28e:	681b      	ldr	r3, [r3, #0]
 23fe290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fe292:	9302      	str	r3, [sp, #8]
 23fe294:	bd09      	pop	{r0, r3, pc}
 23fe296:	0000      	.short	0x0000
 23fe298:	1007acf0 	.word	0x1007acf0
 23fe29c:	00000010 	.word	0x00000010

023fe2a0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fe2a0:	b509      	push	{r0, r3, lr}
 23fe2a2:	4804      	ldr	r0, [pc, #16]	; (23fe2b4 <hal_i2c_flush+0x14>)
 23fe2a4:	6800      	ldr	r0, [r0, #0]
 23fe2a6:	4b04      	ldr	r3, [pc, #16]	; (23fe2b8 <hal_i2c_flush+0x18>)
 23fe2a8:	4403      	add	r3, r0
 23fe2aa:	681b      	ldr	r3, [r3, #0]
 23fe2ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fe2ae:	9302      	str	r3, [sp, #8]
 23fe2b0:	bd09      	pop	{r0, r3, pc}
 23fe2b2:	0000      	.short	0x0000
 23fe2b4:	1007acf0 	.word	0x1007acf0
 23fe2b8:	00000010 	.word	0x00000010

023fe2bc <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fe2bc:	b509      	push	{r0, r3, lr}
 23fe2be:	4804      	ldr	r0, [pc, #16]	; (23fe2d0 <hal_i2c_is_enabled+0x14>)
 23fe2c0:	6800      	ldr	r0, [r0, #0]
 23fe2c2:	4b04      	ldr	r3, [pc, #16]	; (23fe2d4 <hal_i2c_is_enabled+0x18>)
 23fe2c4:	4403      	add	r3, r0
 23fe2c6:	681b      	ldr	r3, [r3, #0]
 23fe2c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fe2ca:	9302      	str	r3, [sp, #8]
 23fe2cc:	bd09      	pop	{r0, r3, pc}
 23fe2ce:	0000      	.short	0x0000
 23fe2d0:	1007acf0 	.word	0x1007acf0
 23fe2d4:	00000010 	.word	0x00000010

023fe2d8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fe2d8:	b509      	push	{r0, r3, lr}
 23fe2da:	4804      	ldr	r0, [pc, #16]	; (23fe2ec <hal_i2c_init+0x14>)
 23fe2dc:	6800      	ldr	r0, [r0, #0]
 23fe2de:	4b04      	ldr	r3, [pc, #16]	; (23fe2f0 <hal_i2c_init+0x18>)
 23fe2e0:	4403      	add	r3, r0
 23fe2e2:	681b      	ldr	r3, [r3, #0]
 23fe2e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe2e6:	9302      	str	r3, [sp, #8]
 23fe2e8:	bd09      	pop	{r0, r3, pc}
 23fe2ea:	0000      	.short	0x0000
 23fe2ec:	1007acf0 	.word	0x1007acf0
 23fe2f0:	00000010 	.word	0x00000010

023fe2f4 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 23fe2f4:	b509      	push	{r0, r3, lr}
 23fe2f6:	4804      	ldr	r0, [pc, #16]	; (23fe308 <hal_i2c_request_ex+0x14>)
 23fe2f8:	6800      	ldr	r0, [r0, #0]
 23fe2fa:	4b04      	ldr	r3, [pc, #16]	; (23fe30c <hal_i2c_request_ex+0x18>)
 23fe2fc:	4403      	add	r3, r0
 23fe2fe:	681b      	ldr	r3, [r3, #0]
 23fe300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fe302:	9302      	str	r3, [sp, #8]
 23fe304:	bd09      	pop	{r0, r3, pc}
 23fe306:	0000      	.short	0x0000
 23fe308:	1007acf0 	.word	0x1007acf0
 23fe30c:	00000010 	.word	0x00000010

023fe310 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fe310:	b509      	push	{r0, r3, lr}
 23fe312:	4804      	ldr	r0, [pc, #16]	; (23fe324 <inet_inet_ntop+0x14>)
 23fe314:	6800      	ldr	r0, [r0, #0]
 23fe316:	4b04      	ldr	r3, [pc, #16]	; (23fe328 <inet_inet_ntop+0x18>)
 23fe318:	4403      	add	r3, r0
 23fe31a:	681b      	ldr	r3, [r3, #0]
 23fe31c:	695b      	ldr	r3, [r3, #20]
 23fe31e:	9302      	str	r3, [sp, #8]
 23fe320:	bd09      	pop	{r0, r3, pc}
 23fe322:	0000      	.short	0x0000
 23fe324:	1007acf0 	.word	0x1007acf0
 23fe328:	0000004c 	.word	0x0000004c

023fe32c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fe32c:	b509      	push	{r0, r3, lr}
 23fe32e:	4804      	ldr	r0, [pc, #16]	; (23fe340 <netdb_freeaddrinfo+0x14>)
 23fe330:	6800      	ldr	r0, [r0, #0]
 23fe332:	4b04      	ldr	r3, [pc, #16]	; (23fe344 <netdb_freeaddrinfo+0x18>)
 23fe334:	4403      	add	r3, r0
 23fe336:	681b      	ldr	r3, [r3, #0]
 23fe338:	689b      	ldr	r3, [r3, #8]
 23fe33a:	9302      	str	r3, [sp, #8]
 23fe33c:	bd09      	pop	{r0, r3, pc}
 23fe33e:	0000      	.short	0x0000
 23fe340:	1007acf0 	.word	0x1007acf0
 23fe344:	00000050 	.word	0x00000050

023fe348 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fe348:	b509      	push	{r0, r3, lr}
 23fe34a:	4804      	ldr	r0, [pc, #16]	; (23fe35c <netdb_getaddrinfo+0x14>)
 23fe34c:	6800      	ldr	r0, [r0, #0]
 23fe34e:	4b04      	ldr	r3, [pc, #16]	; (23fe360 <netdb_getaddrinfo+0x18>)
 23fe350:	4403      	add	r3, r0
 23fe352:	681b      	ldr	r3, [r3, #0]
 23fe354:	68db      	ldr	r3, [r3, #12]
 23fe356:	9302      	str	r3, [sp, #8]
 23fe358:	bd09      	pop	{r0, r3, pc}
 23fe35a:	0000      	.short	0x0000
 23fe35c:	1007acf0 	.word	0x1007acf0
 23fe360:	00000050 	.word	0x00000050

023fe364 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fe364:	b509      	push	{r0, r3, lr}
 23fe366:	4804      	ldr	r0, [pc, #16]	; (23fe378 <hal_spi_init+0x14>)
 23fe368:	6800      	ldr	r0, [r0, #0]
 23fe36a:	4b04      	ldr	r3, [pc, #16]	; (23fe37c <hal_spi_init+0x18>)
 23fe36c:	4403      	add	r3, r0
 23fe36e:	681b      	ldr	r3, [r3, #0]
 23fe370:	69db      	ldr	r3, [r3, #28]
 23fe372:	9302      	str	r3, [sp, #8]
 23fe374:	bd09      	pop	{r0, r3, pc}
 23fe376:	0000      	.short	0x0000
 23fe378:	1007acf0 	.word	0x1007acf0
 23fe37c:	00000018 	.word	0x00000018

023fe380 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fe380:	b509      	push	{r0, r3, lr}
 23fe382:	4804      	ldr	r0, [pc, #16]	; (23fe394 <hal_spi_is_enabled+0x14>)
 23fe384:	6800      	ldr	r0, [r0, #0]
 23fe386:	4b04      	ldr	r3, [pc, #16]	; (23fe398 <hal_spi_is_enabled+0x18>)
 23fe388:	4403      	add	r3, r0
 23fe38a:	681b      	ldr	r3, [r3, #0]
 23fe38c:	6a1b      	ldr	r3, [r3, #32]
 23fe38e:	9302      	str	r3, [sp, #8]
 23fe390:	bd09      	pop	{r0, r3, pc}
 23fe392:	0000      	.short	0x0000
 23fe394:	1007acf0 	.word	0x1007acf0
 23fe398:	00000018 	.word	0x00000018

023fe39c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fe39c:	b509      	push	{r0, r3, lr}
 23fe39e:	4804      	ldr	r0, [pc, #16]	; (23fe3b0 <hal_usart_write+0x14>)
 23fe3a0:	6800      	ldr	r0, [r0, #0]
 23fe3a2:	4b04      	ldr	r3, [pc, #16]	; (23fe3b4 <hal_usart_write+0x18>)
 23fe3a4:	4403      	add	r3, r0
 23fe3a6:	681b      	ldr	r3, [r3, #0]
 23fe3a8:	68db      	ldr	r3, [r3, #12]
 23fe3aa:	9302      	str	r3, [sp, #8]
 23fe3ac:	bd09      	pop	{r0, r3, pc}
 23fe3ae:	0000      	.short	0x0000
 23fe3b0:	1007acf0 	.word	0x1007acf0
 23fe3b4:	00000024 	.word	0x00000024

023fe3b8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fe3b8:	b509      	push	{r0, r3, lr}
 23fe3ba:	4804      	ldr	r0, [pc, #16]	; (23fe3cc <hal_usart_available+0x14>)
 23fe3bc:	6800      	ldr	r0, [r0, #0]
 23fe3be:	4b04      	ldr	r3, [pc, #16]	; (23fe3d0 <hal_usart_available+0x18>)
 23fe3c0:	4403      	add	r3, r0
 23fe3c2:	681b      	ldr	r3, [r3, #0]
 23fe3c4:	691b      	ldr	r3, [r3, #16]
 23fe3c6:	9302      	str	r3, [sp, #8]
 23fe3c8:	bd09      	pop	{r0, r3, pc}
 23fe3ca:	0000      	.short	0x0000
 23fe3cc:	1007acf0 	.word	0x1007acf0
 23fe3d0:	00000024 	.word	0x00000024

023fe3d4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fe3d4:	b509      	push	{r0, r3, lr}
 23fe3d6:	4804      	ldr	r0, [pc, #16]	; (23fe3e8 <hal_usart_read+0x14>)
 23fe3d8:	6800      	ldr	r0, [r0, #0]
 23fe3da:	4b04      	ldr	r3, [pc, #16]	; (23fe3ec <hal_usart_read+0x18>)
 23fe3dc:	4403      	add	r3, r0
 23fe3de:	681b      	ldr	r3, [r3, #0]
 23fe3e0:	695b      	ldr	r3, [r3, #20]
 23fe3e2:	9302      	str	r3, [sp, #8]
 23fe3e4:	bd09      	pop	{r0, r3, pc}
 23fe3e6:	0000      	.short	0x0000
 23fe3e8:	1007acf0 	.word	0x1007acf0
 23fe3ec:	00000024 	.word	0x00000024

023fe3f0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fe3f0:	b509      	push	{r0, r3, lr}
 23fe3f2:	4804      	ldr	r0, [pc, #16]	; (23fe404 <hal_usart_peek+0x14>)
 23fe3f4:	6800      	ldr	r0, [r0, #0]
 23fe3f6:	4b04      	ldr	r3, [pc, #16]	; (23fe408 <hal_usart_peek+0x18>)
 23fe3f8:	4403      	add	r3, r0
 23fe3fa:	681b      	ldr	r3, [r3, #0]
 23fe3fc:	699b      	ldr	r3, [r3, #24]
 23fe3fe:	9302      	str	r3, [sp, #8]
 23fe400:	bd09      	pop	{r0, r3, pc}
 23fe402:	0000      	.short	0x0000
 23fe404:	1007acf0 	.word	0x1007acf0
 23fe408:	00000024 	.word	0x00000024

023fe40c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fe40c:	b509      	push	{r0, r3, lr}
 23fe40e:	4804      	ldr	r0, [pc, #16]	; (23fe420 <hal_usart_flush+0x14>)
 23fe410:	6800      	ldr	r0, [r0, #0]
 23fe412:	4b04      	ldr	r3, [pc, #16]	; (23fe424 <hal_usart_flush+0x18>)
 23fe414:	4403      	add	r3, r0
 23fe416:	681b      	ldr	r3, [r3, #0]
 23fe418:	69db      	ldr	r3, [r3, #28]
 23fe41a:	9302      	str	r3, [sp, #8]
 23fe41c:	bd09      	pop	{r0, r3, pc}
 23fe41e:	0000      	.short	0x0000
 23fe420:	1007acf0 	.word	0x1007acf0
 23fe424:	00000024 	.word	0x00000024

023fe428 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fe428:	b509      	push	{r0, r3, lr}
 23fe42a:	4804      	ldr	r0, [pc, #16]	; (23fe43c <hal_usart_is_enabled+0x14>)
 23fe42c:	6800      	ldr	r0, [r0, #0]
 23fe42e:	4b04      	ldr	r3, [pc, #16]	; (23fe440 <hal_usart_is_enabled+0x18>)
 23fe430:	4403      	add	r3, r0
 23fe432:	681b      	ldr	r3, [r3, #0]
 23fe434:	6a1b      	ldr	r3, [r3, #32]
 23fe436:	9302      	str	r3, [sp, #8]
 23fe438:	bd09      	pop	{r0, r3, pc}
 23fe43a:	0000      	.short	0x0000
 23fe43c:	1007acf0 	.word	0x1007acf0
 23fe440:	00000024 	.word	0x00000024

023fe444 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fe444:	b509      	push	{r0, r3, lr}
 23fe446:	4804      	ldr	r0, [pc, #16]	; (23fe458 <hal_usart_available_data_for_write+0x14>)
 23fe448:	6800      	ldr	r0, [r0, #0]
 23fe44a:	4b04      	ldr	r3, [pc, #16]	; (23fe45c <hal_usart_available_data_for_write+0x18>)
 23fe44c:	4403      	add	r3, r0
 23fe44e:	681b      	ldr	r3, [r3, #0]
 23fe450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fe452:	9302      	str	r3, [sp, #8]
 23fe454:	bd09      	pop	{r0, r3, pc}
 23fe456:	0000      	.short	0x0000
 23fe458:	1007acf0 	.word	0x1007acf0
 23fe45c:	00000024 	.word	0x00000024

023fe460 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fe460:	b509      	push	{r0, r3, lr}
 23fe462:	4804      	ldr	r0, [pc, #16]	; (23fe474 <hal_usart_init_ex+0x14>)
 23fe464:	6800      	ldr	r0, [r0, #0]
 23fe466:	4b04      	ldr	r3, [pc, #16]	; (23fe478 <hal_usart_init_ex+0x18>)
 23fe468:	4403      	add	r3, r0
 23fe46a:	681b      	ldr	r3, [r3, #0]
 23fe46c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe46e:	9302      	str	r3, [sp, #8]
 23fe470:	bd09      	pop	{r0, r3, pc}
 23fe472:	0000      	.short	0x0000
 23fe474:	1007acf0 	.word	0x1007acf0
 23fe478:	00000024 	.word	0x00000024

023fe47c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fe47c:	b509      	push	{r0, r3, lr}
 23fe47e:	4804      	ldr	r0, [pc, #16]	; (23fe490 <HAL_USB_USART_Init+0x14>)
 23fe480:	6800      	ldr	r0, [r0, #0]
 23fe482:	4b04      	ldr	r3, [pc, #16]	; (23fe494 <HAL_USB_USART_Init+0x18>)
 23fe484:	4403      	add	r3, r0
 23fe486:	681b      	ldr	r3, [r3, #0]
 23fe488:	681b      	ldr	r3, [r3, #0]
 23fe48a:	9302      	str	r3, [sp, #8]
 23fe48c:	bd09      	pop	{r0, r3, pc}
 23fe48e:	0000      	.short	0x0000
 23fe490:	1007acf0 	.word	0x1007acf0
 23fe494:	00000034 	.word	0x00000034

023fe498 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fe498:	b509      	push	{r0, r3, lr}
 23fe49a:	4804      	ldr	r0, [pc, #16]	; (23fe4ac <HAL_USB_USART_Available_Data+0x14>)
 23fe49c:	6800      	ldr	r0, [r0, #0]
 23fe49e:	4b04      	ldr	r3, [pc, #16]	; (23fe4b0 <HAL_USB_USART_Available_Data+0x18>)
 23fe4a0:	4403      	add	r3, r0
 23fe4a2:	681b      	ldr	r3, [r3, #0]
 23fe4a4:	691b      	ldr	r3, [r3, #16]
 23fe4a6:	9302      	str	r3, [sp, #8]
 23fe4a8:	bd09      	pop	{r0, r3, pc}
 23fe4aa:	0000      	.short	0x0000
 23fe4ac:	1007acf0 	.word	0x1007acf0
 23fe4b0:	00000034 	.word	0x00000034

023fe4b4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fe4b4:	b509      	push	{r0, r3, lr}
 23fe4b6:	4804      	ldr	r0, [pc, #16]	; (23fe4c8 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fe4b8:	6800      	ldr	r0, [r0, #0]
 23fe4ba:	4b04      	ldr	r3, [pc, #16]	; (23fe4cc <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fe4bc:	4403      	add	r3, r0
 23fe4be:	681b      	ldr	r3, [r3, #0]
 23fe4c0:	695b      	ldr	r3, [r3, #20]
 23fe4c2:	9302      	str	r3, [sp, #8]
 23fe4c4:	bd09      	pop	{r0, r3, pc}
 23fe4c6:	0000      	.short	0x0000
 23fe4c8:	1007acf0 	.word	0x1007acf0
 23fe4cc:	00000034 	.word	0x00000034

023fe4d0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fe4d0:	b509      	push	{r0, r3, lr}
 23fe4d2:	4804      	ldr	r0, [pc, #16]	; (23fe4e4 <HAL_USB_USART_Receive_Data+0x14>)
 23fe4d4:	6800      	ldr	r0, [r0, #0]
 23fe4d6:	4b04      	ldr	r3, [pc, #16]	; (23fe4e8 <HAL_USB_USART_Receive_Data+0x18>)
 23fe4d8:	4403      	add	r3, r0
 23fe4da:	681b      	ldr	r3, [r3, #0]
 23fe4dc:	699b      	ldr	r3, [r3, #24]
 23fe4de:	9302      	str	r3, [sp, #8]
 23fe4e0:	bd09      	pop	{r0, r3, pc}
 23fe4e2:	0000      	.short	0x0000
 23fe4e4:	1007acf0 	.word	0x1007acf0
 23fe4e8:	00000034 	.word	0x00000034

023fe4ec <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fe4ec:	b509      	push	{r0, r3, lr}
 23fe4ee:	4804      	ldr	r0, [pc, #16]	; (23fe500 <HAL_USB_USART_Send_Data+0x14>)
 23fe4f0:	6800      	ldr	r0, [r0, #0]
 23fe4f2:	4b04      	ldr	r3, [pc, #16]	; (23fe504 <HAL_USB_USART_Send_Data+0x18>)
 23fe4f4:	4403      	add	r3, r0
 23fe4f6:	681b      	ldr	r3, [r3, #0]
 23fe4f8:	69db      	ldr	r3, [r3, #28]
 23fe4fa:	9302      	str	r3, [sp, #8]
 23fe4fc:	bd09      	pop	{r0, r3, pc}
 23fe4fe:	0000      	.short	0x0000
 23fe500:	1007acf0 	.word	0x1007acf0
 23fe504:	00000034 	.word	0x00000034

023fe508 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fe508:	b509      	push	{r0, r3, lr}
 23fe50a:	4804      	ldr	r0, [pc, #16]	; (23fe51c <HAL_USB_USART_Flush_Data+0x14>)
 23fe50c:	6800      	ldr	r0, [r0, #0]
 23fe50e:	4b04      	ldr	r3, [pc, #16]	; (23fe520 <HAL_USB_USART_Flush_Data+0x18>)
 23fe510:	4403      	add	r3, r0
 23fe512:	681b      	ldr	r3, [r3, #0]
 23fe514:	6a1b      	ldr	r3, [r3, #32]
 23fe516:	9302      	str	r3, [sp, #8]
 23fe518:	bd09      	pop	{r0, r3, pc}
 23fe51a:	0000      	.short	0x0000
 23fe51c:	1007acf0 	.word	0x1007acf0
 23fe520:	00000034 	.word	0x00000034

023fe524 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fe524:	b509      	push	{r0, r3, lr}
 23fe526:	4804      	ldr	r0, [pc, #16]	; (23fe538 <set_system_mode+0x14>)
 23fe528:	6800      	ldr	r0, [r0, #0]
 23fe52a:	4b04      	ldr	r3, [pc, #16]	; (23fe53c <set_system_mode+0x18>)
 23fe52c:	4403      	add	r3, r0
 23fe52e:	681b      	ldr	r3, [r3, #0]
 23fe530:	685b      	ldr	r3, [r3, #4]
 23fe532:	9302      	str	r3, [sp, #8]
 23fe534:	bd09      	pop	{r0, r3, pc}
 23fe536:	0000      	.short	0x0000
 23fe538:	1007acf0 	.word	0x1007acf0
 23fe53c:	00000008 	.word	0x00000008

023fe540 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fe540:	b509      	push	{r0, r3, lr}
 23fe542:	4804      	ldr	r0, [pc, #16]	; (23fe554 <system_delay_ms+0x14>)
 23fe544:	6800      	ldr	r0, [r0, #0]
 23fe546:	4b04      	ldr	r3, [pc, #16]	; (23fe558 <system_delay_ms+0x18>)
 23fe548:	4403      	add	r3, r0
 23fe54a:	681b      	ldr	r3, [r3, #0]
 23fe54c:	695b      	ldr	r3, [r3, #20]
 23fe54e:	9302      	str	r3, [sp, #8]
 23fe550:	bd09      	pop	{r0, r3, pc}
 23fe552:	0000      	.short	0x0000
 23fe554:	1007acf0 	.word	0x1007acf0
 23fe558:	00000008 	.word	0x00000008

023fe55c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 23fe55c:	b509      	push	{r0, r3, lr}
 23fe55e:	4804      	ldr	r0, [pc, #16]	; (23fe570 <application_thread_current+0x14>)
 23fe560:	6800      	ldr	r0, [r0, #0]
 23fe562:	4b04      	ldr	r3, [pc, #16]	; (23fe574 <application_thread_current+0x18>)
 23fe564:	4403      	add	r3, r0
 23fe566:	681b      	ldr	r3, [r3, #0]
 23fe568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fe56a:	9302      	str	r3, [sp, #8]
 23fe56c:	bd09      	pop	{r0, r3, pc}
 23fe56e:	0000      	.short	0x0000
 23fe570:	1007acf0 	.word	0x1007acf0
 23fe574:	00000008 	.word	0x00000008

023fe578 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 23fe578:	b509      	push	{r0, r3, lr}
 23fe57a:	4804      	ldr	r0, [pc, #16]	; (23fe58c <application_thread_invoke+0x14>)
 23fe57c:	6800      	ldr	r0, [r0, #0]
 23fe57e:	4b04      	ldr	r3, [pc, #16]	; (23fe590 <application_thread_invoke+0x18>)
 23fe580:	4403      	add	r3, r0
 23fe582:	681b      	ldr	r3, [r3, #0]
 23fe584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fe586:	9302      	str	r3, [sp, #8]
 23fe588:	bd09      	pop	{r0, r3, pc}
 23fe58a:	0000      	.short	0x0000
 23fe58c:	1007acf0 	.word	0x1007acf0
 23fe590:	00000008 	.word	0x00000008

023fe594 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fe594:	b509      	push	{r0, r3, lr}
 23fe596:	4804      	ldr	r0, [pc, #16]	; (23fe5a8 <system_ctrl_set_app_request_handler+0x14>)
 23fe598:	6800      	ldr	r0, [r0, #0]
 23fe59a:	4b04      	ldr	r3, [pc, #16]	; (23fe5ac <system_ctrl_set_app_request_handler+0x18>)
 23fe59c:	4403      	add	r3, r0
 23fe59e:	681b      	ldr	r3, [r3, #0]
 23fe5a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fe5a4:	9302      	str	r3, [sp, #8]
 23fe5a6:	bd09      	pop	{r0, r3, pc}
 23fe5a8:	1007acf0 	.word	0x1007acf0
 23fe5ac:	00000008 	.word	0x00000008

023fe5b0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fe5b0:	b509      	push	{r0, r3, lr}
 23fe5b2:	4804      	ldr	r0, [pc, #16]	; (23fe5c4 <system_ctrl_set_result+0x14>)
 23fe5b4:	6800      	ldr	r0, [r0, #0]
 23fe5b6:	4b04      	ldr	r3, [pc, #16]	; (23fe5c8 <system_ctrl_set_result+0x18>)
 23fe5b8:	4403      	add	r3, r0
 23fe5ba:	681b      	ldr	r3, [r3, #0]
 23fe5bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fe5c0:	9302      	str	r3, [sp, #8]
 23fe5c2:	bd09      	pop	{r0, r3, pc}
 23fe5c4:	1007acf0 	.word	0x1007acf0
 23fe5c8:	00000008 	.word	0x00000008

023fe5cc <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 23fe5cc:	b509      	push	{r0, r3, lr}
 23fe5ce:	4804      	ldr	r0, [pc, #16]	; (23fe5e0 <spark_function+0x14>)
 23fe5d0:	6800      	ldr	r0, [r0, #0]
 23fe5d2:	4b04      	ldr	r3, [pc, #16]	; (23fe5e4 <spark_function+0x18>)
 23fe5d4:	4403      	add	r3, r0
 23fe5d6:	681b      	ldr	r3, [r3, #0]
 23fe5d8:	685b      	ldr	r3, [r3, #4]
 23fe5da:	9302      	str	r3, [sp, #8]
 23fe5dc:	bd09      	pop	{r0, r3, pc}
 23fe5de:	0000      	.short	0x0000
 23fe5e0:	1007acf0 	.word	0x1007acf0
 23fe5e4:	0000002c 	.word	0x0000002c

023fe5e8 <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 23fe5e8:	b509      	push	{r0, r3, lr}
 23fe5ea:	4804      	ldr	r0, [pc, #16]	; (23fe5fc <spark_cloud_flag_connected+0x14>)
 23fe5ec:	6800      	ldr	r0, [r0, #0]
 23fe5ee:	4b04      	ldr	r3, [pc, #16]	; (23fe600 <spark_cloud_flag_connected+0x18>)
 23fe5f0:	4403      	add	r3, r0
 23fe5f2:	681b      	ldr	r3, [r3, #0]
 23fe5f4:	695b      	ldr	r3, [r3, #20]
 23fe5f6:	9302      	str	r3, [sp, #8]
 23fe5f8:	bd09      	pop	{r0, r3, pc}
 23fe5fa:	0000      	.short	0x0000
 23fe5fc:	1007acf0 	.word	0x1007acf0
 23fe600:	0000002c 	.word	0x0000002c

023fe604 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 23fe604:	b509      	push	{r0, r3, lr}
 23fe606:	4804      	ldr	r0, [pc, #16]	; (23fe618 <spark_send_event+0x14>)
 23fe608:	6800      	ldr	r0, [r0, #0]
 23fe60a:	4b04      	ldr	r3, [pc, #16]	; (23fe61c <spark_send_event+0x18>)
 23fe60c:	4403      	add	r3, r0
 23fe60e:	681b      	ldr	r3, [r3, #0]
 23fe610:	6a1b      	ldr	r3, [r3, #32]
 23fe612:	9302      	str	r3, [sp, #8]
 23fe614:	bd09      	pop	{r0, r3, pc}
 23fe616:	0000      	.short	0x0000
 23fe618:	1007acf0 	.word	0x1007acf0
 23fe61c:	0000002c 	.word	0x0000002c

023fe620 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fe620:	b509      	push	{r0, r3, lr}
 23fe622:	4804      	ldr	r0, [pc, #16]	; (23fe634 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fe624:	6800      	ldr	r0, [r0, #0]
 23fe626:	4b04      	ldr	r3, [pc, #16]	; (23fe638 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fe628:	4403      	add	r3, r0
 23fe62a:	681b      	ldr	r3, [r3, #0]
 23fe62c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fe62e:	9302      	str	r3, [sp, #8]
 23fe630:	bd09      	pop	{r0, r3, pc}
 23fe632:	0000      	.short	0x0000
 23fe634:	1007acf0 	.word	0x1007acf0
 23fe638:	0000002c 	.word	0x0000002c

023fe63c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fe63c:	b509      	push	{r0, r3, lr}
 23fe63e:	4804      	ldr	r0, [pc, #16]	; (23fe650 <network_connect+0x14>)
 23fe640:	6800      	ldr	r0, [r0, #0]
 23fe642:	4b04      	ldr	r3, [pc, #16]	; (23fe654 <network_connect+0x18>)
 23fe644:	4403      	add	r3, r0
 23fe646:	681b      	ldr	r3, [r3, #0]
 23fe648:	685b      	ldr	r3, [r3, #4]
 23fe64a:	9302      	str	r3, [sp, #8]
 23fe64c:	bd09      	pop	{r0, r3, pc}
 23fe64e:	0000      	.short	0x0000
 23fe650:	1007acf0 	.word	0x1007acf0
 23fe654:	00000028 	.word	0x00000028

023fe658 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fe658:	b509      	push	{r0, r3, lr}
 23fe65a:	4804      	ldr	r0, [pc, #16]	; (23fe66c <network_connecting+0x14>)
 23fe65c:	6800      	ldr	r0, [r0, #0]
 23fe65e:	4b04      	ldr	r3, [pc, #16]	; (23fe670 <network_connecting+0x18>)
 23fe660:	4403      	add	r3, r0
 23fe662:	681b      	ldr	r3, [r3, #0]
 23fe664:	689b      	ldr	r3, [r3, #8]
 23fe666:	9302      	str	r3, [sp, #8]
 23fe668:	bd09      	pop	{r0, r3, pc}
 23fe66a:	0000      	.short	0x0000
 23fe66c:	1007acf0 	.word	0x1007acf0
 23fe670:	00000028 	.word	0x00000028

023fe674 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fe674:	b509      	push	{r0, r3, lr}
 23fe676:	4804      	ldr	r0, [pc, #16]	; (23fe688 <network_disconnect+0x14>)
 23fe678:	6800      	ldr	r0, [r0, #0]
 23fe67a:	4b04      	ldr	r3, [pc, #16]	; (23fe68c <network_disconnect+0x18>)
 23fe67c:	4403      	add	r3, r0
 23fe67e:	681b      	ldr	r3, [r3, #0]
 23fe680:	68db      	ldr	r3, [r3, #12]
 23fe682:	9302      	str	r3, [sp, #8]
 23fe684:	bd09      	pop	{r0, r3, pc}
 23fe686:	0000      	.short	0x0000
 23fe688:	1007acf0 	.word	0x1007acf0
 23fe68c:	00000028 	.word	0x00000028

023fe690 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fe690:	b509      	push	{r0, r3, lr}
 23fe692:	4804      	ldr	r0, [pc, #16]	; (23fe6a4 <network_ready+0x14>)
 23fe694:	6800      	ldr	r0, [r0, #0]
 23fe696:	4b04      	ldr	r3, [pc, #16]	; (23fe6a8 <network_ready+0x18>)
 23fe698:	4403      	add	r3, r0
 23fe69a:	681b      	ldr	r3, [r3, #0]
 23fe69c:	691b      	ldr	r3, [r3, #16]
 23fe69e:	9302      	str	r3, [sp, #8]
 23fe6a0:	bd09      	pop	{r0, r3, pc}
 23fe6a2:	0000      	.short	0x0000
 23fe6a4:	1007acf0 	.word	0x1007acf0
 23fe6a8:	00000028 	.word	0x00000028

023fe6ac <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fe6ac:	b509      	push	{r0, r3, lr}
 23fe6ae:	4804      	ldr	r0, [pc, #16]	; (23fe6c0 <network_on+0x14>)
 23fe6b0:	6800      	ldr	r0, [r0, #0]
 23fe6b2:	4b04      	ldr	r3, [pc, #16]	; (23fe6c4 <network_on+0x18>)
 23fe6b4:	4403      	add	r3, r0
 23fe6b6:	681b      	ldr	r3, [r3, #0]
 23fe6b8:	695b      	ldr	r3, [r3, #20]
 23fe6ba:	9302      	str	r3, [sp, #8]
 23fe6bc:	bd09      	pop	{r0, r3, pc}
 23fe6be:	0000      	.short	0x0000
 23fe6c0:	1007acf0 	.word	0x1007acf0
 23fe6c4:	00000028 	.word	0x00000028

023fe6c8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fe6c8:	b509      	push	{r0, r3, lr}
 23fe6ca:	4804      	ldr	r0, [pc, #16]	; (23fe6dc <network_off+0x14>)
 23fe6cc:	6800      	ldr	r0, [r0, #0]
 23fe6ce:	4b04      	ldr	r3, [pc, #16]	; (23fe6e0 <network_off+0x18>)
 23fe6d0:	4403      	add	r3, r0
 23fe6d2:	681b      	ldr	r3, [r3, #0]
 23fe6d4:	699b      	ldr	r3, [r3, #24]
 23fe6d6:	9302      	str	r3, [sp, #8]
 23fe6d8:	bd09      	pop	{r0, r3, pc}
 23fe6da:	0000      	.short	0x0000
 23fe6dc:	1007acf0 	.word	0x1007acf0
 23fe6e0:	00000028 	.word	0x00000028

023fe6e4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fe6e4:	b509      	push	{r0, r3, lr}
 23fe6e6:	4804      	ldr	r0, [pc, #16]	; (23fe6f8 <network_listen+0x14>)
 23fe6e8:	6800      	ldr	r0, [r0, #0]
 23fe6ea:	4b04      	ldr	r3, [pc, #16]	; (23fe6fc <network_listen+0x18>)
 23fe6ec:	4403      	add	r3, r0
 23fe6ee:	681b      	ldr	r3, [r3, #0]
 23fe6f0:	69db      	ldr	r3, [r3, #28]
 23fe6f2:	9302      	str	r3, [sp, #8]
 23fe6f4:	bd09      	pop	{r0, r3, pc}
 23fe6f6:	0000      	.short	0x0000
 23fe6f8:	1007acf0 	.word	0x1007acf0
 23fe6fc:	00000028 	.word	0x00000028

023fe700 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fe700:	b509      	push	{r0, r3, lr}
 23fe702:	4804      	ldr	r0, [pc, #16]	; (23fe714 <network_listening+0x14>)
 23fe704:	6800      	ldr	r0, [r0, #0]
 23fe706:	4b04      	ldr	r3, [pc, #16]	; (23fe718 <network_listening+0x18>)
 23fe708:	4403      	add	r3, r0
 23fe70a:	681b      	ldr	r3, [r3, #0]
 23fe70c:	6a1b      	ldr	r3, [r3, #32]
 23fe70e:	9302      	str	r3, [sp, #8]
 23fe710:	bd09      	pop	{r0, r3, pc}
 23fe712:	0000      	.short	0x0000
 23fe714:	1007acf0 	.word	0x1007acf0
 23fe718:	00000028 	.word	0x00000028

023fe71c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fe71c:	b509      	push	{r0, r3, lr}
 23fe71e:	4804      	ldr	r0, [pc, #16]	; (23fe730 <network_set_listen_timeout+0x14>)
 23fe720:	6800      	ldr	r0, [r0, #0]
 23fe722:	4b04      	ldr	r3, [pc, #16]	; (23fe734 <network_set_listen_timeout+0x18>)
 23fe724:	4403      	add	r3, r0
 23fe726:	681b      	ldr	r3, [r3, #0]
 23fe728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fe72a:	9302      	str	r3, [sp, #8]
 23fe72c:	bd09      	pop	{r0, r3, pc}
 23fe72e:	0000      	.short	0x0000
 23fe730:	1007acf0 	.word	0x1007acf0
 23fe734:	00000028 	.word	0x00000028

023fe738 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fe738:	b509      	push	{r0, r3, lr}
 23fe73a:	4804      	ldr	r0, [pc, #16]	; (23fe74c <network_get_listen_timeout+0x14>)
 23fe73c:	6800      	ldr	r0, [r0, #0]
 23fe73e:	4b04      	ldr	r3, [pc, #16]	; (23fe750 <network_get_listen_timeout+0x18>)
 23fe740:	4403      	add	r3, r0
 23fe742:	681b      	ldr	r3, [r3, #0]
 23fe744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fe746:	9302      	str	r3, [sp, #8]
 23fe748:	bd09      	pop	{r0, r3, pc}
 23fe74a:	0000      	.short	0x0000
 23fe74c:	1007acf0 	.word	0x1007acf0
 23fe750:	00000028 	.word	0x00000028

023fe754 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fe754:	b509      	push	{r0, r3, lr}
 23fe756:	4804      	ldr	r0, [pc, #16]	; (23fe768 <network_is_on+0x14>)
 23fe758:	6800      	ldr	r0, [r0, #0]
 23fe75a:	4b04      	ldr	r3, [pc, #16]	; (23fe76c <network_is_on+0x18>)
 23fe75c:	4403      	add	r3, r0
 23fe75e:	681b      	ldr	r3, [r3, #0]
 23fe760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe762:	9302      	str	r3, [sp, #8]
 23fe764:	bd09      	pop	{r0, r3, pc}
 23fe766:	0000      	.short	0x0000
 23fe768:	1007acf0 	.word	0x1007acf0
 23fe76c:	00000028 	.word	0x00000028

023fe770 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fe770:	b509      	push	{r0, r3, lr}
 23fe772:	4804      	ldr	r0, [pc, #16]	; (23fe784 <network_is_off+0x14>)
 23fe774:	6800      	ldr	r0, [r0, #0]
 23fe776:	4b04      	ldr	r3, [pc, #16]	; (23fe788 <network_is_off+0x18>)
 23fe778:	4403      	add	r3, r0
 23fe77a:	681b      	ldr	r3, [r3, #0]
 23fe77c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fe77e:	9302      	str	r3, [sp, #8]
 23fe780:	bd09      	pop	{r0, r3, pc}
 23fe782:	0000      	.short	0x0000
 23fe784:	1007acf0 	.word	0x1007acf0
 23fe788:	00000028 	.word	0x00000028

023fe78c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fe78c:	b509      	push	{r0, r3, lr}
 23fe78e:	4804      	ldr	r0, [pc, #16]	; (23fe7a0 <malloc+0x14>)
 23fe790:	6800      	ldr	r0, [r0, #0]
 23fe792:	4b04      	ldr	r3, [pc, #16]	; (23fe7a4 <malloc+0x18>)
 23fe794:	4403      	add	r3, r0
 23fe796:	681b      	ldr	r3, [r3, #0]
 23fe798:	681b      	ldr	r3, [r3, #0]
 23fe79a:	9302      	str	r3, [sp, #8]
 23fe79c:	bd09      	pop	{r0, r3, pc}
 23fe79e:	0000      	.short	0x0000
 23fe7a0:	1007acf0 	.word	0x1007acf0
 23fe7a4:	00000004 	.word	0x00000004

023fe7a8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fe7a8:	b509      	push	{r0, r3, lr}
 23fe7aa:	4804      	ldr	r0, [pc, #16]	; (23fe7bc <free+0x14>)
 23fe7ac:	6800      	ldr	r0, [r0, #0]
 23fe7ae:	4b04      	ldr	r3, [pc, #16]	; (23fe7c0 <free+0x18>)
 23fe7b0:	4403      	add	r3, r0
 23fe7b2:	681b      	ldr	r3, [r3, #0]
 23fe7b4:	685b      	ldr	r3, [r3, #4]
 23fe7b6:	9302      	str	r3, [sp, #8]
 23fe7b8:	bd09      	pop	{r0, r3, pc}
 23fe7ba:	0000      	.short	0x0000
 23fe7bc:	1007acf0 	.word	0x1007acf0
 23fe7c0:	00000004 	.word	0x00000004

023fe7c4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fe7c4:	b509      	push	{r0, r3, lr}
 23fe7c6:	4804      	ldr	r0, [pc, #16]	; (23fe7d8 <realloc+0x14>)
 23fe7c8:	6800      	ldr	r0, [r0, #0]
 23fe7ca:	4b04      	ldr	r3, [pc, #16]	; (23fe7dc <realloc+0x18>)
 23fe7cc:	4403      	add	r3, r0
 23fe7ce:	681b      	ldr	r3, [r3, #0]
 23fe7d0:	689b      	ldr	r3, [r3, #8]
 23fe7d2:	9302      	str	r3, [sp, #8]
 23fe7d4:	bd09      	pop	{r0, r3, pc}
 23fe7d6:	0000      	.short	0x0000
 23fe7d8:	1007acf0 	.word	0x1007acf0
 23fe7dc:	00000004 	.word	0x00000004

023fe7e0 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 23fe7e0:	b509      	push	{r0, r3, lr}
 23fe7e2:	4804      	ldr	r0, [pc, #16]	; (23fe7f4 <snprintf+0x14>)
 23fe7e4:	6800      	ldr	r0, [r0, #0]
 23fe7e6:	4b04      	ldr	r3, [pc, #16]	; (23fe7f8 <snprintf+0x18>)
 23fe7e8:	4403      	add	r3, r0
 23fe7ea:	681b      	ldr	r3, [r3, #0]
 23fe7ec:	69db      	ldr	r3, [r3, #28]
 23fe7ee:	9302      	str	r3, [sp, #8]
 23fe7f0:	bd09      	pop	{r0, r3, pc}
 23fe7f2:	0000      	.short	0x0000
 23fe7f4:	1007acf0 	.word	0x1007acf0
 23fe7f8:	00000004 	.word	0x00000004

023fe7fc <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23fe7fc:	b509      	push	{r0, r3, lr}
 23fe7fe:	4804      	ldr	r0, [pc, #16]	; (23fe810 <abort+0x14>)
 23fe800:	6800      	ldr	r0, [r0, #0]
 23fe802:	4b04      	ldr	r3, [pc, #16]	; (23fe814 <abort+0x18>)
 23fe804:	4403      	add	r3, r0
 23fe806:	681b      	ldr	r3, [r3, #0]
 23fe808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fe80a:	9302      	str	r3, [sp, #8]
 23fe80c:	bd09      	pop	{r0, r3, pc}
 23fe80e:	0000      	.short	0x0000
 23fe810:	1007acf0 	.word	0x1007acf0
 23fe814:	00000004 	.word	0x00000004

023fe818 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23fe818:	b509      	push	{r0, r3, lr}
 23fe81a:	4804      	ldr	r0, [pc, #16]	; (23fe82c <_malloc_r+0x14>)
 23fe81c:	6800      	ldr	r0, [r0, #0]
 23fe81e:	4b04      	ldr	r3, [pc, #16]	; (23fe830 <_malloc_r+0x18>)
 23fe820:	4403      	add	r3, r0
 23fe822:	681b      	ldr	r3, [r3, #0]
 23fe824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fe826:	9302      	str	r3, [sp, #8]
 23fe828:	bd09      	pop	{r0, r3, pc}
 23fe82a:	0000      	.short	0x0000
 23fe82c:	1007acf0 	.word	0x1007acf0
 23fe830:	00000004 	.word	0x00000004

023fe834 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fe834:	b509      	push	{r0, r3, lr}
 23fe836:	4804      	ldr	r0, [pc, #16]	; (23fe848 <__assert_func+0x14>)
 23fe838:	6800      	ldr	r0, [r0, #0]
 23fe83a:	4b04      	ldr	r3, [pc, #16]	; (23fe84c <__assert_func+0x18>)
 23fe83c:	4403      	add	r3, r0
 23fe83e:	681b      	ldr	r3, [r3, #0]
 23fe840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe842:	9302      	str	r3, [sp, #8]
 23fe844:	bd09      	pop	{r0, r3, pc}
 23fe846:	0000      	.short	0x0000
 23fe848:	1007acf0 	.word	0x1007acf0
 23fe84c:	00000004 	.word	0x00000004

023fe850 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fe850:	b509      	push	{r0, r3, lr}
 23fe852:	4804      	ldr	r0, [pc, #16]	; (23fe864 <newlib_impure_ptr_callback+0x14>)
 23fe854:	6800      	ldr	r0, [r0, #0]
 23fe856:	4b04      	ldr	r3, [pc, #16]	; (23fe868 <newlib_impure_ptr_callback+0x18>)
 23fe858:	4403      	add	r3, r0
 23fe85a:	681b      	ldr	r3, [r3, #0]
 23fe85c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fe85e:	9302      	str	r3, [sp, #8]
 23fe860:	bd09      	pop	{r0, r3, pc}
 23fe862:	0000      	.short	0x0000
 23fe864:	1007acf0 	.word	0x1007acf0
 23fe868:	00000004 	.word	0x00000004

023fe86c <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
 23fe86c:	428a      	cmp	r2, r1
{
 23fe86e:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
 23fe870:	d007      	beq.n	23fe882 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
 23fe872:	1a44      	subs	r4, r0, r1
 23fe874:	9802      	ldr	r0, [sp, #8]
 23fe876:	1ac0      	subs	r0, r0, r3
 23fe878:	4344      	muls	r4, r0
 23fe87a:	1a50      	subs	r0, r2, r1
 23fe87c:	fb94 f0f0 	sdiv	r0, r4, r0
 23fe880:	4418      	add	r0, r3
}
 23fe882:	bd10      	pop	{r4, pc}

023fe884 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fe884:	2100      	movs	r1, #0
 23fe886:	f7ff be5b 	b.w	23fe540 <system_delay_ms>

023fe88a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 23fe88a:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 23fe88c:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23fe88e:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23fe890:	b17c      	cbz	r4, 23fe8b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23fe892:	6863      	ldr	r3, [r4, #4]
 23fe894:	3b01      	subs	r3, #1
 23fe896:	6063      	str	r3, [r4, #4]
 23fe898:	b95b      	cbnz	r3, 23fe8b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23fe89a:	6823      	ldr	r3, [r4, #0]
 23fe89c:	4620      	mov	r0, r4
 23fe89e:	689b      	ldr	r3, [r3, #8]
 23fe8a0:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fe8a2:	68a3      	ldr	r3, [r4, #8]
 23fe8a4:	3b01      	subs	r3, #1
 23fe8a6:	60a3      	str	r3, [r4, #8]
 23fe8a8:	b91b      	cbnz	r3, 23fe8b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23fe8aa:	6823      	ldr	r3, [r4, #0]
 23fe8ac:	4620      	mov	r0, r4
 23fe8ae:	68db      	ldr	r3, [r3, #12]
 23fe8b0:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23fe8b2:	4628      	mov	r0, r5
 23fe8b4:	bd38      	pop	{r3, r4, r5, pc}

023fe8b6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 23fe8b6:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 23fe8b8:	6883      	ldr	r3, [r0, #8]
 23fe8ba:	4604      	mov	r4, r0
 23fe8bc:	b90b      	cbnz	r3, 23fe8c2 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 23fe8be:	f001 f92d 	bl	23ffb1c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fe8c2:	68c3      	ldr	r3, [r0, #12]
 23fe8c4:	4798      	blx	r3
      if (_M_manager)
 23fe8c6:	68a3      	ldr	r3, [r4, #8]
 23fe8c8:	b11b      	cbz	r3, 23fe8d2 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fe8ca:	2203      	movs	r2, #3
 23fe8cc:	4621      	mov	r1, r4
 23fe8ce:	4620      	mov	r0, r4
 23fe8d0:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 23fe8d2:	4620      	mov	r0, r4
}
 23fe8d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 23fe8d8:	2110      	movs	r1, #16
 23fe8da:	f7ff b91c 	b.w	23fdb16 <_ZdlPvj>

023fe8de <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23fe8de:	b510      	push	{r4, lr}
      if (_M_manager)
 23fe8e0:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23fe8e2:	4604      	mov	r4, r0
      if (_M_manager)
 23fe8e4:	b113      	cbz	r3, 23fe8ec <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fe8e6:	2203      	movs	r2, #3
 23fe8e8:	4601      	mov	r1, r0
 23fe8ea:	4798      	blx	r3
    }
 23fe8ec:	4620      	mov	r0, r4
 23fe8ee:	bd10      	pop	{r4, pc}

023fe8f0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 23fe8f0:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe8f2:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 23fe8f4:	460b      	mov	r3, r1
 23fe8f6:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe8f8:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fe8fc:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23fe900:	e893 0003 	ldmia.w	r3, {r0, r1}
 23fe904:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23fe908:	e894 0003 	ldmia.w	r4, {r0, r1}
 23fe90c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 23fe910:	b002      	add	sp, #8
 23fe912:	bd10      	pop	{r4, pc}

023fe914 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fe914:	2300      	movs	r3, #0
 23fe916:	4802      	ldr	r0, [pc, #8]	; (23fe920 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fe918:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fe91a:	f7ff bbfd 	b.w	23fe118 <os_mutex_recursive_create>
 23fe91e:	bf00      	nop
 23fe920:	1007ae80 	.word	0x1007ae80

023fe924 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fe924:	4770      	bx	lr

023fe926 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 23fe926:	2000      	movs	r0, #0
 23fe928:	4770      	bx	lr

023fe92a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fe92a:	b510      	push	{r4, lr}
 23fe92c:	4604      	mov	r4, r0
 23fe92e:	2110      	movs	r1, #16
 23fe930:	f7ff f8f1 	bl	23fdb16 <_ZdlPvj>
 23fe934:	4620      	mov	r0, r4
 23fe936:	bd10      	pop	{r4, pc}

023fe938 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 23fe938:	b508      	push	{r3, lr}
      { delete this; }
 23fe93a:	f7ff fff6 	bl	23fe92a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 23fe93e:	bd08      	pop	{r3, pc}

023fe940 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 23fe940:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 23fe942:	b530      	push	{r4, r5, lr}
        type_(type) {
 23fe944:	f64f 749c 	movw	r4, #65436	; 0xff9c
 23fe948:	6002      	str	r2, [r0, #0]
 23fe94a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fe94c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe94e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fe950:	680c      	ldr	r4, [r1, #0]
 23fe952:	8085      	strh	r5, [r0, #4]
 23fe954:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe956:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 23fe958:	bd30      	pop	{r4, r5, pc}

023fe95a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 23fe95a:	b510      	push	{r4, lr}
 23fe95c:	4604      	mov	r4, r0
    free((void*)msg_);
 23fe95e:	6800      	ldr	r0, [r0, #0]
 23fe960:	f7ff ff22 	bl	23fe7a8 <free>
}
 23fe964:	4620      	mov	r0, r4
 23fe966:	bd10      	pop	{r4, pc}

023fe968 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fe968:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 23fe96a:	68c4      	ldr	r4, [r0, #12]
 23fe96c:	b314      	cbz	r4, 23fe9b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x4c>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 23fe96e:	7823      	ldrb	r3, [r4, #0]
 23fe970:	b2db      	uxtb	r3, r3
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 23fe972:	2b02      	cmp	r3, #2
 23fe974:	d103      	bne.n	23fe97e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x16>
            error_.~Error();
 23fe976:	f104 000c 	add.w	r0, r4, #12
 23fe97a:	f7ff ffee 	bl	23fe95a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 23fe97e:	1d23      	adds	r3, r4, #4
 23fe980:	681d      	ldr	r5, [r3, #0]
        delete onSuccess_.load(std::memory_order_relaxed);
 23fe982:	b135      	cbz	r5, 23fe992 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x2a>
    class function<_Res(_ArgTypes...)>
 23fe984:	4628      	mov	r0, r5
 23fe986:	f7ff ffaa 	bl	23fe8de <_ZNSt14_Function_baseD1Ev>
 23fe98a:	2110      	movs	r1, #16
 23fe98c:	4628      	mov	r0, r5
 23fe98e:	f7ff f8c2 	bl	23fdb16 <_ZdlPvj>
 23fe992:	f104 0308 	add.w	r3, r4, #8
 23fe996:	681d      	ldr	r5, [r3, #0]
        delete onError_.load(std::memory_order_relaxed);
 23fe998:	b135      	cbz	r5, 23fe9a8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x40>
 23fe99a:	4628      	mov	r0, r5
 23fe99c:	f7ff ff9f 	bl	23fe8de <_ZNSt14_Function_baseD1Ev>
 23fe9a0:	2110      	movs	r1, #16
 23fe9a2:	4628      	mov	r0, r5
 23fe9a4:	f7ff f8b7 	bl	23fdb16 <_ZdlPvj>
 23fe9a8:	4620      	mov	r0, r4
 23fe9aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fe9ae:	2114      	movs	r1, #20
 23fe9b0:	f7ff b8b1 	b.w	23fdb16 <_ZdlPvj>
 23fe9b4:	bd38      	pop	{r3, r4, r5, pc}

023fe9b6 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 23fe9b6:	b510      	push	{r4, lr}
 23fe9b8:	b088      	sub	sp, #32
 23fe9ba:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 23fe9bc:	4668      	mov	r0, sp
 23fe9be:	f000 fd1a 	bl	23ff3f6 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 23fe9c2:	4669      	mov	r1, sp
 23fe9c4:	a804      	add	r0, sp, #16
 23fe9c6:	f000 fd39 	bl	23ff43c <_ZN6StringC1ERKS_>
 23fe9ca:	a804      	add	r0, sp, #16
 23fe9cc:	47a0      	blx	r4
 23fe9ce:	4604      	mov	r4, r0
 23fe9d0:	a804      	add	r0, sp, #16
 23fe9d2:	f000 fcc5 	bl	23ff360 <_ZN6StringD1Ev>
    String p(param);
 23fe9d6:	4668      	mov	r0, sp
 23fe9d8:	f000 fcc2 	bl	23ff360 <_ZN6StringD1Ev>
}
 23fe9dc:	4620      	mov	r0, r4
 23fe9de:	b008      	add	sp, #32
 23fe9e0:	bd10      	pop	{r4, pc}

023fe9e2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 23fe9e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 23fe9e4:	2300      	movs	r3, #0
         size = sizeof(*this);
 23fe9e6:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 23fe9e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 23fe9ec:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 23fe9ee:	4669      	mov	r1, sp
 23fe9f0:	461a      	mov	r2, r3
 23fe9f2:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 23fe9f4:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 23fe9f8:	f8ad 4000 	strh.w	r4, [sp]
 23fe9fc:	f7ff fde6 	bl	23fe5cc <spark_function>
}
 23fea00:	b004      	add	sp, #16
 23fea02:	bd10      	pop	{r4, pc}

023fea04 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fea04:	680b      	ldr	r3, [r1, #0]
 23fea06:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fea08:	684b      	ldr	r3, [r1, #4]
 23fea0a:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fea0c:	b113      	cbz	r3, 23fea14 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 23fea0e:	685a      	ldr	r2, [r3, #4]
 23fea10:	3201      	adds	r2, #1
 23fea12:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fea14:	4770      	bx	lr

023fea16 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 23fea16:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fea18:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fea1a:	4668      	mov	r0, sp
 23fea1c:	460d      	mov	r5, r1
 23fea1e:	f7ff fff1 	bl	23fea04 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fea22:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fea24:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fea26:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 23fea28:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fea2a:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 23fea2c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 23fea2e:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 23fea30:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 23fea32:	f7ff ff2a 	bl	23fe88a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 23fea36:	b135      	cbz	r5, 23fea46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 23fea38:	1d28      	adds	r0, r5, #4
 23fea3a:	f7ff ff26 	bl	23fe88a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fea3e:	2108      	movs	r1, #8
 23fea40:	4628      	mov	r0, r5
 23fea42:	f7ff f868 	bl	23fdb16 <_ZdlPvj>
        return p;
    }
 23fea46:	4620      	mov	r0, r4
 23fea48:	b003      	add	sp, #12
 23fea4a:	bd30      	pop	{r4, r5, pc}

023fea4c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 23fea4c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fea4e:	b510      	push	{r4, lr}
      if (_M_empty())
 23fea50:	b90a      	cbnz	r2, 23fea56 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 23fea52:	f001 f863 	bl	23ffb1c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fea56:	68c3      	ldr	r3, [r0, #12]
    }
 23fea58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fea5c:	4718      	bx	r3

023fea5e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fea5e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23fea60:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23fea62:	f100 0110 	add.w	r1, r0, #16
 23fea66:	f7ff fff1 	bl	23fea4c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 23fea6a:	bd08      	pop	{r3, pc}

023fea6c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 23fea6c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fea6e:	b510      	push	{r4, lr}
      if (_M_empty())
 23fea70:	b90a      	cbnz	r2, 23fea76 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 23fea72:	f001 f853 	bl	23ffb1c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fea76:	68c3      	ldr	r3, [r0, #12]
    }
 23fea78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fea7c:	4718      	bx	r3

023fea7e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fea7e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23fea80:	6800      	ldr	r0, [r0, #0]
 23fea82:	f100 0110 	add.w	r1, r0, #16
 23fea86:	f7ff fff1 	bl	23fea6c <_ZNKSt8functionIFvRKbEEclES1_>
      }
 23fea8a:	bd08      	pop	{r3, pc}

023fea8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 23fea8c:	b538      	push	{r3, r4, r5, lr}
 23fea8e:	2300      	movs	r3, #0
 23fea90:	4604      	mov	r4, r0
 23fea92:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fea94:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 23fea96:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fea98:	f7ff f839 	bl	23fdb0e <_Znwj>
 23fea9c:	b128      	cbz	r0, 23feaaa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 23fea9e:	2301      	movs	r3, #1
 23feaa0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 23feaa4:	4b02      	ldr	r3, [pc, #8]	; (23feab0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 23feaa6:	60c5      	str	r5, [r0, #12]
 23feaa8:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23feaaa:	6020      	str	r0, [r4, #0]
	}
 23feaac:	4620      	mov	r0, r4
 23feaae:	bd38      	pop	{r3, r4, r5, pc}
 23feab0:	023ffdd4 	.word	0x023ffdd4

023feab4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 23feab4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23feab6:	2300      	movs	r3, #0
 23feab8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23feaba:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23feabc:	4604      	mov	r4, r0
 23feabe:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23feac0:	b12b      	cbz	r3, 23feace <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23feac2:	2202      	movs	r2, #2
 23feac4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23feac6:	68eb      	ldr	r3, [r5, #12]
 23feac8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23feaca:	68ab      	ldr	r3, [r5, #8]
 23feacc:	60a3      	str	r3, [r4, #8]
    }
 23feace:	4620      	mov	r0, r4
 23fead0:	bd38      	pop	{r3, r4, r5, pc}
	...

023fead4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 23fead4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fead6:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23fead8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 23feada:	4668      	mov	r0, sp
 23feadc:	f7ff ff30 	bl	23fe940 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23feae0:	f04f 0302 	mov.w	r3, #2
 23feae4:	e8d4 2f4f 	ldrexb	r2, [r4]
 23feae8:	2a00      	cmp	r2, #0
 23feaea:	d103      	bne.n	23feaf4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 23feaec:	e8c4 3f41 	strexb	r1, r3, [r4]
 23feaf0:	2900      	cmp	r1, #0
 23feaf2:	d1f7      	bne.n	23feae4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 23feaf4:	d121      	bne.n	23feb3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
            new(&error_) Error(std::move(error));
 23feaf6:	f104 050c 	add.w	r5, r4, #12
 23feafa:	4669      	mov	r1, sp
 23feafc:	4628      	mov	r0, r5
 23feafe:	f7ff ff1f 	bl	23fe940 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 23feb02:	2201      	movs	r2, #1
 23feb04:	1c63      	adds	r3, r4, #1
 23feb06:	e8c3 2f8f 	stlb	r2, [r3]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23feb0a:	2000      	movs	r0, #0
 23feb0c:	f104 0308 	add.w	r3, r4, #8
 23feb10:	e8d3 6fef 	ldaex	r6, [r3]
 23feb14:	e8c3 0fe2 	stlex	r2, r0, [r3]
 23feb18:	2a00      	cmp	r2, #0
 23feb1a:	d1f9      	bne.n	23feb10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
        if (callbackPtr) {
 23feb1c:	b16e      	cbz	r6, 23feb3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
        return (application_thread_current(nullptr) != 0);
 23feb1e:	f7ff fd1d 	bl	23fe55c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23feb22:	b178      	cbz	r0, 23feb44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x70>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23feb24:	4629      	mov	r1, r5
 23feb26:	4630      	mov	r0, r6
 23feb28:	f7ff ff90 	bl	23fea4c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 23feb2c:	4630      	mov	r0, r6
 23feb2e:	f7ff fed6 	bl	23fe8de <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23feb32:	2110      	movs	r1, #16
 23feb34:	4630      	mov	r0, r6
 23feb36:	f7fe ffee 	bl	23fdb16 <_ZdlPvj>
        p_->setError(std::move(error));
 23feb3a:	4668      	mov	r0, sp
 23feb3c:	f7ff ff0d 	bl	23fe95a <_ZN8particle5ErrorD1Ev>
    }
 23feb40:	b009      	add	sp, #36	; 0x24
 23feb42:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23feb44:	4631      	mov	r1, r6
 23feb46:	a802      	add	r0, sp, #8
 23feb48:	f7ff ffb4 	bl	23feab4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23feb4c:	68e0      	ldr	r0, [r4, #12]
 23feb4e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23feb52:	b108      	cbz	r0, 23feb58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x84>
 23feb54:	f001 f82e 	bl	23ffbb4 <strdup>
        type_(type) {
 23feb58:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23feb5a:	2010      	movs	r0, #16
 23feb5c:	f8ad 501c 	strh.w	r5, [sp, #28]
 23feb60:	f7fe ffd5 	bl	23fdb0e <_Znwj>
 23feb64:	4605      	mov	r5, r0
 23feb66:	b1e8      	cbz	r0, 23feba4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd0>
    _Function_base() : _M_manager(nullptr) { }
 23feb68:	2700      	movs	r7, #0
 23feb6a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23feb6c:	2018      	movs	r0, #24
 23feb6e:	f7fe ffce 	bl	23fdb0e <_Znwj>
 23feb72:	4604      	mov	r4, r0
 23feb74:	b188      	cbz	r0, 23feb9a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc6>
	std::swap(_M_functor, __x._M_functor);
 23feb76:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23feb78:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23feb7a:	a802      	add	r0, sp, #8
 23feb7c:	f7ff feb8 	bl	23fe8f0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23feb80:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 23feb82:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23feb84:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23feb86:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23feb88:	9204      	str	r2, [sp, #16]
 23feb8a:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23feb8c:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 23feb8e:	60e3      	str	r3, [r4, #12]
 23feb90:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 23feb94:	9205      	str	r2, [sp, #20]
 23feb96:	f7ff fed3 	bl	23fe940 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 23feb9a:	4b08      	ldr	r3, [pc, #32]	; (23febbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23feb9c:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23feb9e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23feba0:	4b07      	ldr	r3, [pc, #28]	; (23febc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>)
 23feba2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 23feba4:	a806      	add	r0, sp, #24
 23feba6:	f7ff fed8 	bl	23fe95a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23febaa:	a802      	add	r0, sp, #8
 23febac:	f7ff fe97 	bl	23fe8de <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23febb0:	2200      	movs	r2, #0
 23febb2:	4629      	mov	r1, r5
 23febb4:	4803      	ldr	r0, [pc, #12]	; (23febc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
 23febb6:	f7ff fcdf 	bl	23fe578 <application_thread_invoke>
 23febba:	e7b7      	b.n	23feb2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 23febbc:	023fea5f 	.word	0x023fea5f
 23febc0:	023fecd9 	.word	0x023fecd9
 23febc4:	023fe8b7 	.word	0x023fe8b7

023febc8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 23febc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23febcc:	b08b      	sub	sp, #44	; 0x2c
 23febce:	4605      	mov	r5, r0
 23febd0:	460f      	mov	r7, r1
 23febd2:	4690      	mov	r8, r2
 23febd4:	4699      	mov	r9, r3
 23febd6:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23febda:	f7ff fd05 	bl	23fe5e8 <spark_cloud_flag_connected>
 23febde:	ae07      	add	r6, sp, #28
    if (!connected()) {
 23febe0:	4683      	mov	fp, r0
 23febe2:	bb38      	cbnz	r0, 23fec34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 23febe4:	f64f 732e 	movw	r3, #65326	; 0xff2e
 23febe8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23febea:	a905      	add	r1, sp, #20
 23febec:	4630      	mov	r0, r6
 23febee:	f8ad 3018 	strh.w	r3, [sp, #24]
 23febf2:	f7ff fea5 	bl	23fe940 <_ZN8particle5ErrorC1EOS0_>
 23febf6:	2014      	movs	r0, #20
 23febf8:	f7fe ff89 	bl	23fdb0e <_Znwj>
 23febfc:	4604      	mov	r4, r0
 23febfe:	b148      	cbz	r0, 23fec14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 23fec00:	2302      	movs	r3, #2
 23fec02:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fec04:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fec06:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fec0a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 23fec0c:	4631      	mov	r1, r6
 23fec0e:	300c      	adds	r0, #12
 23fec10:	f7ff fe96 	bl	23fe940 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fec14:	4628      	mov	r0, r5
	: __shared_count(__p)
 23fec16:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fec18:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 23fec1c:	f7ff ff36 	bl	23fea8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fec20:	4630      	mov	r0, r6
 23fec22:	f7ff fe9a 	bl	23fe95a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 23fec26:	a805      	add	r0, sp, #20
 23fec28:	f7ff fe97 	bl	23fe95a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 23fec2c:	4628      	mov	r0, r5
 23fec2e:	b00b      	add	sp, #44	; 0x2c
 23fec30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
 23fec34:	230c      	movs	r3, #12
    spark_send_event_data d = {};
 23fec36:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 23fec38:	2014      	movs	r0, #20
 23fec3a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 23fec3e:	9307      	str	r3, [sp, #28]
 23fec40:	f7fe ff65 	bl	23fdb0e <_Znwj>
 23fec44:	4601      	mov	r1, r0
 23fec46:	b118      	cbz	r0, 23fec50 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fec48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 23fec4c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fec4e:	7044      	strb	r4, [r0, #1]
 23fec50:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fec52:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 23fec54:	f7ff ff1a 	bl	23fea8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 23fec58:	4b1e      	ldr	r3, [pc, #120]	; (23fecd4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 23fec5a:	2008      	movs	r0, #8
 23fec5c:	9308      	str	r3, [sp, #32]
 23fec5e:	f7fe ff56 	bl	23fdb0e <_Znwj>
 23fec62:	4604      	mov	r4, r0
 23fec64:	b110      	cbz	r0, 23fec6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
 23fec66:	a903      	add	r1, sp, #12
 23fec68:	f7ff fecc 	bl	23fea04 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fec6c:	464a      	mov	r2, r9
 23fec6e:	4641      	mov	r1, r8
 23fec70:	4638      	mov	r0, r7
 23fec72:	9600      	str	r6, [sp, #0]
 23fec74:	fa5f f38a 	uxtb.w	r3, sl
    d.handler_data = p.dataPtr();
 23fec78:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fec7a:	f7ff fcc3 	bl	23fe604 <spark_send_event>
 23fec7e:	b9b8      	cbnz	r0, 23fecb0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
 23fec80:	9b03      	ldr	r3, [sp, #12]
 23fec82:	3301      	adds	r3, #1
 23fec84:	781b      	ldrb	r3, [r3, #0]
 23fec86:	b2db      	uxtb	r3, r3
 23fec88:	b993      	cbnz	r3, 23fecb0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 23fec8a:	9305      	str	r3, [sp, #20]
 23fec8c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 23fec90:	a905      	add	r1, sp, #20
 23fec92:	a803      	add	r0, sp, #12
 23fec94:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fec98:	f7ff ff1c 	bl	23fead4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fec9c:	a805      	add	r0, sp, #20
 23fec9e:	f7ff fe5c 	bl	23fe95a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 23feca2:	a805      	add	r0, sp, #20
 23feca4:	9909      	ldr	r1, [sp, #36]	; 0x24
 23feca6:	f7ff feb6 	bl	23fea16 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 23fecaa:	a806      	add	r0, sp, #24
 23fecac:	f7ff fded 	bl	23fe88a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fecb0:	a903      	add	r1, sp, #12
 23fecb2:	a805      	add	r0, sp, #20
 23fecb4:	f7ff fea6 	bl	23fea04 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fecb8:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fecba:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fecbc:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 23fecbe:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fecc0:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 23fecc2:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 23fecc4:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 23fecc6:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 23fecc8:	f7ff fddf 	bl	23fe88a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23feccc:	a804      	add	r0, sp, #16
 23fecce:	f7ff fddc 	bl	23fe88a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 23fecd2:	e7ab      	b.n	23fec2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 23fecd4:	023fed55 	.word	0x023fed55

023fecd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 23fecd8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fecda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fecdc:	4605      	mov	r5, r0
	switch (__op)
 23fecde:	d103      	bne.n	23fece8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23fece0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fece2:	6003      	str	r3, [r0, #0]
      }
 23fece4:	2000      	movs	r0, #0
 23fece6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 23fece8:	2a02      	cmp	r2, #2
 23fecea:	d010      	beq.n	23fed0e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 23fecec:	2a03      	cmp	r2, #3
 23fecee:	d1f9      	bne.n	23fece4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fecf0:	6804      	ldr	r4, [r0, #0]
 23fecf2:	2c00      	cmp	r4, #0
 23fecf4:	d0f6      	beq.n	23fece4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 23fecf6:	f104 0010 	add.w	r0, r4, #16
 23fecfa:	f7ff fe2e 	bl	23fe95a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fecfe:	4620      	mov	r0, r4
 23fed00:	f7ff fded 	bl	23fe8de <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fed04:	2118      	movs	r1, #24
 23fed06:	4620      	mov	r0, r4
 23fed08:	f7fe ff05 	bl	23fdb16 <_ZdlPvj>
 23fed0c:	e7ea      	b.n	23fece4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23fed0e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 23fed10:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fed12:	f7fe fefc 	bl	23fdb0e <_Znwj>
 23fed16:	4604      	mov	r4, r0
 23fed18:	b150      	cbz	r0, 23fed30 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 23fed1a:	4631      	mov	r1, r6
 23fed1c:	f7ff feca 	bl	23feab4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23fed20:	6930      	ldr	r0, [r6, #16]
 23fed22:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fed26:	b108      	cbz	r0, 23fed2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 23fed28:	f000 ff44 	bl	23ffbb4 <strdup>
        type_(type) {
 23fed2c:	6120      	str	r0, [r4, #16]
 23fed2e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 23fed30:	602c      	str	r4, [r5, #0]
	}
 23fed32:	e7d7      	b.n	23fece4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

023fed34 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 23fed34:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fed36:	2300      	movs	r3, #0
 23fed38:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fed3a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23fed3c:	4604      	mov	r4, r0
 23fed3e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23fed40:	b12b      	cbz	r3, 23fed4e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fed42:	2202      	movs	r2, #2
 23fed44:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fed46:	68eb      	ldr	r3, [r5, #12]
 23fed48:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fed4a:	68ab      	ldr	r3, [r5, #8]
 23fed4c:	60a3      	str	r3, [r4, #8]
    }
 23fed4e:	4620      	mov	r0, r4
 23fed50:	bd38      	pop	{r3, r4, r5, pc}
	...

023fed54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 23fed54:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fed56:	4604      	mov	r4, r0
 23fed58:	b089      	sub	sp, #36	; 0x24
 23fed5a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 23fed5c:	a801      	add	r0, sp, #4
 23fed5e:	4611      	mov	r1, r2
 23fed60:	f7ff fe59 	bl	23fea16 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 23fed64:	b1a4      	cbz	r4, 23fed90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 23fed66:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fed68:	b11d      	cbz	r5, 23fed72 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 23fed6a:	4628      	mov	r0, r5
 23fed6c:	f000 ff22 	bl	23ffbb4 <strdup>
 23fed70:	4605      	mov	r5, r0
 23fed72:	a801      	add	r0, sp, #4
 23fed74:	a903      	add	r1, sp, #12
        type_(type) {
 23fed76:	9503      	str	r5, [sp, #12]
 23fed78:	f8ad 4010 	strh.w	r4, [sp, #16]
 23fed7c:	f7ff feaa 	bl	23fead4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fed80:	a803      	add	r0, sp, #12
 23fed82:	f7ff fdea 	bl	23fe95a <_ZN8particle5ErrorD1Ev>
 23fed86:	a802      	add	r0, sp, #8
 23fed88:	f7ff fd7f 	bl	23fe88a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fed8c:	b009      	add	sp, #36	; 0x24
 23fed8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23fed90:	2301      	movs	r3, #1
      { return _M_ptr; }
 23fed92:	9d01      	ldr	r5, [sp, #4]
 23fed94:	e8d5 2f4f 	ldrexb	r2, [r5]
 23fed98:	2a00      	cmp	r2, #0
 23fed9a:	d103      	bne.n	23feda4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 23fed9c:	e8c5 3f41 	strexb	r1, r3, [r5]
 23feda0:	2900      	cmp	r1, #0
 23feda2:	d1f7      	bne.n	23fed94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 23feda4:	d1ef      	bne.n	23fed86 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 23feda6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 23feda8:	2201      	movs	r2, #1
 23fedaa:	18eb      	adds	r3, r5, r3
 23fedac:	e8c3 2f8f 	stlb	r2, [r3]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23fedb0:	1d2b      	adds	r3, r5, #4
 23fedb2:	e8d3 6fef 	ldaex	r6, [r3]
 23fedb6:	e8c3 4fe2 	stlex	r2, r4, [r3]
 23fedba:	2a00      	cmp	r2, #0
 23fedbc:	d1f9      	bne.n	23fedb2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x5e>
        if (callbackPtr) {
 23fedbe:	2e00      	cmp	r6, #0
 23fedc0:	d0e1      	beq.n	23fed86 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 23fedc2:	4620      	mov	r0, r4
 23fedc4:	f7ff fbca 	bl	23fe55c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23fedc8:	4607      	mov	r7, r0
 23fedca:	b160      	cbz	r0, 23fede6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x92>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23fedcc:	4630      	mov	r0, r6
 23fedce:	f105 010c 	add.w	r1, r5, #12
 23fedd2:	f7ff fe4b 	bl	23fea6c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 23fedd6:	4630      	mov	r0, r6
 23fedd8:	f7ff fd81 	bl	23fe8de <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23feddc:	2110      	movs	r1, #16
 23fedde:	4630      	mov	r0, r6
 23fede0:	f7fe fe99 	bl	23fdb16 <_ZdlPvj>
 23fede4:	e7cf      	b.n	23fed86 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fede6:	4631      	mov	r1, r6
 23fede8:	a803      	add	r0, sp, #12
 23fedea:	f7ff ffa3 	bl	23fed34 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fedee:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23fedf0:	2010      	movs	r0, #16
 23fedf2:	f88d 301c 	strb.w	r3, [sp, #28]
 23fedf6:	f7fe fe8a 	bl	23fdb0e <_Znwj>
 23fedfa:	4605      	mov	r5, r0
 23fedfc:	b1d0      	cbz	r0, 23fee34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe0>
    _Function_base() : _M_manager(nullptr) { }
 23fedfe:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fee00:	2014      	movs	r0, #20
 23fee02:	f7fe fe84 	bl	23fdb0e <_Znwj>
 23fee06:	4604      	mov	r4, r0
 23fee08:	b178      	cbz	r0, 23fee2a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xd6>
	std::swap(_M_functor, __x._M_functor);
 23fee0a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23fee0c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23fee0e:	a803      	add	r0, sp, #12
 23fee10:	f7ff fd6e 	bl	23fe8f0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fee14:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fee16:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fee18:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fee1a:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 23fee1c:	9205      	str	r2, [sp, #20]
 23fee1e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fee20:	60e3      	str	r3, [r4, #12]
 23fee22:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 23fee26:	9206      	str	r2, [sp, #24]
 23fee28:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 23fee2a:	4b07      	ldr	r3, [pc, #28]	; (23fee48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fee2c:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fee2e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fee30:	4b06      	ldr	r3, [pc, #24]	; (23fee4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
 23fee32:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 23fee34:	a803      	add	r0, sp, #12
 23fee36:	f7ff fd52 	bl	23fe8de <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23fee3a:	2200      	movs	r2, #0
 23fee3c:	4629      	mov	r1, r5
 23fee3e:	4804      	ldr	r0, [pc, #16]	; (23fee50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 23fee40:	f7ff fb9a 	bl	23fe578 <application_thread_invoke>
 23fee44:	e7c7      	b.n	23fedd6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x82>
 23fee46:	bf00      	nop
 23fee48:	023fea7f 	.word	0x023fea7f
 23fee4c:	023fee55 	.word	0x023fee55
 23fee50:	023fe8b7 	.word	0x023fe8b7

023fee54 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 23fee54:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fee56:	b570      	push	{r4, r5, r6, lr}
 23fee58:	4604      	mov	r4, r0
	switch (__op)
 23fee5a:	d103      	bne.n	23fee64 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23fee5c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fee5e:	6003      	str	r3, [r0, #0]
      }
 23fee60:	2000      	movs	r0, #0
 23fee62:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 23fee64:	2a02      	cmp	r2, #2
 23fee66:	d00c      	beq.n	23fee82 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 23fee68:	2a03      	cmp	r2, #3
 23fee6a:	d1f9      	bne.n	23fee60 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fee6c:	6804      	ldr	r4, [r0, #0]
 23fee6e:	2c00      	cmp	r4, #0
 23fee70:	d0f6      	beq.n	23fee60 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23fee72:	4620      	mov	r0, r4
 23fee74:	f7ff fd33 	bl	23fe8de <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fee78:	2114      	movs	r1, #20
 23fee7a:	4620      	mov	r0, r4
 23fee7c:	f7fe fe4b 	bl	23fdb16 <_ZdlPvj>
 23fee80:	e7ee      	b.n	23fee60 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23fee82:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 23fee84:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fee86:	f7fe fe42 	bl	23fdb0e <_Znwj>
 23fee8a:	4605      	mov	r5, r0
 23fee8c:	b120      	cbz	r0, 23fee98 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 23fee8e:	4631      	mov	r1, r6
 23fee90:	f7ff ff50 	bl	23fed34 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 23fee94:	7c33      	ldrb	r3, [r6, #16]
 23fee96:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 23fee98:	6025      	str	r5, [r4, #0]
	}
 23fee9a:	e7e1      	b.n	23fee60 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

023fee9c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fee9c:	2200      	movs	r2, #0
 23fee9e:	6840      	ldr	r0, [r0, #4]
 23feea0:	4611      	mov	r1, r2
 23feea2:	f7ff bc2d 	b.w	23fe700 <network_listening>

023feea6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23feea6:	2200      	movs	r2, #0
 23feea8:	6840      	ldr	r0, [r0, #4]
 23feeaa:	4611      	mov	r1, r2
 23feeac:	f7ff bc44 	b.w	23fe738 <network_get_listen_timeout>

023feeb0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23feeb0:	2200      	movs	r2, #0
 23feeb2:	6840      	ldr	r0, [r0, #4]
 23feeb4:	f7ff bc32 	b.w	23fe71c <network_set_listen_timeout>

023feeb8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23feeb8:	2200      	movs	r2, #0
 23feeba:	6840      	ldr	r0, [r0, #4]
 23feebc:	f081 0101 	eor.w	r1, r1, #1
 23feec0:	f7ff bc10 	b.w	23fe6e4 <network_listen>

023feec4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23feec4:	2300      	movs	r3, #0
 23feec6:	6840      	ldr	r0, [r0, #4]
 23feec8:	461a      	mov	r2, r3
 23feeca:	4619      	mov	r1, r3
 23feecc:	f7ff bbfc 	b.w	23fe6c8 <network_off>

023feed0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23feed0:	2300      	movs	r3, #0
 23feed2:	6840      	ldr	r0, [r0, #4]
 23feed4:	461a      	mov	r2, r3
 23feed6:	4619      	mov	r1, r3
 23feed8:	f7ff bbe8 	b.w	23fe6ac <network_on>

023feedc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23feedc:	2200      	movs	r2, #0
 23feede:	6840      	ldr	r0, [r0, #4]
 23feee0:	4611      	mov	r1, r2
 23feee2:	f7ff bbd5 	b.w	23fe690 <network_ready>

023feee6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23feee6:	2200      	movs	r2, #0
 23feee8:	6840      	ldr	r0, [r0, #4]
 23feeea:	4611      	mov	r1, r2
 23feeec:	f7ff bbb4 	b.w	23fe658 <network_connecting>

023feef0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23feef0:	2200      	movs	r2, #0
 23feef2:	2102      	movs	r1, #2
 23feef4:	6840      	ldr	r0, [r0, #4]
 23feef6:	f7ff bbbd 	b.w	23fe674 <network_disconnect>

023feefa <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23feefa:	2300      	movs	r3, #0
 23feefc:	6840      	ldr	r0, [r0, #4]
 23feefe:	461a      	mov	r2, r3
 23fef00:	f7ff bb9c 	b.w	23fe63c <network_connect>

023fef04 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fef04:	2203      	movs	r2, #3
 23fef06:	4b02      	ldr	r3, [pc, #8]	; (23fef10 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fef08:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fef0a:	4a02      	ldr	r2, [pc, #8]	; (23fef14 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fef0c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fef0e:	4770      	bx	lr
 23fef10:	1007ae84 	.word	0x1007ae84
 23fef14:	023ffdf0 	.word	0x023ffdf0

023fef18 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fef18:	4770      	bx	lr

023fef1a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fef1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fef1c:	4606      	mov	r6, r0
 23fef1e:	4615      	mov	r5, r2
 23fef20:	460c      	mov	r4, r1
 23fef22:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fef24:	42bc      	cmp	r4, r7
 23fef26:	d006      	beq.n	23fef36 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fef28:	6833      	ldr	r3, [r6, #0]
 23fef2a:	4630      	mov	r0, r6
 23fef2c:	689b      	ldr	r3, [r3, #8]
 23fef2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fef32:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fef34:	e7f6      	b.n	23fef24 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fef36:	4628      	mov	r0, r5
 23fef38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fef3a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fef3a:	2200      	movs	r2, #0
 23fef3c:	7c00      	ldrb	r0, [r0, #16]
 23fef3e:	f7ff b977 	b.w	23fe230 <hal_i2c_write>

023fef42 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fef42:	2100      	movs	r1, #0
 23fef44:	7c00      	ldrb	r0, [r0, #16]
 23fef46:	f7ff b981 	b.w	23fe24c <hal_i2c_available>

023fef4a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fef4a:	2100      	movs	r1, #0
 23fef4c:	7c00      	ldrb	r0, [r0, #16]
 23fef4e:	f7ff b98b 	b.w	23fe268 <hal_i2c_read>

023fef52 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fef52:	2100      	movs	r1, #0
 23fef54:	7c00      	ldrb	r0, [r0, #16]
 23fef56:	f7ff b995 	b.w	23fe284 <hal_i2c_peek>

023fef5a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fef5a:	2100      	movs	r1, #0
 23fef5c:	7c00      	ldrb	r0, [r0, #16]
 23fef5e:	f7ff b99f 	b.w	23fe2a0 <hal_i2c_flush>

023fef62 <_ZN7TwoWireD0Ev>:
 23fef62:	b510      	push	{r4, lr}
 23fef64:	4604      	mov	r4, r0
 23fef66:	2114      	movs	r1, #20
 23fef68:	f7fe fdd5 	bl	23fdb16 <_ZdlPvj>
 23fef6c:	4620      	mov	r0, r4
 23fef6e:	bd10      	pop	{r4, pc}

023fef70 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fef70:	b538      	push	{r3, r4, r5, lr}
 23fef72:	4604      	mov	r4, r0
 23fef74:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fef76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fef7a:	2200      	movs	r2, #0
 23fef7c:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fef80:	4b09      	ldr	r3, [pc, #36]	; (23fefa8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fef82:	4608      	mov	r0, r1
  _i2c = i2c;
 23fef84:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fef86:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fef88:	4629      	mov	r1, r5
 23fef8a:	f7ff f9a5 	bl	23fe2d8 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fef8e:	30bf      	adds	r0, #191	; 0xbf
 23fef90:	d108      	bne.n	23fefa4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fef92:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fef94:	07db      	lsls	r3, r3, #31
 23fef96:	d505      	bpl.n	23fefa4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fef98:	6868      	ldr	r0, [r5, #4]
 23fef9a:	f7ff fc05 	bl	23fe7a8 <free>
    free(conf.tx_buffer);
 23fef9e:	68e8      	ldr	r0, [r5, #12]
 23fefa0:	f7ff fc02 	bl	23fe7a8 <free>
}
 23fefa4:	4620      	mov	r0, r4
 23fefa6:	bd38      	pop	{r3, r4, r5, pc}
 23fefa8:	023ffe2c 	.word	0x023ffe2c

023fefac <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 23fefac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 23fefae:	2200      	movs	r2, #0
 23fefb0:	2314      	movs	r3, #20
 23fefb2:	e9cd 2201 	strd	r2, r2, [sp, #4]
 23fefb6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 23fefba:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 23fefbc:	7c00      	ldrb	r0, [r0, #16]
 23fefbe:	f88d 3008 	strb.w	r3, [sp, #8]
 23fefc2:	684b      	ldr	r3, [r1, #4]
 23fefc4:	9303      	str	r3, [sp, #12]
 23fefc6:	68cb      	ldr	r3, [r1, #12]
 23fefc8:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 23fefca:	7a0b      	ldrb	r3, [r1, #8]
 23fefcc:	a901      	add	r1, sp, #4
 23fefce:	9305      	str	r3, [sp, #20]
 23fefd0:	f7ff f990 	bl	23fe2f4 <hal_i2c_request_ex>
}
 23fefd4:	b007      	add	sp, #28
 23fefd6:	f85d fb04 	ldr.w	pc, [sp], #4

023fefda <_ZN7TwoWire11requestFromEhjh>:
{
 23fefda:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 23fefdc:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 23fefde:	f88d 1000 	strb.w	r1, [sp]
 23fefe2:	f04f 0164 	mov.w	r1, #100	; 0x64
 23fefe6:	bf18      	it	ne
 23fefe8:	2301      	movne	r3, #1
 23fefea:	9103      	str	r1, [sp, #12]
 23fefec:	4669      	mov	r1, sp
    size_ = size;
 23fefee:	9201      	str	r2, [sp, #4]
 23feff0:	f88d 3008 	strb.w	r3, [sp, #8]
 23feff4:	f7ff ffda 	bl	23fefac <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 23feff8:	b005      	add	sp, #20
 23feffa:	f85d fb04 	ldr.w	pc, [sp], #4

023feffe <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23feffe:	2200      	movs	r2, #0
 23ff000:	7c00      	ldrb	r0, [r0, #16]
 23ff002:	f7ff b8f9 	b.w	23fe1f8 <hal_i2c_begin_transmission>

023ff006 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23ff006:	2200      	movs	r2, #0
 23ff008:	7c00      	ldrb	r0, [r0, #16]
 23ff00a:	f7ff b903 	b.w	23fe214 <hal_i2c_end_transmission>

023ff00e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 23ff00e:	2101      	movs	r1, #1
 23ff010:	f7ff bff9 	b.w	23ff006 <_ZN7TwoWire15endTransmissionEh>

023ff014 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23ff014:	4770      	bx	lr

023ff016 <_ZN9IPAddressD0Ev>:
 23ff016:	b510      	push	{r4, lr}
 23ff018:	4604      	mov	r4, r0
 23ff01a:	2118      	movs	r1, #24
 23ff01c:	f7fe fd7b 	bl	23fdb16 <_ZdlPvj>
 23ff020:	4620      	mov	r0, r4
 23ff022:	bd10      	pop	{r4, pc}

023ff024 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23ff024:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23ff026:	7d03      	ldrb	r3, [r0, #20]
{
 23ff028:	460e      	mov	r6, r1
	if (address.v==6) {
 23ff02a:	2b06      	cmp	r3, #6
 23ff02c:	f04f 0400 	mov.w	r4, #0
{
 23ff030:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23ff032:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23ff036:	d012      	beq.n	23ff05e <_ZNK9IPAddress7printToER5Print+0x3a>
 23ff038:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23ff03c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23ff040:	220a      	movs	r2, #10
 23ff042:	4630      	mov	r0, r6
 23ff044:	f000 f95d 	bl	23ff302 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23ff048:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23ff04a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23ff04c:	d019      	beq.n	23ff082 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23ff04e:	2c00      	cmp	r4, #0
 23ff050:	d0f4      	beq.n	23ff03c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23ff052:	212e      	movs	r1, #46	; 0x2e
 23ff054:	4630      	mov	r0, r6
 23ff056:	f000 f93b 	bl	23ff2d0 <_ZN5Print5printEc>
 23ff05a:	4404      	add	r4, r0
 23ff05c:	e7ee      	b.n	23ff03c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23ff05e:	232f      	movs	r3, #47	; 0x2f
 23ff060:	466a      	mov	r2, sp
 23ff062:	4639      	mov	r1, r7
 23ff064:	200a      	movs	r0, #10
		buf[0] = 0;
 23ff066:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23ff06a:	f7ff f951 	bl	23fe310 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23ff06e:	4668      	mov	r0, sp
 23ff070:	f7fe fd28 	bl	23fdac4 <strlen>
 23ff074:	6833      	ldr	r3, [r6, #0]
 23ff076:	4602      	mov	r2, r0
 23ff078:	4669      	mov	r1, sp
 23ff07a:	4630      	mov	r0, r6
 23ff07c:	68db      	ldr	r3, [r3, #12]
 23ff07e:	4798      	blx	r3
 23ff080:	4604      	mov	r4, r0
    }
    return n;
}
 23ff082:	4620      	mov	r0, r4
 23ff084:	b00d      	add	sp, #52	; 0x34
 23ff086:	bdf0      	pop	{r4, r5, r6, r7, pc}

023ff088 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23ff088:	b510      	push	{r4, lr}
 23ff08a:	4604      	mov	r4, r0
 23ff08c:	4b04      	ldr	r3, [pc, #16]	; (23ff0a0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23ff08e:	2211      	movs	r2, #17
 23ff090:	2100      	movs	r1, #0
 23ff092:	f840 3b04 	str.w	r3, [r0], #4
 23ff096:	f000 fd57 	bl	23ffb48 <memset>
}
 23ff09a:	4620      	mov	r0, r4
 23ff09c:	bd10      	pop	{r4, pc}
 23ff09e:	bf00      	nop
 23ff0a0:	023ffe54 	.word	0x023ffe54

023ff0a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23ff0a4:	4603      	mov	r3, r0
 23ff0a6:	4a07      	ldr	r2, [pc, #28]	; (23ff0c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23ff0a8:	b510      	push	{r4, lr}
 23ff0aa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23ff0ae:	f101 0210 	add.w	r2, r1, #16
 23ff0b2:	f851 4b04 	ldr.w	r4, [r1], #4
 23ff0b6:	4291      	cmp	r1, r2
 23ff0b8:	f843 4b04 	str.w	r4, [r3], #4
 23ff0bc:	d1f9      	bne.n	23ff0b2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23ff0be:	780a      	ldrb	r2, [r1, #0]
 23ff0c0:	701a      	strb	r2, [r3, #0]
}
 23ff0c2:	bd10      	pop	{r4, pc}
 23ff0c4:	023ffe54 	.word	0x023ffe54

023ff0c8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23ff0c8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23ff0ca:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23ff0ce:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23ff0d2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23ff0d6:	2304      	movs	r3, #4
 23ff0d8:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23ff0dc:	6041      	str	r1, [r0, #4]
 23ff0de:	7503      	strb	r3, [r0, #20]
}
 23ff0e0:	bd10      	pop	{r4, pc}
	...

023ff0e4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23ff0e4:	b507      	push	{r0, r1, r2, lr}
 23ff0e6:	4b06      	ldr	r3, [pc, #24]	; (23ff100 <_ZN9IPAddressC1EPKh+0x1c>)
 23ff0e8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23ff0ea:	78cb      	ldrb	r3, [r1, #3]
 23ff0ec:	9300      	str	r3, [sp, #0]
 23ff0ee:	788b      	ldrb	r3, [r1, #2]
 23ff0f0:	784a      	ldrb	r2, [r1, #1]
 23ff0f2:	7809      	ldrb	r1, [r1, #0]
 23ff0f4:	f7ff ffe8 	bl	23ff0c8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23ff0f8:	b003      	add	sp, #12
 23ff0fa:	f85d fb04 	ldr.w	pc, [sp], #4
 23ff0fe:	bf00      	nop
 23ff100:	023ffe54 	.word	0x023ffe54

023ff104 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23ff104:	4b01      	ldr	r3, [pc, #4]	; (23ff10c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23ff106:	4a02      	ldr	r2, [pc, #8]	; (23ff110 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23ff108:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23ff10a:	4770      	bx	lr
 23ff10c:	1007ae8c 	.word	0x1007ae8c
 23ff110:	023ffe60 	.word	0x023ffe60

023ff114 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23ff114:	2300      	movs	r3, #0
 23ff116:	6840      	ldr	r0, [r0, #4]
 23ff118:	461a      	mov	r2, r3
 23ff11a:	f7ff ba8f 	b.w	23fe63c <network_connect>

023ff11e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23ff11e:	2200      	movs	r2, #0
 23ff120:	2102      	movs	r1, #2
 23ff122:	6840      	ldr	r0, [r0, #4]
 23ff124:	f7ff baa6 	b.w	23fe674 <network_disconnect>

023ff128 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23ff128:	2200      	movs	r2, #0
 23ff12a:	6840      	ldr	r0, [r0, #4]
 23ff12c:	4611      	mov	r1, r2
 23ff12e:	f7ff ba93 	b.w	23fe658 <network_connecting>

023ff132 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23ff132:	2200      	movs	r2, #0
 23ff134:	6840      	ldr	r0, [r0, #4]
 23ff136:	4611      	mov	r1, r2
 23ff138:	f7ff baaa 	b.w	23fe690 <network_ready>

023ff13c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23ff13c:	2300      	movs	r3, #0
 23ff13e:	6840      	ldr	r0, [r0, #4]
 23ff140:	461a      	mov	r2, r3
 23ff142:	4619      	mov	r1, r3
 23ff144:	f7ff bab2 	b.w	23fe6ac <network_on>

023ff148 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23ff148:	2300      	movs	r3, #0
 23ff14a:	6840      	ldr	r0, [r0, #4]
 23ff14c:	461a      	mov	r2, r3
 23ff14e:	4619      	mov	r1, r3
 23ff150:	f7ff baba 	b.w	23fe6c8 <network_off>

023ff154 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23ff154:	2100      	movs	r1, #0
 23ff156:	6840      	ldr	r0, [r0, #4]
 23ff158:	f7ff bafc 	b.w	23fe754 <network_is_on>

023ff15c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23ff15c:	2100      	movs	r1, #0
 23ff15e:	6840      	ldr	r0, [r0, #4]
 23ff160:	f7ff bb06 	b.w	23fe770 <network_is_off>

023ff164 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23ff164:	2200      	movs	r2, #0
 23ff166:	6840      	ldr	r0, [r0, #4]
 23ff168:	f081 0101 	eor.w	r1, r1, #1
 23ff16c:	f7ff baba 	b.w	23fe6e4 <network_listen>

023ff170 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23ff170:	2200      	movs	r2, #0
 23ff172:	6840      	ldr	r0, [r0, #4]
 23ff174:	f7ff bad2 	b.w	23fe71c <network_set_listen_timeout>

023ff178 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23ff178:	2200      	movs	r2, #0
 23ff17a:	6840      	ldr	r0, [r0, #4]
 23ff17c:	4611      	mov	r1, r2
 23ff17e:	f7ff badb 	b.w	23fe738 <network_get_listen_timeout>

023ff182 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23ff182:	2200      	movs	r2, #0
 23ff184:	6840      	ldr	r0, [r0, #4]
 23ff186:	4611      	mov	r1, r2
 23ff188:	f7ff baba 	b.w	23fe700 <network_listening>

023ff18c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23ff18c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23ff190:	b095      	sub	sp, #84	; 0x54
 23ff192:	4614      	mov	r4, r2
 23ff194:	460d      	mov	r5, r1
 23ff196:	4607      	mov	r7, r0
    IPAddress addr;
 23ff198:	f7ff ff76 	bl	23ff088 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23ff19c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23ff19e:	221c      	movs	r2, #28
 23ff1a0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23ff1a2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23ff1a4:	f000 fcd0 	bl	23ffb48 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23ff1a8:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23ff1aa:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23ff1ac:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23ff1ae:	2100      	movs	r1, #0
 23ff1b0:	466b      	mov	r3, sp
 23ff1b2:	aa0c      	add	r2, sp, #48	; 0x30
 23ff1b4:	f7ff f8c8 	bl	23fe348 <netdb_getaddrinfo>
    if (!r) {
 23ff1b8:	4604      	mov	r4, r0
 23ff1ba:	2800      	cmp	r0, #0
 23ff1bc:	d14b      	bne.n	23ff256 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23ff1be:	4602      	mov	r2, r0
 23ff1c0:	2101      	movs	r1, #1
 23ff1c2:	6868      	ldr	r0, [r5, #4]
 23ff1c4:	f7ff fa64 	bl	23fe690 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff1c8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23ff1ca:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff1cc:	4622      	mov	r2, r4
 23ff1ce:	6868      	ldr	r0, [r5, #4]
 23ff1d0:	f7ff fa5e 	bl	23fe690 <network_ready>
        bool ok = false;
 23ff1d4:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff1d6:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23ff1d8:	9e00      	ldr	r6, [sp, #0]
 23ff1da:	2e00      	cmp	r6, #0
 23ff1dc:	d03b      	beq.n	23ff256 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23ff1de:	2900      	cmp	r1, #0
 23ff1e0:	d139      	bne.n	23ff256 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23ff1e2:	6873      	ldr	r3, [r6, #4]
 23ff1e4:	2b02      	cmp	r3, #2
 23ff1e6:	d003      	beq.n	23ff1f0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23ff1e8:	2b0a      	cmp	r3, #10
 23ff1ea:	d011      	beq.n	23ff210 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23ff1ec:	69f6      	ldr	r6, [r6, #28]
 23ff1ee:	e7f4      	b.n	23ff1da <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23ff1f0:	f1b8 0f00 	cmp.w	r8, #0
 23ff1f4:	d0fa      	beq.n	23ff1ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23ff1f6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23ff1f8:	a806      	add	r0, sp, #24
 23ff1fa:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23ff1fc:	1d3c      	adds	r4, r7, #4
 23ff1fe:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23ff200:	f7ff ff70 	bl	23ff0e4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23ff204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff208:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff20a:	4641      	mov	r1, r8
 23ff20c:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23ff20e:	e7ed      	b.n	23ff1ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23ff210:	f1b9 0f00 	cmp.w	r9, #0
 23ff214:	d0ea      	beq.n	23ff1ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23ff216:	2210      	movs	r2, #16
 23ff218:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23ff21a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23ff21c:	f000 fc94 	bl	23ffb48 <memset>
                    a.v = 6;
 23ff220:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff222:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23ff224:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff228:	f104 0308 	add.w	r3, r4, #8
 23ff22c:	3418      	adds	r4, #24
 23ff22e:	462a      	mov	r2, r5
 23ff230:	6818      	ldr	r0, [r3, #0]
 23ff232:	6859      	ldr	r1, [r3, #4]
 23ff234:	3308      	adds	r3, #8
 23ff236:	c203      	stmia	r2!, {r0, r1}
 23ff238:	42a3      	cmp	r3, r4
 23ff23a:	4615      	mov	r5, r2
 23ff23c:	d1f7      	bne.n	23ff22e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23ff23e:	a901      	add	r1, sp, #4
 23ff240:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23ff242:	1d3c      	adds	r4, r7, #4
 23ff244:	ad07      	add	r5, sp, #28
 23ff246:	f7ff ff2d 	bl	23ff0a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23ff24a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff24c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff24e:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff250:	4649      	mov	r1, r9
 23ff252:	7023      	strb	r3, [r4, #0]
                    break;
 23ff254:	e7ca      	b.n	23ff1ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23ff256:	9800      	ldr	r0, [sp, #0]
 23ff258:	f7ff f868 	bl	23fe32c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23ff25c:	4638      	mov	r0, r7
 23ff25e:	b015      	add	sp, #84	; 0x54
 23ff260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023ff264 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23ff264:	4b02      	ldr	r3, [pc, #8]	; (23ff270 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23ff266:	4a03      	ldr	r2, [pc, #12]	; (23ff274 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23ff268:	601a      	str	r2, [r3, #0]
 23ff26a:	2200      	movs	r2, #0
 23ff26c:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23ff26e:	4770      	bx	lr
 23ff270:	1007ae90 	.word	0x1007ae90
 23ff274:	023ffe6c 	.word	0x023ffe6c

023ff278 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23ff278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23ff27a:	4606      	mov	r6, r0
 23ff27c:	460d      	mov	r5, r1
  size_t n = 0;
 23ff27e:	2400      	movs	r4, #0
 23ff280:	188f      	adds	r7, r1, r2
  while (size--) {
 23ff282:	42bd      	cmp	r5, r7
 23ff284:	d00c      	beq.n	23ff2a0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23ff286:	6833      	ldr	r3, [r6, #0]
 23ff288:	4630      	mov	r0, r6
 23ff28a:	689b      	ldr	r3, [r3, #8]
 23ff28c:	f815 1b01 	ldrb.w	r1, [r5], #1
 23ff290:	4798      	blx	r3
     if (chunk>=0)
 23ff292:	1e03      	subs	r3, r0, #0
 23ff294:	db01      	blt.n	23ff29a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23ff296:	441c      	add	r4, r3
  while (size--) {
 23ff298:	e7f3      	b.n	23ff282 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23ff29a:	2c00      	cmp	r4, #0
 23ff29c:	bf08      	it	eq
 23ff29e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23ff2a0:	4620      	mov	r0, r4
 23ff2a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023ff2a4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23ff2a4:	b513      	push	{r0, r1, r4, lr}
 23ff2a6:	4604      	mov	r4, r0
    }
 23ff2a8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23ff2aa:	b159      	cbz	r1, 23ff2c4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23ff2ac:	9101      	str	r1, [sp, #4]
 23ff2ae:	f7fe fc09 	bl	23fdac4 <strlen>
 23ff2b2:	4602      	mov	r2, r0
 23ff2b4:	4620      	mov	r0, r4
 23ff2b6:	6823      	ldr	r3, [r4, #0]
 23ff2b8:	9901      	ldr	r1, [sp, #4]
 23ff2ba:	68db      	ldr	r3, [r3, #12]
    }
 23ff2bc:	b002      	add	sp, #8
 23ff2be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23ff2c2:	4718      	bx	r3
    }
 23ff2c4:	b002      	add	sp, #8
 23ff2c6:	bd10      	pop	{r4, pc}

023ff2c8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 23ff2c8:	b508      	push	{r3, lr}
  return write(str);
 23ff2ca:	f7ff ffeb 	bl	23ff2a4 <_ZN5Print5writeEPKc>
}
 23ff2ce:	bd08      	pop	{r3, pc}

023ff2d0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 23ff2d0:	6803      	ldr	r3, [r0, #0]
 23ff2d2:	689b      	ldr	r3, [r3, #8]
 23ff2d4:	4718      	bx	r3

023ff2d6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23ff2d6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23ff2d8:	210d      	movs	r1, #13
{
 23ff2da:	4605      	mov	r5, r0
  size_t n = print('\r');
 23ff2dc:	f7ff fff8 	bl	23ff2d0 <_ZN5Print5printEc>
  n += print('\n');
 23ff2e0:	210a      	movs	r1, #10
  size_t n = print('\r');
 23ff2e2:	4604      	mov	r4, r0
  n += print('\n');
 23ff2e4:	4628      	mov	r0, r5
 23ff2e6:	f7ff fff3 	bl	23ff2d0 <_ZN5Print5printEc>
  return n;
}
 23ff2ea:	4420      	add	r0, r4
 23ff2ec:	bd38      	pop	{r3, r4, r5, pc}

023ff2ee <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 23ff2ee:	b538      	push	{r3, r4, r5, lr}
 23ff2f0:	4605      	mov	r5, r0
  return write(str);
 23ff2f2:	f7ff ffd7 	bl	23ff2a4 <_ZN5Print5writeEPKc>
 23ff2f6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 23ff2f8:	4628      	mov	r0, r5
 23ff2fa:	f7ff ffec 	bl	23ff2d6 <_ZN5Print7printlnEv>
  return n;
}
 23ff2fe:	4420      	add	r0, r4
 23ff300:	bd38      	pop	{r3, r4, r5, pc}

023ff302 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23ff302:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23ff304:	2a01      	cmp	r2, #1
 23ff306:	bf98      	it	ls
 23ff308:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23ff30a:	b530      	push	{r4, r5, lr}
 23ff30c:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23ff30e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23ff312:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23ff314:	460d      	mov	r5, r1
 23ff316:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23ff31a:	fb01 5312 	mls	r3, r1, r2, r5
 23ff31e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23ff322:	2b09      	cmp	r3, #9
 23ff324:	bf94      	ite	ls
 23ff326:	3330      	addls	r3, #48	; 0x30
 23ff328:	3337      	addhi	r3, #55	; 0x37
 23ff32a:	b2db      	uxtb	r3, r3
  } while(n);
 23ff32c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23ff32e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23ff332:	d9ef      	bls.n	23ff314 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23ff334:	4621      	mov	r1, r4
 23ff336:	f7ff ffb5 	bl	23ff2a4 <_ZN5Print5writeEPKc>
}
 23ff33a:	b00b      	add	sp, #44	; 0x2c
 23ff33c:	bd30      	pop	{r4, r5, pc}
	...

023ff340 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23ff340:	2200      	movs	r2, #0
 23ff342:	4b01      	ldr	r3, [pc, #4]	; (23ff348 <_GLOBAL__sub_I_RGB+0x8>)
 23ff344:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23ff346:	4770      	bx	lr
 23ff348:	1007ae98 	.word	0x1007ae98

023ff34c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23ff34c:	b510      	push	{r4, lr}
 23ff34e:	4604      	mov	r4, r0
 23ff350:	4608      	mov	r0, r1
{
    _spi = spi;
 23ff352:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23ff354:	f7ff f806 	bl	23fe364 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23ff358:	2300      	movs	r3, #0
}
 23ff35a:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23ff35c:	6063      	str	r3, [r4, #4]
}
 23ff35e:	bd10      	pop	{r4, pc}

023ff360 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23ff360:	b510      	push	{r4, lr}
 23ff362:	4604      	mov	r4, r0
{
	free(buffer);
 23ff364:	6800      	ldr	r0, [r0, #0]
 23ff366:	f7ff fa1f 	bl	23fe7a8 <free>
}
 23ff36a:	4620      	mov	r0, r4
 23ff36c:	bd10      	pop	{r4, pc}

023ff36e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23ff36e:	b510      	push	{r4, lr}
 23ff370:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23ff372:	6800      	ldr	r0, [r0, #0]
 23ff374:	b108      	cbz	r0, 23ff37a <_ZN6String10invalidateEv+0xc>
 23ff376:	f7ff fa17 	bl	23fe7a8 <free>
	buffer = NULL;
 23ff37a:	2300      	movs	r3, #0
	capacity = len = 0;
 23ff37c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23ff380:	6023      	str	r3, [r4, #0]
}
 23ff382:	bd10      	pop	{r4, pc}

023ff384 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23ff384:	b538      	push	{r3, r4, r5, lr}
 23ff386:	4604      	mov	r4, r0
 23ff388:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23ff38a:	6800      	ldr	r0, [r0, #0]
 23ff38c:	3101      	adds	r1, #1
 23ff38e:	f7ff fa19 	bl	23fe7c4 <realloc>
	if (newbuffer) {
 23ff392:	b110      	cbz	r0, 23ff39a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23ff394:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23ff398:	2001      	movs	r0, #1
	}
	return 0;
}
 23ff39a:	bd38      	pop	{r3, r4, r5, pc}

023ff39c <_ZN6String7reserveEj>:
{
 23ff39c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23ff39e:	6803      	ldr	r3, [r0, #0]
{
 23ff3a0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23ff3a2:	b123      	cbz	r3, 23ff3ae <_ZN6String7reserveEj+0x12>
 23ff3a4:	6843      	ldr	r3, [r0, #4]
 23ff3a6:	428b      	cmp	r3, r1
 23ff3a8:	d301      	bcc.n	23ff3ae <_ZN6String7reserveEj+0x12>
 23ff3aa:	2001      	movs	r0, #1
}
 23ff3ac:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23ff3ae:	4620      	mov	r0, r4
 23ff3b0:	f7ff ffe8 	bl	23ff384 <_ZN6String12changeBufferEj>
 23ff3b4:	2800      	cmp	r0, #0
 23ff3b6:	d0f9      	beq.n	23ff3ac <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23ff3b8:	68a3      	ldr	r3, [r4, #8]
 23ff3ba:	2b00      	cmp	r3, #0
 23ff3bc:	d1f5      	bne.n	23ff3aa <_ZN6String7reserveEj+0xe>
 23ff3be:	6822      	ldr	r2, [r4, #0]
 23ff3c0:	7013      	strb	r3, [r2, #0]
 23ff3c2:	e7f2      	b.n	23ff3aa <_ZN6String7reserveEj+0xe>

023ff3c4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23ff3c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff3c6:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23ff3c8:	4611      	mov	r1, r2
 23ff3ca:	9201      	str	r2, [sp, #4]
{
 23ff3cc:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23ff3ce:	f7ff ffe5 	bl	23ff39c <_ZN6String7reserveEj>
 23ff3d2:	9a01      	ldr	r2, [sp, #4]
 23ff3d4:	b928      	cbnz	r0, 23ff3e2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23ff3d6:	4620      	mov	r0, r4
 23ff3d8:	f7ff ffc9 	bl	23ff36e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23ff3dc:	4620      	mov	r0, r4
 23ff3de:	b003      	add	sp, #12
 23ff3e0:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23ff3e2:	4629      	mov	r1, r5
	len = length;
 23ff3e4:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23ff3e6:	6820      	ldr	r0, [r4, #0]
 23ff3e8:	f000 fba1 	bl	23ffb2e <memcpy>
	buffer[len] = 0;
 23ff3ec:	2100      	movs	r1, #0
 23ff3ee:	6822      	ldr	r2, [r4, #0]
 23ff3f0:	68a3      	ldr	r3, [r4, #8]
 23ff3f2:	54d1      	strb	r1, [r2, r3]
	return *this;
 23ff3f4:	e7f2      	b.n	23ff3dc <_ZN6String4copyEPKcj+0x18>

023ff3f6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
 23ff3f6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23ff3f8:	b513      	push	{r0, r1, r4, lr}
 23ff3fa:	4604      	mov	r4, r0
	capacity = 0;
 23ff3fc:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23ff400:	6083      	str	r3, [r0, #8]
	flags = 0;
 23ff402:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 23ff404:	b141      	cbz	r1, 23ff418 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 23ff406:	4608      	mov	r0, r1
 23ff408:	9101      	str	r1, [sp, #4]
 23ff40a:	f7fe fb5b 	bl	23fdac4 <strlen>
 23ff40e:	9901      	ldr	r1, [sp, #4]
 23ff410:	4602      	mov	r2, r0
 23ff412:	4620      	mov	r0, r4
 23ff414:	f7ff ffd6 	bl	23ff3c4 <_ZN6String4copyEPKcj>
}
 23ff418:	4620      	mov	r0, r4
 23ff41a:	b002      	add	sp, #8
 23ff41c:	bd10      	pop	{r4, pc}

023ff41e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23ff41e:	4288      	cmp	r0, r1
{
 23ff420:	b510      	push	{r4, lr}
 23ff422:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23ff424:	d005      	beq.n	23ff432 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23ff426:	680b      	ldr	r3, [r1, #0]
 23ff428:	b12b      	cbz	r3, 23ff436 <_ZN6StringaSERKS_+0x18>
 23ff42a:	688a      	ldr	r2, [r1, #8]
 23ff42c:	4619      	mov	r1, r3
 23ff42e:	f7ff ffc9 	bl	23ff3c4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23ff432:	4620      	mov	r0, r4
 23ff434:	bd10      	pop	{r4, pc}
	else invalidate();
 23ff436:	f7ff ff9a 	bl	23ff36e <_ZN6String10invalidateEv>
 23ff43a:	e7fa      	b.n	23ff432 <_ZN6StringaSERKS_+0x14>

023ff43c <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23ff43c:	2300      	movs	r3, #0
String::String(const String &value)
 23ff43e:	b510      	push	{r4, lr}
 23ff440:	4604      	mov	r4, r0
	capacity = 0;
 23ff442:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23ff446:	6083      	str	r3, [r0, #8]
	flags = 0;
 23ff448:	7303      	strb	r3, [r0, #12]
	*this = value;
 23ff44a:	f7ff ffe8 	bl	23ff41e <_ZN6StringaSERKS_>
}
 23ff44e:	4620      	mov	r0, r4
 23ff450:	bd10      	pop	{r4, pc}

023ff452 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 23ff452:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 23ff454:	6882      	ldr	r2, [r0, #8]
 23ff456:	b93a      	cbnz	r2, 23ff468 <_ZNK6String6equalsEPKc+0x16>
 23ff458:	b121      	cbz	r1, 23ff464 <_ZNK6String6equalsEPKc+0x12>
 23ff45a:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 23ff45c:	fab0 f080 	clz	r0, r0
 23ff460:	0940      	lsrs	r0, r0, #5
 23ff462:	e000      	b.n	23ff466 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 23ff464:	2001      	movs	r0, #1
}
 23ff466:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 23ff468:	6800      	ldr	r0, [r0, #0]
 23ff46a:	b909      	cbnz	r1, 23ff470 <_ZNK6String6equalsEPKc+0x1e>
 23ff46c:	7800      	ldrb	r0, [r0, #0]
 23ff46e:	e7f5      	b.n	23ff45c <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 23ff470:	f7fe fb1e 	bl	23fdab0 <strcmp>
 23ff474:	e7f2      	b.n	23ff45c <_ZNK6String6equalsEPKc+0xa>
	...

023ff478 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23ff478:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23ff47a:	2000      	movs	r0, #0
 23ff47c:	4b04      	ldr	r3, [pc, #16]	; (23ff490 <_GLOBAL__sub_I_System+0x18>)
 23ff47e:	601a      	str	r2, [r3, #0]
 23ff480:	4b04      	ldr	r3, [pc, #16]	; (23ff494 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23ff482:	4a05      	ldr	r2, [pc, #20]	; (23ff498 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23ff484:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23ff488:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23ff48a:	f7ff b84b 	b.w	23fe524 <set_system_mode>
 23ff48e:	bf00      	nop
 23ff490:	1007aeb4 	.word	0x1007aeb4
 23ff494:	1007aea8 	.word	0x1007aea8
 23ff498:	ffff0000 	.word	0xffff0000

023ff49c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23ff49c:	4b02      	ldr	r3, [pc, #8]	; (23ff4a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23ff49e:	681a      	ldr	r2, [r3, #0]
 23ff4a0:	4b02      	ldr	r3, [pc, #8]	; (23ff4ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23ff4a2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23ff4a4:	4770      	bx	lr
 23ff4a6:	bf00      	nop
 23ff4a8:	1007ad10 	.word	0x1007ad10
 23ff4ac:	1007aeb8 	.word	0x1007aeb8

023ff4b0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23ff4b0:	4770      	bx	lr

023ff4b2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff4b2:	7441      	strb	r1, [r0, #17]
}
 23ff4b4:	4770      	bx	lr

023ff4b6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23ff4b6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23ff4b8:	7c00      	ldrb	r0, [r0, #16]
 23ff4ba:	f7fe ffc3 	bl	23fe444 <hal_usart_available_data_for_write>
}
 23ff4be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff4c2:	bd08      	pop	{r3, pc}

023ff4c4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23ff4c4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23ff4c6:	7c00      	ldrb	r0, [r0, #16]
 23ff4c8:	f7fe ff76 	bl	23fe3b8 <hal_usart_available>
}
 23ff4cc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff4d0:	bd08      	pop	{r3, pc}

023ff4d2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23ff4d2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23ff4d4:	7c00      	ldrb	r0, [r0, #16]
 23ff4d6:	f7fe ff8b 	bl	23fe3f0 <hal_usart_peek>
}
 23ff4da:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff4de:	bd08      	pop	{r3, pc}

023ff4e0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23ff4e0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23ff4e2:	7c00      	ldrb	r0, [r0, #16]
 23ff4e4:	f7fe ff76 	bl	23fe3d4 <hal_usart_read>
}
 23ff4e8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff4ec:	bd08      	pop	{r3, pc}

023ff4ee <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23ff4ee:	7c00      	ldrb	r0, [r0, #16]
 23ff4f0:	f7fe bf8c 	b.w	23fe40c <hal_usart_flush>

023ff4f4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23ff4f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff4f6:	7c45      	ldrb	r5, [r0, #17]
{
 23ff4f8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff4fa:	b12d      	cbz	r5, 23ff508 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23ff4fc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23ff4fe:	b003      	add	sp, #12
 23ff500:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23ff504:	f7fe bf4a 	b.w	23fe39c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff508:	7c00      	ldrb	r0, [r0, #16]
 23ff50a:	9101      	str	r1, [sp, #4]
 23ff50c:	f7fe ff9a 	bl	23fe444 <hal_usart_available_data_for_write>
 23ff510:	2800      	cmp	r0, #0
 23ff512:	9901      	ldr	r1, [sp, #4]
 23ff514:	dcf2      	bgt.n	23ff4fc <_ZN11USARTSerial5writeEh+0x8>
}
 23ff516:	4628      	mov	r0, r5
 23ff518:	b003      	add	sp, #12
 23ff51a:	bd30      	pop	{r4, r5, pc}

023ff51c <_ZN11USARTSerialD0Ev>:
 23ff51c:	b510      	push	{r4, lr}
 23ff51e:	4604      	mov	r4, r0
 23ff520:	2114      	movs	r1, #20
 23ff522:	f7fe faf8 	bl	23fdb16 <_ZdlPvj>
 23ff526:	4620      	mov	r0, r4
 23ff528:	bd10      	pop	{r4, pc}
	...

023ff52c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff52c:	b510      	push	{r4, lr}
 23ff52e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff532:	4604      	mov	r4, r0
 23ff534:	4608      	mov	r0, r1
 23ff536:	4611      	mov	r1, r2
 23ff538:	2200      	movs	r2, #0
 23ff53a:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23ff53e:	4b04      	ldr	r3, [pc, #16]	; (23ff550 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23ff540:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff542:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff544:	2301      	movs	r3, #1
 23ff546:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23ff548:	f7fe ff8a 	bl	23fe460 <hal_usart_init_ex>
}
 23ff54c:	4620      	mov	r0, r4
 23ff54e:	bd10      	pop	{r4, pc}
 23ff550:	023ffec4 	.word	0x023ffec4

023ff554 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23ff554:	7c00      	ldrb	r0, [r0, #16]
 23ff556:	f7fe bf67 	b.w	23fe428 <hal_usart_is_enabled>

023ff55a <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff55a:	7441      	strb	r1, [r0, #17]
}
 23ff55c:	4770      	bx	lr

023ff55e <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff55e:	4770      	bx	lr

023ff560 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23ff560:	4770      	bx	lr

023ff562 <_ZN9USBSerial4readEv>:
{
 23ff562:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23ff564:	2100      	movs	r1, #0
 23ff566:	7c00      	ldrb	r0, [r0, #16]
 23ff568:	f7fe ffb2 	bl	23fe4d0 <HAL_USB_USART_Receive_Data>
}
 23ff56c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff570:	bd08      	pop	{r3, pc}

023ff572 <_ZN9USBSerial4peekEv>:
{
 23ff572:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23ff574:	2101      	movs	r1, #1
 23ff576:	7c00      	ldrb	r0, [r0, #16]
 23ff578:	f7fe ffaa 	bl	23fe4d0 <HAL_USB_USART_Receive_Data>
}
 23ff57c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff580:	bd08      	pop	{r3, pc}

023ff582 <_ZN9USBSerial17availableForWriteEv>:
{
 23ff582:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23ff584:	7c00      	ldrb	r0, [r0, #16]
 23ff586:	f7fe ff95 	bl	23fe4b4 <HAL_USB_USART_Available_Data_For_Write>
}
 23ff58a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff58e:	bd08      	pop	{r3, pc}

023ff590 <_ZN9USBSerial9availableEv>:
{
 23ff590:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23ff592:	7c00      	ldrb	r0, [r0, #16]
 23ff594:	f7fe ff80 	bl	23fe498 <HAL_USB_USART_Available_Data>
}
 23ff598:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff59c:	bd08      	pop	{r3, pc}

023ff59e <_ZN9USBSerial5writeEh>:
{
 23ff59e:	b513      	push	{r0, r1, r4, lr}
 23ff5a0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff5a2:	7c00      	ldrb	r0, [r0, #16]
{
 23ff5a4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff5a6:	f7fe ff85 	bl	23fe4b4 <HAL_USB_USART_Available_Data_For_Write>
 23ff5aa:	2800      	cmp	r0, #0
 23ff5ac:	9901      	ldr	r1, [sp, #4]
 23ff5ae:	dc01      	bgt.n	23ff5b4 <_ZN9USBSerial5writeEh+0x16>
 23ff5b0:	7c60      	ldrb	r0, [r4, #17]
 23ff5b2:	b120      	cbz	r0, 23ff5be <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23ff5b4:	7c20      	ldrb	r0, [r4, #16]
 23ff5b6:	f7fe ff99 	bl	23fe4ec <HAL_USB_USART_Send_Data>
 23ff5ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23ff5be:	b002      	add	sp, #8
 23ff5c0:	bd10      	pop	{r4, pc}

023ff5c2 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23ff5c2:	7c00      	ldrb	r0, [r0, #16]
 23ff5c4:	f7fe bfa0 	b.w	23fe508 <HAL_USB_USART_Flush_Data>

023ff5c8 <_ZN9USBSerialD0Ev>:
 23ff5c8:	b510      	push	{r4, lr}
 23ff5ca:	4604      	mov	r4, r0
 23ff5cc:	2114      	movs	r1, #20
 23ff5ce:	f7fe faa2 	bl	23fdb16 <_ZdlPvj>
 23ff5d2:	4620      	mov	r0, r4
 23ff5d4:	bd10      	pop	{r4, pc}
	...

023ff5d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff5d8:	b510      	push	{r4, lr}
 23ff5da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff5de:	4604      	mov	r4, r0
 23ff5e0:	4608      	mov	r0, r1
 23ff5e2:	2100      	movs	r1, #0
 23ff5e4:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23ff5e8:	4b04      	ldr	r3, [pc, #16]	; (23ff5fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23ff5ea:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff5ec:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff5ee:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23ff5f0:	4611      	mov	r1, r2
  _blocking = true;
 23ff5f2:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23ff5f4:	f7fe ff42 	bl	23fe47c <HAL_USB_USART_Init>
}
 23ff5f8:	4620      	mov	r0, r4
 23ff5fa:	bd10      	pop	{r4, pc}
 23ff5fc:	023ffef4 	.word	0x023ffef4

023ff600 <_Z19acquireSerialBufferv>:
{
 23ff600:	b510      	push	{r4, lr}
 23ff602:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23ff604:	2214      	movs	r2, #20
 23ff606:	2100      	movs	r1, #0
 23ff608:	f000 fa9e 	bl	23ffb48 <memset>
}
 23ff60c:	4620      	mov	r0, r4
 23ff60e:	bd10      	pop	{r4, pc}

023ff610 <_Z16_fetch_usbserialv>:
{
 23ff610:	b510      	push	{r4, lr}
 23ff612:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23ff614:	a803      	add	r0, sp, #12
 23ff616:	f7ff fff3 	bl	23ff600 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff61a:	4c0c      	ldr	r4, [pc, #48]	; (23ff64c <_Z16_fetch_usbserialv+0x3c>)
 23ff61c:	e8d4 1f8f 	ldab	r1, [r4]
 23ff620:	f011 0101 	ands.w	r1, r1, #1
 23ff624:	d10f      	bne.n	23ff646 <_Z16_fetch_usbserialv+0x36>
 23ff626:	4620      	mov	r0, r4
 23ff628:	9101      	str	r1, [sp, #4]
 23ff62a:	f7fe fa76 	bl	23fdb1a <__cxa_guard_acquire>
 23ff62e:	9901      	ldr	r1, [sp, #4]
 23ff630:	b148      	cbz	r0, 23ff646 <_Z16_fetch_usbserialv+0x36>
 23ff632:	aa03      	add	r2, sp, #12
 23ff634:	4806      	ldr	r0, [pc, #24]	; (23ff650 <_Z16_fetch_usbserialv+0x40>)
 23ff636:	f7ff ffcf 	bl	23ff5d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23ff63a:	4620      	mov	r0, r4
 23ff63c:	f7fe fa72 	bl	23fdb24 <__cxa_guard_release>
 23ff640:	4804      	ldr	r0, [pc, #16]	; (23ff654 <_Z16_fetch_usbserialv+0x44>)
 23ff642:	f000 fa6e 	bl	23ffb22 <atexit>
	return _usbserial;
}
 23ff646:	4802      	ldr	r0, [pc, #8]	; (23ff650 <_Z16_fetch_usbserialv+0x40>)
 23ff648:	b008      	add	sp, #32
 23ff64a:	bd10      	pop	{r4, pc}
 23ff64c:	1007aebc 	.word	0x1007aebc
 23ff650:	1007aec0 	.word	0x1007aec0
 23ff654:	023ff55f 	.word	0x023ff55f

023ff658 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23ff658:	2200      	movs	r2, #0
 23ff65a:	6840      	ldr	r0, [r0, #4]
 23ff65c:	4611      	mov	r1, r2
 23ff65e:	f7ff b817 	b.w	23fe690 <network_ready>

023ff662 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23ff662:	2200      	movs	r2, #0
 23ff664:	6840      	ldr	r0, [r0, #4]
 23ff666:	4611      	mov	r1, r2
 23ff668:	f7ff b84a 	b.w	23fe700 <network_listening>

023ff66c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23ff66c:	2200      	movs	r2, #0
 23ff66e:	6840      	ldr	r0, [r0, #4]
 23ff670:	4611      	mov	r1, r2
 23ff672:	f7ff b861 	b.w	23fe738 <network_get_listen_timeout>

023ff676 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23ff676:	2200      	movs	r2, #0
 23ff678:	6840      	ldr	r0, [r0, #4]
 23ff67a:	f7ff b84f 	b.w	23fe71c <network_set_listen_timeout>

023ff67e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23ff67e:	2200      	movs	r2, #0
 23ff680:	6840      	ldr	r0, [r0, #4]
 23ff682:	f081 0101 	eor.w	r1, r1, #1
 23ff686:	f7ff b82d 	b.w	23fe6e4 <network_listen>

023ff68a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23ff68a:	2300      	movs	r3, #0
 23ff68c:	6840      	ldr	r0, [r0, #4]
 23ff68e:	461a      	mov	r2, r3
 23ff690:	4619      	mov	r1, r3
 23ff692:	f7ff b819 	b.w	23fe6c8 <network_off>

023ff696 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23ff696:	2300      	movs	r3, #0
 23ff698:	6840      	ldr	r0, [r0, #4]
 23ff69a:	461a      	mov	r2, r3
 23ff69c:	4619      	mov	r1, r3
 23ff69e:	f7ff b805 	b.w	23fe6ac <network_on>

023ff6a2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23ff6a2:	2200      	movs	r2, #0
 23ff6a4:	6840      	ldr	r0, [r0, #4]
 23ff6a6:	4611      	mov	r1, r2
 23ff6a8:	f7fe bfd6 	b.w	23fe658 <network_connecting>

023ff6ac <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23ff6ac:	2200      	movs	r2, #0
 23ff6ae:	2102      	movs	r1, #2
 23ff6b0:	6840      	ldr	r0, [r0, #4]
 23ff6b2:	f7fe bfdf 	b.w	23fe674 <network_disconnect>

023ff6b6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23ff6b6:	2300      	movs	r3, #0
 23ff6b8:	6840      	ldr	r0, [r0, #4]
 23ff6ba:	461a      	mov	r2, r3
 23ff6bc:	f7fe bfbe 	b.w	23fe63c <network_connect>

023ff6c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23ff6c0:	2204      	movs	r2, #4
 23ff6c2:	4b02      	ldr	r3, [pc, #8]	; (23ff6cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23ff6c4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23ff6c6:	4a02      	ldr	r2, [pc, #8]	; (23ff6d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23ff6c8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23ff6ca:	4770      	bx	lr
 23ff6cc:	1007aed4 	.word	0x1007aed4
 23ff6d0:	023fff24 	.word	0x023fff24

023ff6d4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23ff6d4:	4b01      	ldr	r3, [pc, #4]	; (23ff6dc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23ff6d6:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23ff6d8:	4770      	bx	lr
 23ff6da:	bf00      	nop
 23ff6dc:	1007ad14 	.word	0x1007ad14

023ff6e0 <serialEventRun>:
{
 23ff6e0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23ff6e2:	4b0f      	ldr	r3, [pc, #60]	; (23ff720 <serialEventRun+0x40>)
 23ff6e4:	b143      	cbz	r3, 23ff6f8 <serialEventRun+0x18>
 23ff6e6:	f7ff ff93 	bl	23ff610 <_Z16_fetch_usbserialv>
 23ff6ea:	6803      	ldr	r3, [r0, #0]
 23ff6ec:	691b      	ldr	r3, [r3, #16]
 23ff6ee:	4798      	blx	r3
 23ff6f0:	2800      	cmp	r0, #0
 23ff6f2:	dd01      	ble.n	23ff6f8 <serialEventRun+0x18>
        serialEvent();
 23ff6f4:	e000      	b.n	23ff6f8 <serialEventRun+0x18>
 23ff6f6:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23ff6f8:	4b0a      	ldr	r3, [pc, #40]	; (23ff724 <serialEventRun+0x44>)
 23ff6fa:	b143      	cbz	r3, 23ff70e <serialEventRun+0x2e>
 23ff6fc:	f000 f97c 	bl	23ff9f8 <_Z22__fetch_global_Serial1v>
 23ff700:	6803      	ldr	r3, [r0, #0]
 23ff702:	691b      	ldr	r3, [r3, #16]
 23ff704:	4798      	blx	r3
 23ff706:	2800      	cmp	r0, #0
 23ff708:	dd01      	ble.n	23ff70e <serialEventRun+0x2e>
        serialEvent1();
 23ff70a:	e000      	b.n	23ff70e <serialEventRun+0x2e>
 23ff70c:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23ff70e:	4b06      	ldr	r3, [pc, #24]	; (23ff728 <serialEventRun+0x48>)
 23ff710:	b10b      	cbz	r3, 23ff716 <serialEventRun+0x36>
 23ff712:	f000 f9b7 	bl	23ffa84 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23ff716:	4b05      	ldr	r3, [pc, #20]	; (23ff72c <serialEventRun+0x4c>)
 23ff718:	b10b      	cbz	r3, 23ff71e <serialEventRun+0x3e>
 23ff71a:	f000 f9e9 	bl	23ffaf0 <_Z15serialEventRun3v>
}
 23ff71e:	bd08      	pop	{r3, pc}
	...

023ff730 <_post_loop>:
{
 23ff730:	b508      	push	{r3, lr}
	serialEventRun();
 23ff732:	f7ff ffd5 	bl	23ff6e0 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23ff736:	f7fe fd0b 	bl	23fe150 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23ff73a:	4b01      	ldr	r3, [pc, #4]	; (23ff740 <_post_loop+0x10>)
 23ff73c:	6018      	str	r0, [r3, #0]
}
 23ff73e:	bd08      	pop	{r3, pc}
 23ff740:	1007aef0 	.word	0x1007aef0

023ff744 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff744:	4805      	ldr	r0, [pc, #20]	; (23ff75c <_Z33system_initialize_user_backup_ramv+0x18>)
 23ff746:	4a06      	ldr	r2, [pc, #24]	; (23ff760 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23ff748:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff74a:	1a12      	subs	r2, r2, r0
 23ff74c:	4905      	ldr	r1, [pc, #20]	; (23ff764 <_Z33system_initialize_user_backup_ramv+0x20>)
 23ff74e:	f000 f9ee 	bl	23ffb2e <memcpy>
    __backup_sram_signature = signature;
 23ff752:	4b05      	ldr	r3, [pc, #20]	; (23ff768 <_Z33system_initialize_user_backup_ramv+0x24>)
 23ff754:	4a05      	ldr	r2, [pc, #20]	; (23ff76c <_Z33system_initialize_user_backup_ramv+0x28>)
 23ff756:	601a      	str	r2, [r3, #0]
}
 23ff758:	bd08      	pop	{r3, pc}
 23ff75a:	bf00      	nop
 23ff75c:	1007b400 	.word	0x1007b400
 23ff760:	1007b404 	.word	0x1007b404
 23ff764:	085ff67c 	.word	0x085ff67c
 23ff768:	1007b400 	.word	0x1007b400
 23ff76c:	9a271c1e 	.word	0x9a271c1e

023ff770 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff770:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23ff772:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff774:	461a      	mov	r2, r3
 23ff776:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff77a:	9300      	str	r3, [sp, #0]
 23ff77c:	f7fe ff18 	bl	23fe5b0 <system_ctrl_set_result>
}
 23ff780:	b003      	add	sp, #12
 23ff782:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023ff788 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23ff788:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23ff78a:	8843      	ldrh	r3, [r0, #2]
 23ff78c:	2b0a      	cmp	r3, #10
 23ff78e:	d008      	beq.n	23ff7a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23ff790:	2b50      	cmp	r3, #80	; 0x50
 23ff792:	d10b      	bne.n	23ff7ac <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23ff794:	4b09      	ldr	r3, [pc, #36]	; (23ff7bc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23ff796:	681b      	ldr	r3, [r3, #0]
 23ff798:	b14b      	cbz	r3, 23ff7ae <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23ff79a:	b003      	add	sp, #12
 23ff79c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23ff7a0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23ff7a2:	f7ff ffe5 	bl	23ff770 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23ff7a6:	b003      	add	sp, #12
 23ff7a8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff7ac:	2300      	movs	r3, #0
 23ff7ae:	461a      	mov	r2, r3
 23ff7b0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff7b4:	9300      	str	r3, [sp, #0]
 23ff7b6:	f7fe fefb 	bl	23fe5b0 <system_ctrl_set_result>
}
 23ff7ba:	e7f4      	b.n	23ff7a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23ff7bc:	1007aee0 	.word	0x1007aee0

023ff7c0 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff7c0:	2100      	movs	r1, #0
{
 23ff7c2:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff7c4:	4811      	ldr	r0, [pc, #68]	; (23ff80c <module_user_init_hook+0x4c>)
 23ff7c6:	f7ff f843 	bl	23fe850 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23ff7ca:	4b11      	ldr	r3, [pc, #68]	; (23ff810 <module_user_init_hook+0x50>)
 23ff7cc:	681a      	ldr	r2, [r3, #0]
 23ff7ce:	4b11      	ldr	r3, [pc, #68]	; (23ff814 <module_user_init_hook+0x54>)
 23ff7d0:	429a      	cmp	r2, r3
 23ff7d2:	bf0c      	ite	eq
 23ff7d4:	2201      	moveq	r2, #1
 23ff7d6:	2200      	movne	r2, #0
 23ff7d8:	4b0f      	ldr	r3, [pc, #60]	; (23ff818 <module_user_init_hook+0x58>)
 23ff7da:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23ff7dc:	d001      	beq.n	23ff7e2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23ff7de:	f7ff ffb1 	bl	23ff744 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23ff7e2:	f7fe fca7 	bl	23fe134 <HAL_RNG_GetRandomNumber>
 23ff7e6:	4604      	mov	r4, r0
    srand(seed);
 23ff7e8:	f000 f9b6 	bl	23ffb58 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23ff7ec:	4b0b      	ldr	r3, [pc, #44]	; (23ff81c <module_user_init_hook+0x5c>)
 23ff7ee:	b113      	cbz	r3, 23ff7f6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23ff7f0:	4620      	mov	r0, r4
 23ff7f2:	e000      	b.n	23ff7f6 <module_user_init_hook+0x36>
 23ff7f4:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23ff7f6:	2100      	movs	r1, #0
 23ff7f8:	4808      	ldr	r0, [pc, #32]	; (23ff81c <module_user_init_hook+0x5c>)
 23ff7fa:	f7fe ff11 	bl	23fe620 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23ff7fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23ff802:	2100      	movs	r1, #0
 23ff804:	4806      	ldr	r0, [pc, #24]	; (23ff820 <module_user_init_hook+0x60>)
 23ff806:	f7fe bec5 	b.w	23fe594 <system_ctrl_set_app_request_handler>
 23ff80a:	bf00      	nop
 23ff80c:	023ff6d5 	.word	0x023ff6d5
 23ff810:	1007b400 	.word	0x1007b400
 23ff814:	9a271c1e 	.word	0x9a271c1e
 23ff818:	1007aedc 	.word	0x1007aedc
 23ff81c:	00000000 	.word	0x00000000
 23ff820:	023ff789 	.word	0x023ff789

023ff824 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23ff824:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23ff826:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff828:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23ff82a:	d902      	bls.n	23ff832 <pinAvailable+0xe>
    return false;
 23ff82c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23ff82e:	b003      	add	sp, #12
 23ff830:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff832:	f1a0 030f 	sub.w	r3, r0, #15
 23ff836:	2b02      	cmp	r3, #2
 23ff838:	d90b      	bls.n	23ff852 <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23ff83a:	2801      	cmp	r0, #1
 23ff83c:	d821      	bhi.n	23ff882 <pinAvailable+0x5e>
 23ff83e:	f000 f887 	bl	23ff950 <_Z19__fetch_global_Wirev>
 23ff842:	2100      	movs	r1, #0
 23ff844:	7c00      	ldrb	r0, [r0, #16]
 23ff846:	f7fe fd39 	bl	23fe2bc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff84a:	f080 0001 	eor.w	r0, r0, #1
 23ff84e:	b2c0      	uxtb	r0, r0
 23ff850:	e7ed      	b.n	23ff82e <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23ff852:	4d11      	ldr	r5, [pc, #68]	; (23ff898 <pinAvailable+0x74>)
 23ff854:	e8d5 1f8f 	ldab	r1, [r5]
 23ff858:	f011 0101 	ands.w	r1, r1, #1
 23ff85c:	d10b      	bne.n	23ff876 <pinAvailable+0x52>
 23ff85e:	4628      	mov	r0, r5
 23ff860:	9101      	str	r1, [sp, #4]
 23ff862:	f7fe f95a 	bl	23fdb1a <__cxa_guard_acquire>
 23ff866:	9901      	ldr	r1, [sp, #4]
 23ff868:	b128      	cbz	r0, 23ff876 <pinAvailable+0x52>
 23ff86a:	480c      	ldr	r0, [pc, #48]	; (23ff89c <pinAvailable+0x78>)
 23ff86c:	f7ff fd6e 	bl	23ff34c <_ZN8SPIClassC1E19hal_spi_interface_t>
 23ff870:	4628      	mov	r0, r5
 23ff872:	f7fe f957 	bl	23fdb24 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff876:	4b09      	ldr	r3, [pc, #36]	; (23ff89c <pinAvailable+0x78>)
 23ff878:	7818      	ldrb	r0, [r3, #0]
 23ff87a:	f7fe fd81 	bl	23fe380 <hal_spi_is_enabled>
 23ff87e:	2800      	cmp	r0, #0
 23ff880:	d1d4      	bne.n	23ff82c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff882:	3c08      	subs	r4, #8
 23ff884:	2c01      	cmp	r4, #1
 23ff886:	d805      	bhi.n	23ff894 <pinAvailable+0x70>
 23ff888:	f000 f8b6 	bl	23ff9f8 <_Z22__fetch_global_Serial1v>
 23ff88c:	7c00      	ldrb	r0, [r0, #16]
 23ff88e:	f7fe fdcb 	bl	23fe428 <hal_usart_is_enabled>
 23ff892:	e7da      	b.n	23ff84a <pinAvailable+0x26>
  return true; // 'pin' is available
 23ff894:	2001      	movs	r0, #1
 23ff896:	e7ca      	b.n	23ff82e <pinAvailable+0xa>
 23ff898:	1007aee4 	.word	0x1007aee4
 23ff89c:	1007aee8 	.word	0x1007aee8

023ff8a0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff8a0:	281b      	cmp	r0, #27
{
 23ff8a2:	b538      	push	{r3, r4, r5, lr}
 23ff8a4:	4604      	mov	r4, r0
 23ff8a6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff8a8:	d80a      	bhi.n	23ff8c0 <pinMode+0x20>
 23ff8aa:	29ff      	cmp	r1, #255	; 0xff
 23ff8ac:	d008      	beq.n	23ff8c0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23ff8ae:	f7ff ffb9 	bl	23ff824 <pinAvailable>
 23ff8b2:	b128      	cbz	r0, 23ff8c0 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23ff8b4:	4629      	mov	r1, r5
 23ff8b6:	4620      	mov	r0, r4
}
 23ff8b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23ff8bc:	f7fe bc64 	b.w	23fe188 <hal_gpio_mode>
}
 23ff8c0:	bd38      	pop	{r3, r4, r5, pc}

023ff8c2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23ff8c2:	b538      	push	{r3, r4, r5, lr}
 23ff8c4:	4604      	mov	r4, r0
 23ff8c6:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23ff8c8:	f7fe fc6c 	bl	23fe1a4 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23ff8cc:	28ff      	cmp	r0, #255	; 0xff
 23ff8ce:	d010      	beq.n	23ff8f2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23ff8d0:	2806      	cmp	r0, #6
 23ff8d2:	d804      	bhi.n	23ff8de <digitalWrite+0x1c>
 23ff8d4:	234d      	movs	r3, #77	; 0x4d
 23ff8d6:	fa23 f000 	lsr.w	r0, r3, r0
 23ff8da:	07c3      	lsls	r3, r0, #31
 23ff8dc:	d409      	bmi.n	23ff8f2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23ff8de:	4620      	mov	r0, r4
 23ff8e0:	f7ff ffa0 	bl	23ff824 <pinAvailable>
 23ff8e4:	b128      	cbz	r0, 23ff8f2 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23ff8e6:	4629      	mov	r1, r5
 23ff8e8:	4620      	mov	r0, r4
}
 23ff8ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23ff8ee:	f7fe bc67 	b.w	23fe1c0 <hal_gpio_write>
}
 23ff8f2:	bd38      	pop	{r3, r4, r5, pc}

023ff8f4 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(hal_pin_t pin)
{
 23ff8f4:	b510      	push	{r4, lr}
 23ff8f6:	4604      	mov	r4, r0
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
 23ff8f8:	f7ff ff94 	bl	23ff824 <pinAvailable>
 23ff8fc:	b150      	cbz	r0, 23ff914 <analogRead+0x20>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
 23ff8fe:	2103      	movs	r1, #3
 23ff900:	4620      	mov	r0, r4
 23ff902:	f7fe fc33 	bl	23fe16c <hal_pin_validate_function>
 23ff906:	2803      	cmp	r0, #3
 23ff908:	d104      	bne.n	23ff914 <analogRead+0x20>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 23ff90a:	4620      	mov	r0, r4
}
 23ff90c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 23ff910:	f7fe bc64 	b.w	23fe1dc <hal_adc_read>
}
 23ff914:	2000      	movs	r0, #0
 23ff916:	bd10      	pop	{r4, pc}

023ff918 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff918:	4770      	bx	lr
	...

023ff91c <_Z17acquireWireBufferv>:
{
 23ff91c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23ff91e:	4b0a      	ldr	r3, [pc, #40]	; (23ff948 <_Z17acquireWireBufferv+0x2c>)
{
 23ff920:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23ff922:	6003      	str	r3, [r0, #0]
 23ff924:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff926:	4909      	ldr	r1, [pc, #36]	; (23ff94c <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23ff928:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff92a:	2020      	movs	r0, #32
 23ff92c:	f000 f8f4 	bl	23ffb18 <_ZnajRKSt9nothrow_t>
	};
 23ff930:	2520      	movs	r5, #32
 23ff932:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff934:	4905      	ldr	r1, [pc, #20]	; (23ff94c <_Z17acquireWireBufferv+0x30>)
 23ff936:	4628      	mov	r0, r5
	};
 23ff938:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff93a:	f000 f8ed 	bl	23ffb18 <_ZnajRKSt9nothrow_t>
	};
 23ff93e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23ff942:	4620      	mov	r0, r4
 23ff944:	bd38      	pop	{r3, r4, r5, pc}
 23ff946:	bf00      	nop
 23ff948:	00010018 	.word	0x00010018
 23ff94c:	023fff58 	.word	0x023fff58

023ff950 <_Z19__fetch_global_Wirev>:
{
 23ff950:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff952:	4d0e      	ldr	r5, [pc, #56]	; (23ff98c <_Z19__fetch_global_Wirev+0x3c>)
{
 23ff954:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff956:	e8d5 1f8f 	ldab	r1, [r5]
 23ff95a:	f011 0401 	ands.w	r4, r1, #1
 23ff95e:	d111      	bne.n	23ff984 <_Z19__fetch_global_Wirev+0x34>
 23ff960:	4628      	mov	r0, r5
 23ff962:	f7fe f8da 	bl	23fdb1a <__cxa_guard_acquire>
 23ff966:	b168      	cbz	r0, 23ff984 <_Z19__fetch_global_Wirev+0x34>
 23ff968:	4668      	mov	r0, sp
 23ff96a:	f7ff ffd7 	bl	23ff91c <_Z17acquireWireBufferv>
 23ff96e:	466a      	mov	r2, sp
 23ff970:	4621      	mov	r1, r4
 23ff972:	4807      	ldr	r0, [pc, #28]	; (23ff990 <_Z19__fetch_global_Wirev+0x40>)
 23ff974:	f7ff fafc 	bl	23fef70 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23ff978:	4628      	mov	r0, r5
 23ff97a:	f7fe f8d3 	bl	23fdb24 <__cxa_guard_release>
 23ff97e:	4805      	ldr	r0, [pc, #20]	; (23ff994 <_Z19__fetch_global_Wirev+0x44>)
 23ff980:	f000 f8cf 	bl	23ffb22 <atexit>
	return wire;
}
 23ff984:	4802      	ldr	r0, [pc, #8]	; (23ff990 <_Z19__fetch_global_Wirev+0x40>)
 23ff986:	b007      	add	sp, #28
 23ff988:	bd30      	pop	{r4, r5, pc}
 23ff98a:	bf00      	nop
 23ff98c:	1007aef4 	.word	0x1007aef4
 23ff990:	1007aef8 	.word	0x1007aef8
 23ff994:	023ff919 	.word	0x023ff919

023ff998 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff998:	4770      	bx	lr
	...

023ff99c <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff99c:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ff99e:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff9a0:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ff9a2:	462a      	mov	r2, r5
 23ff9a4:	2100      	movs	r1, #0
 23ff9a6:	f000 f8cf 	bl	23ffb48 <memset>
 23ff9aa:	8025      	strh	r5, [r4, #0]
 23ff9ac:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff9ae:	4907      	ldr	r1, [pc, #28]	; (23ff9cc <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ff9b0:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ff9b2:	8125      	strh	r5, [r4, #8]
 23ff9b4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff9b6:	f000 f8af 	bl	23ffb18 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff9ba:	4904      	ldr	r1, [pc, #16]	; (23ff9cc <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ff9bc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff9be:	4628      	mov	r0, r5
 23ff9c0:	f000 f8aa 	bl	23ffb18 <_ZnajRKSt9nothrow_t>
    };
 23ff9c4:	60e0      	str	r0, [r4, #12]
}
 23ff9c6:	4620      	mov	r0, r4
 23ff9c8:	bd38      	pop	{r3, r4, r5, pc}
 23ff9ca:	bf00      	nop
 23ff9cc:	023fff58 	.word	0x023fff58

023ff9d0 <__tcf_2>:
 23ff9d0:	4770      	bx	lr

023ff9d2 <__tcf_1>:
 23ff9d2:	4770      	bx	lr

023ff9d4 <_Z20acquireSerial1Bufferv>:
{
 23ff9d4:	b510      	push	{r4, lr}
 23ff9d6:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ff9d8:	f7ff ffe0 	bl	23ff99c <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ff9dc:	4620      	mov	r0, r4
 23ff9de:	bd10      	pop	{r4, pc}

023ff9e0 <_Z20acquireSerial2Bufferv>:
 23ff9e0:	b510      	push	{r4, lr}
 23ff9e2:	4604      	mov	r4, r0
 23ff9e4:	f7ff ffda 	bl	23ff99c <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff9e8:	4620      	mov	r0, r4
 23ff9ea:	bd10      	pop	{r4, pc}

023ff9ec <_Z20acquireSerial3Bufferv>:
 23ff9ec:	b510      	push	{r4, lr}
 23ff9ee:	4604      	mov	r4, r0
 23ff9f0:	f7ff ffd4 	bl	23ff99c <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff9f4:	4620      	mov	r0, r4
 23ff9f6:	bd10      	pop	{r4, pc}

023ff9f8 <_Z22__fetch_global_Serial1v>:
{
 23ff9f8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff9fa:	4d0e      	ldr	r5, [pc, #56]	; (23ffa34 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ff9fc:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff9fe:	e8d5 1f8f 	ldab	r1, [r5]
 23ffa02:	f011 0401 	ands.w	r4, r1, #1
 23ffa06:	d111      	bne.n	23ffa2c <_Z22__fetch_global_Serial1v+0x34>
 23ffa08:	4628      	mov	r0, r5
 23ffa0a:	f7fe f886 	bl	23fdb1a <__cxa_guard_acquire>
 23ffa0e:	b168      	cbz	r0, 23ffa2c <_Z22__fetch_global_Serial1v+0x34>
 23ffa10:	a801      	add	r0, sp, #4
 23ffa12:	f7ff ffdf 	bl	23ff9d4 <_Z20acquireSerial1Bufferv>
 23ffa16:	4621      	mov	r1, r4
 23ffa18:	aa01      	add	r2, sp, #4
 23ffa1a:	4807      	ldr	r0, [pc, #28]	; (23ffa38 <_Z22__fetch_global_Serial1v+0x40>)
 23ffa1c:	f7ff fd86 	bl	23ff52c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffa20:	4628      	mov	r0, r5
 23ffa22:	f7fe f87f 	bl	23fdb24 <__cxa_guard_release>
 23ffa26:	4805      	ldr	r0, [pc, #20]	; (23ffa3c <_Z22__fetch_global_Serial1v+0x44>)
 23ffa28:	f000 f87b 	bl	23ffb22 <atexit>
    return serial1;
}
 23ffa2c:	4802      	ldr	r0, [pc, #8]	; (23ffa38 <_Z22__fetch_global_Serial1v+0x40>)
 23ffa2e:	b007      	add	sp, #28
 23ffa30:	bd30      	pop	{r4, r5, pc}
 23ffa32:	bf00      	nop
 23ffa34:	1007af0c 	.word	0x1007af0c
 23ffa38:	1007af18 	.word	0x1007af18
 23ffa3c:	023ff999 	.word	0x023ff999

023ffa40 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ffa40:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ffa42:	4c0d      	ldr	r4, [pc, #52]	; (23ffa78 <_Z22__fetch_global_Serial2v+0x38>)
{
 23ffa44:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ffa46:	e8d4 3f8f 	ldab	r3, [r4]
 23ffa4a:	07db      	lsls	r3, r3, #31
 23ffa4c:	d411      	bmi.n	23ffa72 <_Z22__fetch_global_Serial2v+0x32>
 23ffa4e:	4620      	mov	r0, r4
 23ffa50:	f7fe f863 	bl	23fdb1a <__cxa_guard_acquire>
 23ffa54:	b168      	cbz	r0, 23ffa72 <_Z22__fetch_global_Serial2v+0x32>
 23ffa56:	a801      	add	r0, sp, #4
 23ffa58:	f7ff ffc2 	bl	23ff9e0 <_Z20acquireSerial2Bufferv>
 23ffa5c:	2101      	movs	r1, #1
 23ffa5e:	aa01      	add	r2, sp, #4
 23ffa60:	4806      	ldr	r0, [pc, #24]	; (23ffa7c <_Z22__fetch_global_Serial2v+0x3c>)
 23ffa62:	f7ff fd63 	bl	23ff52c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffa66:	4620      	mov	r0, r4
 23ffa68:	f7fe f85c 	bl	23fdb24 <__cxa_guard_release>
 23ffa6c:	4804      	ldr	r0, [pc, #16]	; (23ffa80 <_Z22__fetch_global_Serial2v+0x40>)
 23ffa6e:	f000 f858 	bl	23ffb22 <atexit>
	return serial2;
}
 23ffa72:	4802      	ldr	r0, [pc, #8]	; (23ffa7c <_Z22__fetch_global_Serial2v+0x3c>)
 23ffa74:	b006      	add	sp, #24
 23ffa76:	bd10      	pop	{r4, pc}
 23ffa78:	1007af10 	.word	0x1007af10
 23ffa7c:	1007af2c 	.word	0x1007af2c
 23ffa80:	023ff9d3 	.word	0x023ff9d3

023ffa84 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ffa84:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ffa86:	f7ff ffdb 	bl	23ffa40 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ffa8a:	4b07      	ldr	r3, [pc, #28]	; (23ffaa8 <_Z15serialEventRun2v+0x24>)
 23ffa8c:	4604      	mov	r4, r0
 23ffa8e:	b153      	cbz	r3, 23ffaa6 <_Z15serialEventRun2v+0x22>
 23ffa90:	f7ff fd60 	bl	23ff554 <_ZN11USARTSerial9isEnabledEv>
 23ffa94:	b138      	cbz	r0, 23ffaa6 <_Z15serialEventRun2v+0x22>
 23ffa96:	6823      	ldr	r3, [r4, #0]
 23ffa98:	4620      	mov	r0, r4
 23ffa9a:	691b      	ldr	r3, [r3, #16]
 23ffa9c:	4798      	blx	r3
 23ffa9e:	2800      	cmp	r0, #0
 23ffaa0:	dd01      	ble.n	23ffaa6 <_Z15serialEventRun2v+0x22>
        handler();
 23ffaa2:	e000      	b.n	23ffaa6 <_Z15serialEventRun2v+0x22>
 23ffaa4:	bf00      	nop
}
 23ffaa6:	bd10      	pop	{r4, pc}
 23ffaa8:	00000000 	.word	0x00000000

023ffaac <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ffaac:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ffaae:	4c0d      	ldr	r4, [pc, #52]	; (23ffae4 <_Z22__fetch_global_Serial3v+0x38>)
{
 23ffab0:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ffab2:	e8d4 3f8f 	ldab	r3, [r4]
 23ffab6:	07db      	lsls	r3, r3, #31
 23ffab8:	d411      	bmi.n	23ffade <_Z22__fetch_global_Serial3v+0x32>
 23ffaba:	4620      	mov	r0, r4
 23ffabc:	f7fe f82d 	bl	23fdb1a <__cxa_guard_acquire>
 23ffac0:	b168      	cbz	r0, 23ffade <_Z22__fetch_global_Serial3v+0x32>
 23ffac2:	a801      	add	r0, sp, #4
 23ffac4:	f7ff ff92 	bl	23ff9ec <_Z20acquireSerial3Bufferv>
 23ffac8:	2102      	movs	r1, #2
 23ffaca:	aa01      	add	r2, sp, #4
 23ffacc:	4806      	ldr	r0, [pc, #24]	; (23ffae8 <_Z22__fetch_global_Serial3v+0x3c>)
 23fface:	f7ff fd2d 	bl	23ff52c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffad2:	4620      	mov	r0, r4
 23ffad4:	f7fe f826 	bl	23fdb24 <__cxa_guard_release>
 23ffad8:	4804      	ldr	r0, [pc, #16]	; (23ffaec <_Z22__fetch_global_Serial3v+0x40>)
 23ffada:	f000 f822 	bl	23ffb22 <atexit>
	return serial3;
}
 23ffade:	4802      	ldr	r0, [pc, #8]	; (23ffae8 <_Z22__fetch_global_Serial3v+0x3c>)
 23ffae0:	b006      	add	sp, #24
 23ffae2:	bd10      	pop	{r4, pc}
 23ffae4:	1007af14 	.word	0x1007af14
 23ffae8:	1007af40 	.word	0x1007af40
 23ffaec:	023ff9d1 	.word	0x023ff9d1

023ffaf0 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ffaf0:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ffaf2:	f7ff ffdb 	bl	23ffaac <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ffaf6:	4b07      	ldr	r3, [pc, #28]	; (23ffb14 <_Z15serialEventRun3v+0x24>)
 23ffaf8:	4604      	mov	r4, r0
 23ffafa:	b153      	cbz	r3, 23ffb12 <_Z15serialEventRun3v+0x22>
 23ffafc:	f7ff fd2a 	bl	23ff554 <_ZN11USARTSerial9isEnabledEv>
 23ffb00:	b138      	cbz	r0, 23ffb12 <_Z15serialEventRun3v+0x22>
 23ffb02:	6823      	ldr	r3, [r4, #0]
 23ffb04:	4620      	mov	r0, r4
 23ffb06:	691b      	ldr	r3, [r3, #16]
 23ffb08:	4798      	blx	r3
 23ffb0a:	2800      	cmp	r0, #0
 23ffb0c:	dd01      	ble.n	23ffb12 <_Z15serialEventRun3v+0x22>
        handler();
 23ffb0e:	e000      	b.n	23ffb12 <_Z15serialEventRun3v+0x22>
 23ffb10:	bf00      	nop
}
 23ffb12:	bd10      	pop	{r4, pc}
 23ffb14:	00000000 	.word	0x00000000

023ffb18 <_ZnajRKSt9nothrow_t>:
 23ffb18:	f7fd bffb 	b.w	23fdb12 <_Znaj>

023ffb1c <_ZSt25__throw_bad_function_callv>:
 23ffb1c:	b508      	push	{r3, lr}
 23ffb1e:	f7fe fe6d 	bl	23fe7fc <abort>

023ffb22 <atexit>:
 23ffb22:	2300      	movs	r3, #0
 23ffb24:	4601      	mov	r1, r0
 23ffb26:	461a      	mov	r2, r3
 23ffb28:	4618      	mov	r0, r3
 23ffb2a:	f000 b861 	b.w	23ffbf0 <__register_exitproc>

023ffb2e <memcpy>:
 23ffb2e:	440a      	add	r2, r1
 23ffb30:	1e43      	subs	r3, r0, #1
 23ffb32:	4291      	cmp	r1, r2
 23ffb34:	d100      	bne.n	23ffb38 <memcpy+0xa>
 23ffb36:	4770      	bx	lr
 23ffb38:	b510      	push	{r4, lr}
 23ffb3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ffb3e:	4291      	cmp	r1, r2
 23ffb40:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ffb44:	d1f9      	bne.n	23ffb3a <memcpy+0xc>
 23ffb46:	bd10      	pop	{r4, pc}

023ffb48 <memset>:
 23ffb48:	4402      	add	r2, r0
 23ffb4a:	4603      	mov	r3, r0
 23ffb4c:	4293      	cmp	r3, r2
 23ffb4e:	d100      	bne.n	23ffb52 <memset+0xa>
 23ffb50:	4770      	bx	lr
 23ffb52:	f803 1b01 	strb.w	r1, [r3], #1
 23ffb56:	e7f9      	b.n	23ffb4c <memset+0x4>

023ffb58 <srand>:
 23ffb58:	b538      	push	{r3, r4, r5, lr}
 23ffb5a:	4b10      	ldr	r3, [pc, #64]	; (23ffb9c <srand+0x44>)
 23ffb5c:	4604      	mov	r4, r0
 23ffb5e:	681d      	ldr	r5, [r3, #0]
 23ffb60:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ffb62:	b9b3      	cbnz	r3, 23ffb92 <srand+0x3a>
 23ffb64:	2018      	movs	r0, #24
 23ffb66:	f7fe fe11 	bl	23fe78c <malloc>
 23ffb6a:	4602      	mov	r2, r0
 23ffb6c:	63a8      	str	r0, [r5, #56]	; 0x38
 23ffb6e:	b920      	cbnz	r0, 23ffb7a <srand+0x22>
 23ffb70:	4b0b      	ldr	r3, [pc, #44]	; (23ffba0 <srand+0x48>)
 23ffb72:	2142      	movs	r1, #66	; 0x42
 23ffb74:	480b      	ldr	r0, [pc, #44]	; (23ffba4 <srand+0x4c>)
 23ffb76:	f7fe fe5d 	bl	23fe834 <__assert_func>
 23ffb7a:	490b      	ldr	r1, [pc, #44]	; (23ffba8 <srand+0x50>)
 23ffb7c:	4b0b      	ldr	r3, [pc, #44]	; (23ffbac <srand+0x54>)
 23ffb7e:	e9c0 1300 	strd	r1, r3, [r0]
 23ffb82:	4b0b      	ldr	r3, [pc, #44]	; (23ffbb0 <srand+0x58>)
 23ffb84:	2100      	movs	r1, #0
 23ffb86:	6083      	str	r3, [r0, #8]
 23ffb88:	230b      	movs	r3, #11
 23ffb8a:	8183      	strh	r3, [r0, #12]
 23ffb8c:	2001      	movs	r0, #1
 23ffb8e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ffb92:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ffb94:	2200      	movs	r2, #0
 23ffb96:	611c      	str	r4, [r3, #16]
 23ffb98:	615a      	str	r2, [r3, #20]
 23ffb9a:	bd38      	pop	{r3, r4, r5, pc}
 23ffb9c:	1007ad14 	.word	0x1007ad14
 23ffba0:	023fff59 	.word	0x023fff59
 23ffba4:	023fff70 	.word	0x023fff70
 23ffba8:	abcd330e 	.word	0xabcd330e
 23ffbac:	e66d1234 	.word	0xe66d1234
 23ffbb0:	0005deec 	.word	0x0005deec

023ffbb4 <strdup>:
 23ffbb4:	4b02      	ldr	r3, [pc, #8]	; (23ffbc0 <strdup+0xc>)
 23ffbb6:	4601      	mov	r1, r0
 23ffbb8:	6818      	ldr	r0, [r3, #0]
 23ffbba:	f000 b803 	b.w	23ffbc4 <_strdup_r>
 23ffbbe:	bf00      	nop
 23ffbc0:	1007ad14 	.word	0x1007ad14

023ffbc4 <_strdup_r>:
 23ffbc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ffbc6:	4604      	mov	r4, r0
 23ffbc8:	4608      	mov	r0, r1
 23ffbca:	460d      	mov	r5, r1
 23ffbcc:	f7fd ff7a 	bl	23fdac4 <strlen>
 23ffbd0:	1c42      	adds	r2, r0, #1
 23ffbd2:	4620      	mov	r0, r4
 23ffbd4:	4611      	mov	r1, r2
 23ffbd6:	9201      	str	r2, [sp, #4]
 23ffbd8:	f7fe fe1e 	bl	23fe818 <_malloc_r>
 23ffbdc:	4604      	mov	r4, r0
 23ffbde:	b118      	cbz	r0, 23ffbe8 <_strdup_r+0x24>
 23ffbe0:	9a01      	ldr	r2, [sp, #4]
 23ffbe2:	4629      	mov	r1, r5
 23ffbe4:	f7ff ffa3 	bl	23ffb2e <memcpy>
 23ffbe8:	4620      	mov	r0, r4
 23ffbea:	b003      	add	sp, #12
 23ffbec:	bd30      	pop	{r4, r5, pc}
	...

023ffbf0 <__register_exitproc>:
 23ffbf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ffbf4:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ffcb4 <__register_exitproc+0xc4>
 23ffbf8:	4606      	mov	r6, r0
 23ffbfa:	461f      	mov	r7, r3
 23ffbfc:	460d      	mov	r5, r1
 23ffbfe:	f8d8 0000 	ldr.w	r0, [r8]
 23ffc02:	4691      	mov	r9, r2
 23ffc04:	f000 f858 	bl	23ffcb8 <__retarget_lock_acquire_recursive>
 23ffc08:	4b26      	ldr	r3, [pc, #152]	; (23ffca4 <__register_exitproc+0xb4>)
 23ffc0a:	681c      	ldr	r4, [r3, #0]
 23ffc0c:	b934      	cbnz	r4, 23ffc1c <__register_exitproc+0x2c>
 23ffc0e:	4c26      	ldr	r4, [pc, #152]	; (23ffca8 <__register_exitproc+0xb8>)
 23ffc10:	601c      	str	r4, [r3, #0]
 23ffc12:	4b26      	ldr	r3, [pc, #152]	; (23ffcac <__register_exitproc+0xbc>)
 23ffc14:	b113      	cbz	r3, 23ffc1c <__register_exitproc+0x2c>
 23ffc16:	681b      	ldr	r3, [r3, #0]
 23ffc18:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ffc1c:	6863      	ldr	r3, [r4, #4]
 23ffc1e:	2b1f      	cmp	r3, #31
 23ffc20:	dd07      	ble.n	23ffc32 <__register_exitproc+0x42>
 23ffc22:	f8d8 0000 	ldr.w	r0, [r8]
 23ffc26:	f000 f849 	bl	23ffcbc <__retarget_lock_release_recursive>
 23ffc2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ffc2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ffc32:	b35e      	cbz	r6, 23ffc8c <__register_exitproc+0x9c>
 23ffc34:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ffc38:	b988      	cbnz	r0, 23ffc5e <__register_exitproc+0x6e>
 23ffc3a:	4b1d      	ldr	r3, [pc, #116]	; (23ffcb0 <__register_exitproc+0xc0>)
 23ffc3c:	b923      	cbnz	r3, 23ffc48 <__register_exitproc+0x58>
 23ffc3e:	f8d8 0000 	ldr.w	r0, [r8]
 23ffc42:	f000 f83a 	bl	23ffcba <__retarget_lock_release>
 23ffc46:	e7f0      	b.n	23ffc2a <__register_exitproc+0x3a>
 23ffc48:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ffc4c:	f7fe fd9e 	bl	23fe78c <malloc>
 23ffc50:	2800      	cmp	r0, #0
 23ffc52:	d0f4      	beq.n	23ffc3e <__register_exitproc+0x4e>
 23ffc54:	2300      	movs	r3, #0
 23ffc56:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ffc5a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ffc5e:	6863      	ldr	r3, [r4, #4]
 23ffc60:	2201      	movs	r2, #1
 23ffc62:	2e02      	cmp	r6, #2
 23ffc64:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ffc68:	fa02 f203 	lsl.w	r2, r2, r3
 23ffc6c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ffc70:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ffc74:	ea43 0302 	orr.w	r3, r3, r2
 23ffc78:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ffc7c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ffc80:	bf02      	ittt	eq
 23ffc82:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ffc86:	4313      	orreq	r3, r2
 23ffc88:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ffc8c:	6863      	ldr	r3, [r4, #4]
 23ffc8e:	f8d8 0000 	ldr.w	r0, [r8]
 23ffc92:	1c5a      	adds	r2, r3, #1
 23ffc94:	3302      	adds	r3, #2
 23ffc96:	6062      	str	r2, [r4, #4]
 23ffc98:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ffc9c:	f000 f80e 	bl	23ffcbc <__retarget_lock_release_recursive>
 23ffca0:	2000      	movs	r0, #0
 23ffca2:	e7c4      	b.n	23ffc2e <__register_exitproc+0x3e>
 23ffca4:	1007afe0 	.word	0x1007afe0
 23ffca8:	1007af54 	.word	0x1007af54
 23ffcac:	00000000 	.word	0x00000000
 23ffcb0:	023fe78d 	.word	0x023fe78d
 23ffcb4:	1007ad78 	.word	0x1007ad78

023ffcb8 <__retarget_lock_acquire_recursive>:
 23ffcb8:	4770      	bx	lr

023ffcba <__retarget_lock_release>:
 23ffcba:	4770      	bx	lr

023ffcbc <__retarget_lock_release_recursive>:
 23ffcbc:	4770      	bx	lr
	...

023ffcc0 <dynalib_user>:
 23ffcc0:	dad5 023f dafd 023f db01 023f 0000 0000     ..?...?...?.....
 23ffcd0:	0030 0031 0032 0033 6157 6574 0072 7553     0.1.2.3.Water.Su
 23ffce0:	6c6e 6769 7468 2000 6953 676e 656c 5220     nlight. Single R
 23ffcf0:	6165 0064 4120 4743 2000 0025 5655 3d20     ead. ACG. %.UV =
 23ffd00:	0020 6d4e 666a 3471 5a35 574d 5341 6477      .Nmjfq45ZMWASwd
 23ffd10:	3644 5849 5145 784d 7831 7830 346a 5968     D6IXEQMx1x0xj4hY
 23ffd20:	4376 7b00 7422 3a22 2522 2273 222c 656e     vC.{"t":"%s","ne
 23ffd30:	5f77 7573 5f6e 696c 6867 5f74 656c 6576     w_sun_light_leve
 23ffd40:	226c 253a 2c69 6e22 7765 735f 696f 5f6c     l":%i,"new_soil_
 23ffd50:	656c 6576 226c 253a 2c69 7322 6e75 755f     level":%i,"sun_u
 23ffd60:	7070 7265 3a22 6925 222c 7573 5f6e 6f6c     pper":%i,"sun_lo
 23ffd70:	6577 2272 253a 2c69 7722 7461 7265 755f     wer":%i,"water_u
 23ffd80:	7070 7265 3a22 6925 222c 6177 6574 5f72     pper":%i,"water_
 23ffd90:	6f6c 6577 2272 253a 2c69 4822 4f32 455f     lower":%i,"H2O_E
 23ffda0:	7272 726f 3a22 6925 222c 5655 455f 7272     rror":%i,"UV_Err
 23ffdb0:	726f 3a22 6925 007d 6553 646e 735f 616d     or":%i}.Send_sma
 23ffdc0:	7472 6f70 5f74 6164 6174 0000               rtpot_data..

023ffdcc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffdd4:	e925 023f e92b 023f e969 023f e939 023f     %.?.+.?.i.?.9.?.
 23ffde4:	e927 023f                                   '.?.

023ffde8 <_ZTVN5spark13EthernetClassE>:
	...
 23ffdf0:	eefb 023f eef1 023f eee7 023f eedd 023f     ..?...?...?...?.
 23ffe00:	eed1 023f eec5 023f f155 023f f15d 023f     ..?...?.U.?.].?.
 23ffe10:	eeb9 023f eeb1 023f eea7 023f ee9d 023f     ..?...?...?...?.
 23ffe20:	f18d 023f                                   ..?.

023ffe24 <_ZTV7TwoWire>:
	...
 23ffe2c:	ef19 023f ef63 023f ef3b 023f ef1b 023f     ..?.c.?.;.?...?.
 23ffe3c:	ef43 023f ef4b 023f ef53 023f ef5b 023f     C.?.K.?.S.?.[.?.

023ffe4c <_ZTV9IPAddress>:
	...
 23ffe54:	f025 023f f015 023f f017 023f 7061 0070     %.?...?...?.app.

023ffe64 <_ZTVN5spark12NetworkClassE>:
	...
 23ffe6c:	f115 023f f11f 023f f129 023f f133 023f     ..?...?.).?.3.?.
 23ffe7c:	f13d 023f f149 023f f155 023f f15d 023f     =.?.I.?.U.?.].?.
 23ffe8c:	f165 023f f171 023f f179 023f f183 023f     e.?.q.?.y.?...?.
 23ffe9c:	f18d 023f 5925 252d 2d6d 6425 2554 3a48     ..?.%Y-%m-%dT%H:
 23ffeac:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

023ffebc <_ZTV11USARTSerial>:
	...
 23ffec4:	f4b1 023f f51d 023f f4f5 023f f279 023f     ..?...?...?.y.?.
 23ffed4:	f4c5 023f f4e1 023f f4d3 023f f4ef 023f     ..?...?...?...?.
 23ffee4:	f4b3 023f f4b7 023f                         ..?...?.

023ffeec <_ZTV9USBSerial>:
	...
 23ffef4:	f561 023f f5c9 023f f59f 023f f279 023f     a.?...?...?.y.?.
 23fff04:	f591 023f f563 023f f573 023f f5c3 023f     ..?.c.?.s.?...?.
 23fff14:	f583 023f f55b 023f                         ..?.[.?.

023fff1c <_ZTVN5spark9WiFiClassE>:
	...
 23fff24:	f6b7 023f f6ad 023f f6a3 023f f659 023f     ..?...?...?.Y.?.
 23fff34:	f697 023f f68b 023f f155 023f f15d 023f     ..?...?.U.?.].?.
 23fff44:	f67f 023f f677 023f f66d 023f f663 023f     ..?.w.?.m.?.c.?.
 23fff54:	f18d 023f                                   ..?.

023fff58 <_ZSt7nothrow>:
 23fff58:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23fff68:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 23fff78:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 23fff88:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 23fff98:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 23fffa8:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 23fffb8:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

023fffc9 <link_const_data_end>:
 23fffc9:	00          	.byte	0x00
	...

023fffcc <link_constructors_location>:
 23fffcc:	023fe03d 	.word	0x023fe03d
 23fffd0:	023fe915 	.word	0x023fe915
 23fffd4:	023fef05 	.word	0x023fef05
 23fffd8:	023ff105 	.word	0x023ff105
 23fffdc:	023ff265 	.word	0x023ff265
 23fffe0:	023ff341 	.word	0x023ff341
 23fffe4:	023ff479 	.word	0x023ff479
 23fffe8:	023ff49d 	.word	0x023ff49d
 23fffec:	023ff6c1 	.word	0x023ff6c1
