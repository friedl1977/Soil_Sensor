
/Users/friedl/Desktop/Projects/Soil_Sensor/target/4.1.0/argon/Soil_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002670  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b6690  000b6690  00006690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b66b4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e5f4  000b66b8  0001e5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000190  2003e660  2003e660  0002e660  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000b6724  000b6724  00026724  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b674c  000b674c  0002674c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00106edb  00000000  00000000  00026750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000114f4  00000000  00000000  0012d62b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000341b1  00000000  00000000  0013eb1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002730  00000000  00000000  00172cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000094e0  00000000  00000000  00175400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038bad  00000000  00000000  0017e8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003a9b9  00000000  00000000  001b748d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013175c  00000000  00000000  001f1e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00006f10  00000000  00000000  003235a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f002 f923 	bl	b627c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f002 f92b 	bl	b6298 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e5f4 	.word	0x2003e5f4
   b404c:	000b66b8 	.word	0x000b66b8
   b4050:	2003e660 	.word	0x2003e660
   b4054:	2003e660 	.word	0x2003e660
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f001 faf7 	bl	b5654 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b666c 	.word	0x000b666c
   b4080:	000b6690 	.word	0x000b6690

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b814 	b.w	b40b0 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f849 	bl	b4120 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f001 ba97 	b.w	b55c4 <_post_loop>

000b4096 <_Znaj>:
   b4096:	f000 bdcb 	b.w	b4c30 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bdd1 	b.w	b4c40 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr
	...

000b40b0 <setup>:
#if defined I2CMODE
DFRobot_LTR390UV ltr390(/*addr = */LTR390UV_DEVICE_ADDR, /*pWire = */&Wire);
#endif

void setup()
{
   b40b0:	b538      	push	{r3, r4, r5, lr}
#if defined(ARDUINO_AVR_UNO)||defined(ESP8266)
  mySerial.begin(9600);
#elif defined(ESP32)
  Serial1.begin(9600, SERIAL_8N1, /*rx =*/D3, /*tx =*/D2);
#else
  Serial1.begin(9600);
   b40b2:	f001 fbb3 	bl	b581c <_Z22__fetch_global_Serial1v>
   b40b6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40ba:	f001 f99b 	bl	b53f4 <_ZN11USARTSerial5beginEm>
#endif
#endif
  Serial.begin(115200);
   b40be:	f001 f9fb 	bl	b54b8 <_Z16_fetch_usbserialv>
   b40c2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b40c6:	f001 f9eb 	bl	b54a0 <_ZN9USBSerial5beginEl>
  
  while(ltr390.begin() != 0){
    Serial.println(" Sensor initialize failed!!");
   b40ca:	4d12      	ldr	r5, [pc, #72]	; (b4114 <setup+0x64>)
  while(ltr390.begin() != 0){
   b40cc:	4812      	ldr	r0, [pc, #72]	; (b4118 <setup+0x68>)
   b40ce:	f000 f95c 	bl	b438a <_ZN16DFRobot_LTR390UV5beginEv>
   b40d2:	4604      	mov	r4, r0
   b40d4:	b148      	cbz	r0, b40ea <setup+0x3a>
    Serial.println(" Sensor initialize failed!!");
   b40d6:	f001 f9ef 	bl	b54b8 <_Z16_fetch_usbserialv>
   b40da:	4629      	mov	r1, r5
   b40dc:	f001 f807 	bl	b50ee <_ZN5Print7printlnEPKc>
    delay(1000);
   b40e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b40e4:	f000 fdc4 	bl	b4c70 <delay>
  while(ltr390.begin() != 0){
   b40e8:	e7f0      	b.n	b40cc <setup+0x1c>
  }
  Serial.println(" Sensor  initialize success!!");
   b40ea:	f001 f9e5 	bl	b54b8 <_Z16_fetch_usbserialv>
   b40ee:	490b      	ldr	r1, [pc, #44]	; (b411c <setup+0x6c>)
   b40f0:	f000 fffd 	bl	b50ee <_ZN5Print7printlnEPKc>
   *  e18bit 18-bit data     e100ms  acquisition time 100ms 
   *  e17bit 17-bit data     e200ms  acquisition time 200ms 
   *  e16bit 16-bit data     e500ms  acquisition time 500ms 
   *  e13bit 13-bit data     e1000ms acquisition time 1000ms 
   */
  ltr390.setALSOrUVSMeasRate(ltr390.e18bit,ltr390.e100ms);
   b40f4:	4808      	ldr	r0, [pc, #32]	; (b4118 <setup+0x68>)
   b40f6:	2202      	movs	r2, #2
   b40f8:	2120      	movs	r1, #32
   b40fa:	f000 f9a2 	bl	b4442 <_ZN16DFRobot_LTR390UV19setALSOrUVSMeasRateENS_11eResolutionENS_16eMeasurementRateE>
   *        eGain6 6x
   *        eGain9 9x
   *        eGain18 18x
   * 
   */
  ltr390.setALSOrUVSGain(ltr390.eGain1);
   b40fe:	4621      	mov	r1, r4
   b4100:	4805      	ldr	r0, [pc, #20]	; (b4118 <setup+0x68>)
   b4102:	f000 f9b1 	bl	b4468 <_ZN16DFRobot_LTR390UV15setALSOrUVSGainENS_10eGainRangeE>
  ltr390.setMode(ltr390.eALSMode);//Set ambient light mode 
  //ltr390.setMode(ltr390.eUVSMode);//Set UV mode 
}
   b4106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ltr390.setMode(ltr390.eALSMode);//Set ambient light mode 
   b410a:	4803      	ldr	r0, [pc, #12]	; (b4118 <setup+0x68>)
   b410c:	2102      	movs	r1, #2
   b410e:	f000 b989 	b.w	b4424 <_ZN16DFRobot_LTR390UV7setModeENS_8eModel_tE>
   b4112:	bf00      	nop
   b4114:	000b63f4 	.word	0x000b63f4
   b4118:	2003e660 	.word	0x2003e660
   b411c:	000b6410 	.word	0x000b6410

000b4120 <loop>:
void loop()
{
   b4120:	b573      	push	{r0, r1, r4, r5, r6, lr}
  float als = 0;
  uint32_t data = 0;
  data = ltr390.readOriginalData();//Get raw data of ambient light or UV light, determined by the set mode
   b4122:	4e18      	ldr	r6, [pc, #96]	; (b4184 <loop+0x64>)
   b4124:	4630      	mov	r0, r6
   b4126:	f000 f8a6 	bl	b4276 <_ZN16DFRobot_LTR390UV16readOriginalDataEv>
   b412a:	4605      	mov	r5, r0
  Serial.print("data:");
   b412c:	f001 f9c4 	bl	b54b8 <_Z16_fetch_usbserialv>
   b4130:	4915      	ldr	r1, [pc, #84]	; (b4188 <loop+0x68>)
   b4132:	f000 ffc9 	bl	b50c8 <_ZN5Print5printEPKc>
  Serial.println(data);
   b4136:	f001 f9bf 	bl	b54b8 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b413a:	220a      	movs	r2, #10
   b413c:	4629      	mov	r1, r5
   b413e:	4604      	mov	r4, r0
   b4140:	f000 ffdf 	bl	b5102 <_ZN5Print11printNumberEmh>
        n += println();
   b4144:	4620      	mov	r0, r4
   b4146:	f000 ffc6 	bl	b50d6 <_ZN5Print7printlnEv>
  als = ltr390.readALSTransformData();//Get data converted from ambient light intensity, which can only be used in ambient light mode
   b414a:	4630      	mov	r0, r6
   b414c:	f000 f8bc 	bl	b42c8 <_ZN16DFRobot_LTR390UV20readALSTransformDataEv>
   b4150:	ed8d 0a01 	vstr	s0, [sp, #4]
  Serial.print("ALS:");
   b4154:	f001 f9b0 	bl	b54b8 <_Z16_fetch_usbserialv>
   b4158:	490c      	ldr	r1, [pc, #48]	; (b418c <loop+0x6c>)
   b415a:	f000 ffb5 	bl	b50c8 <_ZN5Print5printEPKc>
  Serial.print(als);
   b415e:	f001 f9ab 	bl	b54b8 <_Z16_fetch_usbserialv>
   b4162:	ed9d 0a01 	vldr	s0, [sp, #4]
   b4166:	2102      	movs	r1, #2
   b4168:	f001 f8b2 	bl	b52d0 <_ZN5Print5printEfi>
  Serial.println("Lux");
   b416c:	f001 f9a4 	bl	b54b8 <_Z16_fetch_usbserialv>
   b4170:	4907      	ldr	r1, [pc, #28]	; (b4190 <loop+0x70>)
   b4172:	f000 ffbc 	bl	b50ee <_ZN5Print7printlnEPKc>
  delay(100);
   b4176:	2064      	movs	r0, #100	; 0x64
}
   b4178:	b002      	add	sp, #8
   b417a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  delay(100);
   b417e:	f000 bd77 	b.w	b4c70 <delay>
   b4182:	bf00      	nop
   b4184:	2003e660 	.word	0x2003e660
   b4188:	000b642e 	.word	0x000b642e
   b418c:	000b6434 	.word	0x000b6434
   b4190:	000b6439 	.word	0x000b6439

000b4194 <_GLOBAL__sub_I_ltr390>:
}
   b4194:	b508      	push	{r3, lr}
  DFRobot_LTR390UV ltr390(/*addr =*/LTR390UV_DEVICE_ADDR, /*s =*/&Serial1);
   b4196:	f001 fb41 	bl	b581c <_Z22__fetch_global_Serial1v>
}
   b419a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  DFRobot_LTR390UV ltr390(/*addr =*/LTR390UV_DEVICE_ADDR, /*s =*/&Serial1);
   b419e:	4602      	mov	r2, r0
   b41a0:	211c      	movs	r1, #28
   b41a2:	4801      	ldr	r0, [pc, #4]	; (b41a8 <_GLOBAL__sub_I_ltr390+0x14>)
   b41a4:	f000 b802 	b.w	b41ac <_ZN16DFRobot_LTR390UVC1EhP6Stream>
   b41a8:	2003e660 	.word	0x2003e660

000b41ac <_ZN16DFRobot_LTR390UVC1EhP6Stream>:
{
  _pWire = pWire;
  _addr = addr;
};

DFRobot_LTR390UV::DFRobot_LTR390UV(uint8_t addr, Stream *s):DFRobot_RTU(s)
   b41ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b41b0:	4c11      	ldr	r4, [pc, #68]	; (b41f8 <_ZN16DFRobot_LTR390UVC1EhP6Stream+0x4c>)
   b41b2:	4606      	mov	r6, r0
   b41b4:	4688      	mov	r8, r1
   b41b6:	4611      	mov	r1, r2
   b41b8:	4617      	mov	r7, r2
   b41ba:	f000 f965 	bl	b4488 <_ZN11DFRobot_RTUC1EP6Stream>
   b41be:	6823      	ldr	r3, [r4, #0]
   b41c0:	f8c6 3016 	str.w	r3, [r6, #22]
   b41c4:	3408      	adds	r4, #8
   b41c6:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   b41ca:	76b3      	strb	r3, [r6, #26]
   b41cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b41ce:	f04f 0c00 	mov.w	ip, #0
   b41d2:	f106 0520 	add.w	r5, r6, #32
   b41d6:	f8c6 c00c 	str.w	ip, [r6, #12]
   b41da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b41dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b41de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b41e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b41e4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   b41e8:	f8a6 c050 	strh.w	ip, [r6, #80]	; 0x50
{
  _s = s;
   b41ec:	6137      	str	r7, [r6, #16]
  _addr = addr;
   b41ee:	f886 8014 	strb.w	r8, [r6, #20]
}
   b41f2:	4630      	mov	r0, r6
   b41f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b41f8:	000b6440 	.word	0x000b6440

000b41fc <_ZN16DFRobot_LTR390UV7readRegEtPvhh>:
  }
  return false;
}

uint8_t DFRobot_LTR390UV::readReg(uint16_t reg, void *pBuf, uint8_t size,uint8_t state)
{
   b41fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4200:	4605      	mov	r5, r0
   b4202:	460f      	mov	r7, r1
   b4204:	461e      	mov	r6, r3
  uint8_t* _pBuf = (uint8_t*)pBuf;
  uint8_t _reg  = 0;
    if(pBuf == NULL){
   b4206:	4614      	mov	r4, r2
   b4208:	2a00      	cmp	r2, #0
   b420a:	d030      	beq.n	b426e <_ZN16DFRobot_LTR390UV7readRegEtPvhh+0x72>
      DBG("data error");
      return 0;
    }
  if(_pWire){
   b420c:	68c3      	ldr	r3, [r0, #12]
    if(state == 1)
      _reg = reg+5;
    _pWire->beginTransmission(_addr);
   b420e:	7d01      	ldrb	r1, [r0, #20]
  if(_pWire){
   b4210:	b333      	cbz	r3, b4260 <_ZN16DFRobot_LTR390UV7readRegEtPvhh+0x64>
    _pWire->beginTransmission(_addr);
   b4212:	4618      	mov	r0, r3
   b4214:	f000 fdf2 	bl	b4dfc <_ZN7TwoWire17beginTransmissionEh>
    _pWire->write(reg);
   b4218:	68e8      	ldr	r0, [r5, #12]
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b421a:	6803      	ldr	r3, [r0, #0]
   b421c:	b2f9      	uxtb	r1, r7
   b421e:	689b      	ldr	r3, [r3, #8]
   b4220:	4798      	blx	r3
    _pWire->endTransmission();
   b4222:	68e8      	ldr	r0, [r5, #12]
   b4224:	f000 fdf2 	bl	b4e0c <_ZN7TwoWire15endTransmissionEv>
    _pWire->requestFrom(_addr, size);
   b4228:	7d29      	ldrb	r1, [r5, #20]
   b422a:	68e8      	ldr	r0, [r5, #12]
   b422c:	4632      	mov	r2, r6
   b422e:	f000 fde2 	bl	b4df6 <_ZN7TwoWire11requestFromEhj>
    for(uint8_t i = 0; i < size; i++)
   b4232:	4627      	mov	r7, r4
   b4234:	eb06 0804 	add.w	r8, r6, r4
   b4238:	4547      	cmp	r7, r8
   b423a:	d006      	beq.n	b424a <_ZN16DFRobot_LTR390UV7readRegEtPvhh+0x4e>
      _pBuf[i] = _pWire->read();
   b423c:	68e8      	ldr	r0, [r5, #12]
   b423e:	6803      	ldr	r3, [r0, #0]
   b4240:	695b      	ldr	r3, [r3, #20]
   b4242:	4798      	blx	r3
   b4244:	f807 0b01 	strb.w	r0, [r7], #1
    for(uint8_t i = 0; i < size; i++)
   b4248:	e7f6      	b.n	b4238 <_ZN16DFRobot_LTR390UV7readRegEtPvhh+0x3c>
    for(uint8_t i = 0; i < size;){
   b424a:	2300      	movs	r3, #0
   b424c:	42b3      	cmp	r3, r6
   b424e:	d20f      	bcs.n	b4270 <_ZN16DFRobot_LTR390UV7readRegEtPvhh+0x74>
      uint8_t temp = _pBuf[i];
      _pBuf[i] = _pBuf[i+1];
   b4250:	1c5a      	adds	r2, r3, #1
      uint8_t temp = _pBuf[i];
   b4252:	5ce1      	ldrb	r1, [r4, r3]
      _pBuf[i] = _pBuf[i+1];
   b4254:	5ca0      	ldrb	r0, [r4, r2]
   b4256:	54e0      	strb	r0, [r4, r3]
      _pBuf[i+1] = temp;
      i+=2;
   b4258:	3302      	adds	r3, #2
      _pBuf[i+1] = temp;
   b425a:	54a1      	strb	r1, [r4, r2]
      i+=2;
   b425c:	b2db      	uxtb	r3, r3
    for(uint8_t i = 0; i < size;){
   b425e:	e7f5      	b.n	b424c <_ZN16DFRobot_LTR390UV7readRegEtPvhh+0x50>
    }
    return size;
  }else{
    return readInputRegister(_addr, reg, _pBuf, size);
   b4260:	9606      	str	r6, [sp, #24]
   b4262:	4613      	mov	r3, r2
   b4264:	463a      	mov	r2, r7
  }
}
   b4266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return readInputRegister(_addr, reg, _pBuf, size);
   b426a:	f000 ba95 	b.w	b4798 <_ZN11DFRobot_RTU17readInputRegisterEhtPvt>
      return 0;
   b426e:	4616      	mov	r6, r2
}
   b4270:	4630      	mov	r0, r6
   b4272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4276 <_ZN16DFRobot_LTR390UV16readOriginalDataEv>:
{
   b4276:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(_mode == eModel_t::eALSMode){
   b4278:	7d43      	ldrb	r3, [r0, #21]
   b427a:	2b02      	cmp	r3, #2
   b427c:	f04f 0300 	mov.w	r3, #0
    readReg(LTR390UV_INPUTREG_ALS_DATA_LOW,buffer,4,0);
   b4280:	9300      	str	r3, [sp, #0]
   b4282:	aa03      	add	r2, sp, #12
   b4284:	f04f 0304 	mov.w	r3, #4
   b4288:	bf0c      	ite	eq
   b428a:	2107      	moveq	r1, #7
    readReg(LTR390UV_INPUTREG_UVS_DATA_LOW,buffer,4,0);
   b428c:	2109      	movne	r1, #9
   b428e:	f7ff ffb5 	bl	b41fc <_ZN16DFRobot_LTR390UV7readRegEtPvhh>
    originalData = (uint32_t)buffer[2]<<24|(uint32_t)buffer[3]<<16|(uint16_t)buffer[0]<<8|buffer[1];
   b4292:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b4296:	f89d 200e 	ldrb.w	r2, [sp, #14]
   b429a:	041b      	lsls	r3, r3, #16
   b429c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   b42a0:	f89d 200d 	ldrb.w	r2, [sp, #13]
   b42a4:	4313      	orrs	r3, r2
   b42a6:	f89d 200c 	ldrb.w	r2, [sp, #12]
   b42aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    data = originalData;
   b42ae:	ee07 3a90 	vmov	s15, r3
   b42b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
   b42b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   b42ba:	ee17 0a90 	vmov	r0, s15
   b42be:	b005      	add	sp, #20
   b42c0:	f85d fb04 	ldr.w	pc, [sp], #4
   b42c4:	0000      	movs	r0, r0
	...

000b42c8 <_ZN16DFRobot_LTR390UV20readALSTransformDataEv>:
{
   b42c8:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
  if(_mode == eModel_t::eALSMode){
   b42ca:	7d43      	ldrb	r3, [r0, #21]
   b42cc:	2b02      	cmp	r3, #2
{
   b42ce:	4604      	mov	r4, r0
  if(_mode == eModel_t::eALSMode){
   b42d0:	d137      	bne.n	b4342 <_ZN16DFRobot_LTR390UV20readALSTransformDataEv+0x7a>
    readReg(LTR390UV_INPUTREG_ALS_DATA_LOW,buffer,4,0);
   b42d2:	2300      	movs	r3, #0
   b42d4:	aa03      	add	r2, sp, #12
   b42d6:	9300      	str	r3, [sp, #0]
   b42d8:	2107      	movs	r1, #7
   b42da:	2304      	movs	r3, #4
   b42dc:	f7ff ff8e 	bl	b41fc <_ZN16DFRobot_LTR390UV7readRegEtPvhh>
    originalData = (uint32_t)buffer[2]<<24|(uint32_t)buffer[3]<<16|(uint16_t)buffer[0]<<8|buffer[1];
   b42e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b42e4:	f89d 000e 	ldrb.w	r0, [sp, #14]
   b42e8:	041b      	lsls	r3, r3, #16
   b42ea:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   b42ee:	f89d 000d 	ldrb.w	r0, [sp, #13]
   b42f2:	4303      	orrs	r3, r0
   b42f4:	f89d 000c 	ldrb.w	r0, [sp, #12]
    data = (0.6*originalData)/(a_gain[gain]*a_int[resolution]);
   b42f8:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   b42fc:	f001 fbf6 	bl	b5aec <__aeabi_ui2d>
   b4300:	a312      	add	r3, pc, #72	; (adr r3, b434c <_ZN16DFRobot_LTR390UV20readALSTransformDataEv+0x84>)
   b4302:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4306:	f001 fc6b 	bl	b5be0 <__aeabi_dmul>
   b430a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   b430e:	4423      	add	r3, r4
   b4310:	4606      	mov	r6, r0
   b4312:	7d98      	ldrb	r0, [r3, #22]
   b4314:	460f      	mov	r7, r1
   b4316:	f001 fbf9 	bl	b5b0c <__aeabi_i2d>
   b431a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
   b431e:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   b4322:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   b4326:	f001 fc5b 	bl	b5be0 <__aeabi_dmul>
   b432a:	4602      	mov	r2, r0
   b432c:	460b      	mov	r3, r1
   b432e:	4630      	mov	r0, r6
   b4330:	4639      	mov	r1, r7
   b4332:	f001 fd7f 	bl	b5e34 <__aeabi_ddiv>
   b4336:	f001 ff4b 	bl	b61d0 <__aeabi_d2f>
   b433a:	ee00 0a10 	vmov	s0, r0
}
   b433e:	b004      	add	sp, #16
   b4340:	bdd0      	pop	{r4, r6, r7, pc}
  float data=0.0;
   b4342:	ed9f 0a01 	vldr	s0, [pc, #4]	; b4348 <_ZN16DFRobot_LTR390UV20readALSTransformDataEv+0x80>
  return data;
   b4346:	e7fa      	b.n	b433e <_ZN16DFRobot_LTR390UV20readALSTransformDataEv+0x76>
   b4348:	00000000 	.word	0x00000000
   b434c:	33333333 	.word	0x33333333
   b4350:	3fe33333 	.word	0x3fe33333

000b4354 <_ZN16DFRobot_LTR390UV19detectDeviceAddressEh>:
{
   b4354:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(_pWire){
   b4356:	68c3      	ldr	r3, [r0, #12]
{
   b4358:	460c      	mov	r4, r1
  if(_pWire){
   b435a:	b183      	cbz	r3, b437e <_ZN16DFRobot_LTR390UV19detectDeviceAddressEh+0x2a>
  readReg(LTR390UV_INPUTREG_ADDR, buf, 2,0);
   b435c:	2300      	movs	r3, #0
   b435e:	9300      	str	r3, [sp, #0]
   b4360:	2302      	movs	r3, #2
   b4362:	aa03      	add	r2, sp, #12
   b4364:	4619      	mov	r1, r3
   b4366:	f7ff ff49 	bl	b41fc <_ZN16DFRobot_LTR390UV7readRegEtPvhh>
  if(addr == ((buf[0] << 8| buf[1]) & 0xFF))
   b436a:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   b436e:	ba40      	rev16	r0, r0
   b4370:	b2c0      	uxtb	r0, r0
    return true;
   b4372:	4284      	cmp	r4, r0
    if((ret & 0xFF) == addr)
   b4374:	bf14      	ite	ne
   b4376:	2000      	movne	r0, #0
   b4378:	2001      	moveq	r0, #1
}
   b437a:	b004      	add	sp, #16
   b437c:	bd10      	pop	{r4, pc}
    uint16_t ret = readInputRegister(addr, LTR390UV_INPUTREG_ADDR);
   b437e:	2202      	movs	r2, #2
   b4380:	f000 f9d8 	bl	b4734 <_ZN11DFRobot_RTU17readInputRegisterEht>
    if((ret & 0xFF) == addr)
   b4384:	b2c0      	uxtb	r0, r0
   b4386:	42a0      	cmp	r0, r4
   b4388:	e7f4      	b.n	b4374 <_ZN16DFRobot_LTR390UV19detectDeviceAddressEh+0x20>

000b438a <_ZN16DFRobot_LTR390UV5beginEv>:
{
   b438a:	b510      	push	{r4, lr}
   b438c:	4604      	mov	r4, r0
  delay(500);
   b438e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4392:	f000 fc6d 	bl	b4c70 <delay>
  setTimeoutTimeMs(200);
   b4396:	4620      	mov	r0, r4
   b4398:	21c8      	movs	r1, #200	; 0xc8
   b439a:	f000 f87c 	bl	b4496 <_ZN11DFRobot_RTU16setTimeoutTimeMsEm>
  if(_pWire){
   b439e:	68e0      	ldr	r0, [r4, #12]
   b43a0:	b108      	cbz	r0, b43a6 <_ZN16DFRobot_LTR390UV5beginEv+0x1c>
    _pWire->begin();
   b43a2:	f000 fcf9 	bl	b4d98 <_ZN7TwoWire5beginEv>
  if(_addr > 0xF7){
   b43a6:	7d21      	ldrb	r1, [r4, #20]
  if(_addr != 0){
   b43a8:	b139      	cbz	r1, b43ba <_ZN16DFRobot_LTR390UV5beginEv+0x30>
    if(!detectDeviceAddress(_addr)){
   b43aa:	4620      	mov	r0, r4
   b43ac:	f7ff ffd2 	bl	b4354 <_ZN16DFRobot_LTR390UV19detectDeviceAddressEh>
   b43b0:	f080 0001 	eor.w	r0, r0, #1
   b43b4:	4240      	negs	r0, r0
   b43b6:	b240      	sxtb	r0, r0
}
   b43b8:	bd10      	pop	{r4, pc}
    return -1;
   b43ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b43be:	e7fb      	b.n	b43b8 <_ZN16DFRobot_LTR390UV5beginEv+0x2e>

000b43c0 <_ZN16DFRobot_LTR390UV8writeRegEhPvj>:
uint8_t DFRobot_LTR390UV::writeReg(uint8_t reg, void *pBuf, size_t size)
{
   b43c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b43c2:	461d      	mov	r5, r3
  uint8_t *_pBuf = (uint8_t*)pBuf;

  uint8_t ret = 0;
  if(_pWire){
   b43c4:	68c3      	ldr	r3, [r0, #12]
{
   b43c6:	460e      	mov	r6, r1
   b43c8:	4607      	mov	r7, r0
    uint8_t _reg = reg+5;
    _pWire->beginTransmission(_addr);
   b43ca:	7d01      	ldrb	r1, [r0, #20]
{
   b43cc:	4614      	mov	r4, r2
  if(_pWire){
   b43ce:	b313      	cbz	r3, b4416 <_ZN16DFRobot_LTR390UV8writeRegEhPvj+0x56>
    _pWire->beginTransmission(_addr);
   b43d0:	4618      	mov	r0, r3
   b43d2:	f000 fd13 	bl	b4dfc <_ZN7TwoWire17beginTransmissionEh>
    _pWire->write(_reg);
   b43d6:	68f8      	ldr	r0, [r7, #12]
   b43d8:	6803      	ldr	r3, [r0, #0]
    uint8_t _reg = reg+5;
   b43da:	1d71      	adds	r1, r6, #5
    _pWire->write(_reg);
   b43dc:	689b      	ldr	r3, [r3, #8]
   b43de:	b2c9      	uxtb	r1, r1
   b43e0:	4798      	blx	r3
    for(uint8_t i = 0; i < size;){
   b43e2:	2300      	movs	r3, #0
   b43e4:	42ab      	cmp	r3, r5
   b43e6:	d309      	bcc.n	b43fc <_ZN16DFRobot_LTR390UV8writeRegEhPvj+0x3c>
   b43e8:	4425      	add	r5, r4
      uint8_t temp = _pBuf[i];
      _pBuf[i] = _pBuf[i+1];
      _pBuf[i+1] = temp;
      i+=2;
    }
    for(size_t i = 0; i < size; i++){
   b43ea:	42ac      	cmp	r4, r5
      _pWire->write(_pBuf[i]);
   b43ec:	68f8      	ldr	r0, [r7, #12]
    for(size_t i = 0; i < size; i++){
   b43ee:	d00d      	beq.n	b440c <_ZN16DFRobot_LTR390UV8writeRegEhPvj+0x4c>
      _pWire->write(_pBuf[i]);
   b43f0:	6802      	ldr	r2, [r0, #0]
   b43f2:	f814 1b01 	ldrb.w	r1, [r4], #1
   b43f6:	6892      	ldr	r2, [r2, #8]
   b43f8:	4790      	blx	r2
    for(size_t i = 0; i < size; i++){
   b43fa:	e7f6      	b.n	b43ea <_ZN16DFRobot_LTR390UV8writeRegEhPvj+0x2a>
      _pBuf[i] = _pBuf[i+1];
   b43fc:	1c5a      	adds	r2, r3, #1
      uint8_t temp = _pBuf[i];
   b43fe:	5ce1      	ldrb	r1, [r4, r3]
      _pBuf[i] = _pBuf[i+1];
   b4400:	5ca0      	ldrb	r0, [r4, r2]
   b4402:	54e0      	strb	r0, [r4, r3]
      i+=2;
   b4404:	3302      	adds	r3, #2
      _pBuf[i+1] = temp;
   b4406:	54a1      	strb	r1, [r4, r2]
      i+=2;
   b4408:	b2db      	uxtb	r3, r3
    for(uint8_t i = 0; i < size;){
   b440a:	e7eb      	b.n	b43e4 <_ZN16DFRobot_LTR390UV8writeRegEhPvj+0x24>
    }
    _pWire->endTransmission();
   b440c:	f000 fcfe 	bl	b4e0c <_ZN7TwoWire15endTransmissionEv>
  uint8_t ret = 0;
   b4410:	2000      	movs	r0, #0
  }else{
    ret = writeHoldingRegister(_addr,reg,_pBuf,size);
  }
  return ret;
}
   b4412:	b003      	add	sp, #12
   b4414:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = writeHoldingRegister(_addr,reg,_pBuf,size);
   b4416:	b2ad      	uxth	r5, r5
   b4418:	4613      	mov	r3, r2
   b441a:	9500      	str	r5, [sp, #0]
   b441c:	4632      	mov	r2, r6
   b441e:	f000 f9f9 	bl	b4814 <_ZN11DFRobot_RTU20writeHoldingRegisterEhtPvt>
   b4422:	e7f6      	b.n	b4412 <_ZN16DFRobot_LTR390UV8writeRegEhPvj+0x52>

000b4424 <_ZN16DFRobot_LTR390UV7setModeENS_8eModel_tE>:
{
   b4424:	b507      	push	{r0, r1, r2, lr}
  _sendData[0] = 0;
   b4426:	2300      	movs	r3, #0
   b4428:	f88d 3004 	strb.w	r3, [sp, #4]
  _sendData[1] = mode;
   b442c:	f88d 1005 	strb.w	r1, [sp, #5]
  _mode = mode;
   b4430:	7541      	strb	r1, [r0, #21]
  writeReg(LTR390UV_HOLDINGREG_MAIN_CTRL,&_sendData,2);
   b4432:	2302      	movs	r3, #2
   b4434:	aa01      	add	r2, sp, #4
   b4436:	210e      	movs	r1, #14
   b4438:	f7ff ffc2 	bl	b43c0 <_ZN16DFRobot_LTR390UV8writeRegEhPvj>
}
   b443c:	b003      	add	sp, #12
   b443e:	f85d fb04 	ldr.w	pc, [sp], #4

000b4442 <_ZN16DFRobot_LTR390UV19setALSOrUVSMeasRateENS_11eResolutionENS_16eMeasurementRateE>:
{
   b4442:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = bit+time;
   b4444:	440a      	add	r2, r1
  resolution = (data&0xf0)>>4;
   b4446:	f3c2 1303 	ubfx	r3, r2, #4, #4
   b444a:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  _sendData[0] = 0;
   b444e:	2300      	movs	r3, #0
   b4450:	f88d 3004 	strb.w	r3, [sp, #4]
  _sendData[1] = data;
   b4454:	f88d 2005 	strb.w	r2, [sp, #5]
  writeReg(LTR390UV_HOLDINGREG_ALS_UVS_MEAS_RATE,&_sendData,2);
   b4458:	2302      	movs	r3, #2
   b445a:	aa01      	add	r2, sp, #4
   b445c:	210d      	movs	r1, #13
   b445e:	f7ff ffaf 	bl	b43c0 <_ZN16DFRobot_LTR390UV8writeRegEhPvj>
}
   b4462:	b003      	add	sp, #12
   b4464:	f85d fb04 	ldr.w	pc, [sp], #4

000b4468 <_ZN16DFRobot_LTR390UV15setALSOrUVSGainENS_10eGainRangeE>:
{ 
   b4468:	b507      	push	{r0, r1, r2, lr}
  _sendData[0] = 0;
   b446a:	2300      	movs	r3, #0
   b446c:	f88d 3004 	strb.w	r3, [sp, #4]
  _sendData[1] = data;
   b4470:	f88d 1005 	strb.w	r1, [sp, #5]
  gain = data;
   b4474:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
  writeReg(LTR390UV_HOLDINGREG_ALS_UVS_GAIN,&_sendData,2);
   b4478:	2302      	movs	r3, #2
   b447a:	aa01      	add	r2, sp, #4
   b447c:	2106      	movs	r1, #6
   b447e:	f7ff ff9f 	bl	b43c0 <_ZN16DFRobot_LTR390UV8writeRegEhPvj>
}
   b4482:	b003      	add	sp, #12
   b4484:	f85d fb04 	ldr.w	pc, [sp], #4

000b4488 <_ZN11DFRobot_RTUC1EP6Stream>:
    pinMode(_dePin,OUTPUT);
  }
}

DFRobot_RTU::DFRobot_RTU(Stream *s)
  :_timeout(100), _s(s),_dePin(-1){
   b4488:	2264      	movs	r2, #100	; 0x64
   b448a:	e9c0 2100 	strd	r2, r1, [r0]
   b448e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b4492:	6082      	str	r2, [r0, #8]
  if(_dePin>0){
    pinMode(_dePin,OUTPUT);
  }
}
   b4494:	4770      	bx	lr

000b4496 <_ZN11DFRobot_RTU16setTimeoutTimeMsEm>:
    pinMode(_dePin,OUTPUT);
  }
}

void DFRobot_RTU::setTimeoutTimeMs(uint32_t timeout){
  _timeout = timeout;
   b4496:	6001      	str	r1, [r0, #0]
}
   b4498:	4770      	bx	lr

000b449a <_ZN11DFRobot_RTU12calculateCRCEPhh>:
  return header;

}


uint16_t DFRobot_RTU::calculateCRC(uint8_t *data, uint8_t len){
   b449a:	b530      	push	{r4, r5, lr}
   b449c:	440a      	add	r2, r1
  uint16_t crc = 0xFFFF;
   b449e:	f64f 70ff 	movw	r0, #65535	; 0xffff
  for( uint8_t pos = 0; pos < len; pos++){
    crc ^= (uint16_t)data[ pos ];
    for(uint8_t i = 8; i != 0; i--){
      if((crc & 0x0001) != 0){
        crc >>= 1;
        crc ^= 0xA001;
   b44a2:	f24a 0401 	movw	r4, #40961	; 0xa001
  for( uint8_t pos = 0; pos < len; pos++){
   b44a6:	4291      	cmp	r1, r2
   b44a8:	d00e      	beq.n	b44c8 <_ZN11DFRobot_RTU12calculateCRCEPhh+0x2e>
    crc ^= (uint16_t)data[ pos ];
   b44aa:	f811 3b01 	ldrb.w	r3, [r1], #1
   b44ae:	4058      	eors	r0, r3
   b44b0:	2308      	movs	r3, #8
      if((crc & 0x0001) != 0){
   b44b2:	f000 0501 	and.w	r5, r0, #1
        crc >>= 1;
   b44b6:	0840      	lsrs	r0, r0, #1
      if((crc & 0x0001) != 0){
   b44b8:	b10d      	cbz	r5, b44be <_ZN11DFRobot_RTU12calculateCRCEPhh+0x24>
        crc ^= 0xA001;
   b44ba:	4060      	eors	r0, r4
   b44bc:	b280      	uxth	r0, r0
    for(uint8_t i = 8; i != 0; i--){
   b44be:	3b01      	subs	r3, #1
   b44c0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b44c4:	d1f5      	bne.n	b44b2 <_ZN11DFRobot_RTU12calculateCRCEPhh+0x18>
   b44c6:	e7ee      	b.n	b44a6 <_ZN11DFRobot_RTU12calculateCRCEPhh+0xc>
         crc >>= 1;
      }
    }
  }
  crc = ((crc & 0x00FF) << 8) | ((crc & 0xFF00) >> 8);
  return crc;
   b44c8:	ba40      	rev16	r0, r0
}
   b44ca:	b280      	uxth	r0, r0
   b44cc:	bd30      	pop	{r4, r5, pc}

000b44ce <_ZN11DFRobot_RTU6packedEhhPvt.part.0>:
DFRobot_RTU::pRtuPacketHeader_t DFRobot_RTU::packed(uint8_t id, uint8_t cmd, void *data, uint16_t size){
   b44ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b44d2:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
   b44d6:	9301      	str	r3, [sp, #4]
   b44d8:	4606      	mov	r6, r0
  if((header = (pRtuPacketHeader_t)malloc(sizeof(sRtuPacketHeader_t) + size)) == NULL){
   b44da:	1da8      	adds	r0, r5, #6
DFRobot_RTU::pRtuPacketHeader_t DFRobot_RTU::packed(uint8_t id, uint8_t cmd, void *data, uint16_t size){
   b44dc:	4689      	mov	r9, r1
   b44de:	4690      	mov	r8, r2
  if((header = (pRtuPacketHeader_t)malloc(sizeof(sRtuPacketHeader_t) + size)) == NULL){
   b44e0:	f000 fba6 	bl	b4c30 <malloc>
   b44e4:	4604      	mov	r4, r0
   b44e6:	b1a8      	cbz	r0, b4514 <_ZN11DFRobot_RTU6packedEhhPvt.part.0+0x46>
  header->len = sizeof(sRtuPacketHeader_t) + size - 2;
   b44e8:	1d2b      	adds	r3, r5, #4
   b44ea:	b29f      	uxth	r7, r3
   b44ec:	8003      	strh	r3, [r0, #0]
  memcpy(header->payload, data, size);
   b44ee:	462a      	mov	r2, r5
   b44f0:	9901      	ldr	r1, [sp, #4]
  header->id = id;
   b44f2:	f880 9002 	strb.w	r9, [r0, #2]
  header->cmd = cmd;
   b44f6:	f880 8003 	strb.w	r8, [r0, #3]
  memcpy(header->payload, data, size);
   b44fa:	3004      	adds	r0, #4
   b44fc:	f001 febe 	bl	b627c <memcpy>
  crc = calculateCRC((uint8_t *)&(header->id), (header->len) - 2);
   b4500:	1eba      	subs	r2, r7, #2
   b4502:	b2d2      	uxtb	r2, r2
   b4504:	1ca1      	adds	r1, r4, #2
   b4506:	4630      	mov	r0, r6
   b4508:	f7ff ffc7 	bl	b449a <_ZN11DFRobot_RTU12calculateCRCEPhh>
  header->payload[size] = (crc >> 8) & 0xFF;
   b450c:	4425      	add	r5, r4
   b450e:	0a03      	lsrs	r3, r0, #8
   b4510:	712b      	strb	r3, [r5, #4]
  header->payload[size + 1] = crc & 0xFF;
   b4512:	7168      	strb	r0, [r5, #5]
}
   b4514:	4620      	mov	r0, r4
   b4516:	b003      	add	sp, #12
   b4518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b451c <_ZN11DFRobot_RTU6packedEhhPvt>:
DFRobot_RTU::pRtuPacketHeader_t DFRobot_RTU::packed(uint8_t id, uint8_t cmd, void *data, uint16_t size){
   b451c:	b410      	push	{r4}
   b451e:	f8bd 4004 	ldrh.w	r4, [sp, #4]
  if((data == NULL) || (size == 0)) return NULL;
   b4522:	b12b      	cbz	r3, b4530 <_ZN11DFRobot_RTU6packedEhhPvt+0x14>
   b4524:	b124      	cbz	r4, b4530 <_ZN11DFRobot_RTU6packedEhhPvt+0x14>
   b4526:	9401      	str	r4, [sp, #4]
}
   b4528:	f85d 4b04 	ldr.w	r4, [sp], #4
   b452c:	f7ff bfcf 	b.w	b44ce <_ZN11DFRobot_RTU6packedEhhPvt.part.0>
   b4530:	2000      	movs	r0, #0
   b4532:	f85d 4b04 	ldr.w	r4, [sp], #4
   b4536:	4770      	bx	lr

000b4538 <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh>:
DFRobot_RTU::pRtuPacketHeader_t DFRobot_RTU::recvAndParsePackage(uint8_t id, uint8_t cmd, uint16_t data, uint8_t *error){
   b4538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b453c:	b085      	sub	sp, #20
  if(id > 0xF7) return NULL;
   b453e:	29f7      	cmp	r1, #247	; 0xf7
DFRobot_RTU::pRtuPacketHeader_t DFRobot_RTU::recvAndParsePackage(uint8_t id, uint8_t cmd, uint16_t data, uint8_t *error){
   b4540:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   b4542:	9201      	str	r2, [sp, #4]
   b4544:	4607      	mov	r7, r0
   b4546:	4689      	mov	r9, r1
   b4548:	469a      	mov	sl, r3
  if(id > 0xF7) return NULL;
   b454a:	d803      	bhi.n	b4554 <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh+0x1c>
  if(id == 0){
   b454c:	b921      	cbnz	r1, b4558 <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh+0x20>
    if (error != NULL) *error = 0;
   b454e:	2e00      	cmp	r6, #0
   b4550:	d037      	beq.n	b45c2 <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh+0x8a>
   b4552:	7031      	strb	r1, [r6, #0]
  if(id > 0xF7) return NULL;
   b4554:	2600      	movs	r6, #0
   b4556:	e034      	b.n	b45c2 <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh+0x8a>
  uint8_t head[4] = {0, 0, 0, 0};
   b4558:	2300      	movs	r3, #0
   b455a:	9303      	str	r3, [sp, #12]
      if(head[2] != (data & 0xFF)) {
   b455c:	fa5f f48a 	uxtb.w	r4, sl

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4560:	f000 f9c2 	bl	b48e8 <HAL_Timer_Get_Milli_Seconds>
  uint16_t remain, index = 0;
   b4564:	f04f 0b00 	mov.w	fp, #0
   b4568:	4680      	mov	r8, r0
  for(int i = 0; i < 4;){
   b456a:	465d      	mov	r5, fp
    if(_s->available()){
   b456c:	6878      	ldr	r0, [r7, #4]
   b456e:	6802      	ldr	r2, [r0, #0]
   b4570:	6912      	ldr	r2, [r2, #16]
   b4572:	4790      	blx	r2
   b4574:	b1b0      	cbz	r0, b45a4 <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh+0x6c>
      head[index++] = (uint8_t)_s->read();
   b4576:	6878      	ldr	r0, [r7, #4]
   b4578:	6802      	ldr	r2, [r0, #0]
   b457a:	6952      	ldr	r2, [r2, #20]
   b457c:	4790      	blx	r2
   b457e:	f10b 0501 	add.w	r5, fp, #1
   b4582:	ab04      	add	r3, sp, #16
   b4584:	b2ad      	uxth	r5, r5
   b4586:	445b      	add	r3, fp
      if((index == 1) && (head[0] != id)){
   b4588:	2d01      	cmp	r5, #1
      head[index++] = (uint8_t)_s->read();
   b458a:	f803 0c04 	strb.w	r0, [r3, #-4]
      if((index == 1) && (head[0] != id)){
   b458e:	d11c      	bne.n	b45ca <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh+0x92>
   b4590:	f89d 500c 	ldrb.w	r5, [sp, #12]
        index = 0;
   b4594:	eba5 0309 	sub.w	r3, r5, r9
   b4598:	425d      	negs	r5, r3
   b459a:	415d      	adcs	r5, r3
   b459c:	f000 f9a4 	bl	b48e8 <HAL_Timer_Get_Milli_Seconds>
   b45a0:	46ab      	mov	fp, r5
   b45a2:	4680      	mov	r8, r0
   b45a4:	f000 f9a0 	bl	b48e8 <HAL_Timer_Get_Milli_Seconds>
    if((millis() - time) > _timeout) {
   b45a8:	683a      	ldr	r2, [r7, #0]
   b45aa:	eba0 0008 	sub.w	r0, r0, r8
   b45ae:	4290      	cmp	r0, r2
   b45b0:	d801      	bhi.n	b45b6 <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh+0x7e>
  for(int i = 0; i < 4;){
   b45b2:	2d03      	cmp	r5, #3
   b45b4:	ddda      	ble.n	b456c <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh+0x34>
  if(index != 4) {
   b45b6:	f1bb 0f04 	cmp.w	fp, #4
   b45ba:	d014      	beq.n	b45e6 <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh+0xae>
    if(error != NULL) *error = eRTU_RECV_ERROR;
   b45bc:	b986      	cbnz	r6, b45e0 <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh+0xa8>
    return NULL;
   b45be:	2500      	movs	r5, #0
   b45c0:	462e      	mov	r6, r5
}
   b45c2:	4630      	mov	r0, r6
   b45c4:	b005      	add	sp, #20
   b45c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      }else if((index == 2) && ((head[1]&0x7F) != cmd)){
   b45ca:	2d02      	cmp	r5, #2
   b45cc:	d1e6      	bne.n	b459c <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh+0x64>
   b45ce:	f89d 300d 	ldrb.w	r3, [sp, #13]
        index = 0;
   b45d2:	9a01      	ldr	r2, [sp, #4]
      }else if((index == 2) && ((head[1]&0x7F) != cmd)){
   b45d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
        index = 0;
   b45d8:	429a      	cmp	r2, r3
   b45da:	bf18      	it	ne
   b45dc:	2500      	movne	r5, #0
   b45de:	e7dd      	b.n	b459c <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh+0x64>
    if(error != NULL) *error = eRTU_RECV_ERROR;
   b45e0:	2309      	movs	r3, #9
   b45e2:	7033      	strb	r3, [r6, #0]
   b45e4:	e7eb      	b.n	b45be <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh+0x86>
  switch(head[1]){
   b45e6:	f89d 800d 	ldrb.w	r8, [sp, #13]
   b45ea:	f1b8 0f06 	cmp.w	r8, #6
   b45ee:	d80a      	bhi.n	b4606 <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh+0xce>
   b45f0:	f1b8 0f04 	cmp.w	r8, #4
   b45f4:	d80b      	bhi.n	b460e <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh+0xd6>
   b45f6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   b45fa:	2b03      	cmp	r3, #3
   b45fc:	d90f      	bls.n	b461e <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh+0xe6>
   b45fe:	f04f 0800 	mov.w	r8, #0
   b4602:	2405      	movs	r4, #5
   b4604:	e010      	b.n	b4628 <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh+0xf0>
   b4606:	f1a8 030f 	sub.w	r3, r8, #15
   b460a:	2b01      	cmp	r3, #1
   b460c:	d8f9      	bhi.n	b4602 <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh+0xca>
      if(((head[2] << 8) | (head[3])) != data){
   b460e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   b4612:	ba5b      	rev16	r3, r3
   b4614:	b29b      	uxth	r3, r3
   b4616:	4553      	cmp	r3, sl
   b4618:	d1a2      	bne.n	b4560 <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh+0x28>
      index = 8;
   b461a:	2408      	movs	r4, #8
   b461c:	e004      	b.n	b4628 <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh+0xf0>
      if(head[2] != (data & 0xFF)) {
   b461e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b4622:	42a3      	cmp	r3, r4
   b4624:	d19c      	bne.n	b4560 <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh+0x28>
      index = 5 + head[2];
   b4626:	3405      	adds	r4, #5
  if((header = (pRtuPacketHeader_t)malloc(index+2)) == NULL){
   b4628:	1ca0      	adds	r0, r4, #2
   b462a:	f000 fb01 	bl	b4c30 <malloc>
   b462e:	4605      	mov	r5, r0
   b4630:	2800      	cmp	r0, #0
   b4632:	d0c3      	beq.n	b45bc <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh+0x84>
  memcpy((uint8_t *)&(header->id), head, 4);
   b4634:	9b03      	ldr	r3, [sp, #12]
  header->len = index;
   b4636:	8004      	strh	r4, [r0, #0]
  memcpy((uint8_t *)&(header->id), head, 4);
   b4638:	f8c0 3002 	str.w	r3, [r0, #2]
   b463c:	f000 f954 	bl	b48e8 <HAL_Timer_Get_Milli_Seconds>
  remain = index - 4;
   b4640:	3c04      	subs	r4, #4
   b4642:	b2a4      	uxth	r4, r4
   b4644:	4681      	mov	r9, r0
  index = 2;
   b4646:	f04f 0a02 	mov.w	sl, #2
    if(_s->available()){
   b464a:	6878      	ldr	r0, [r7, #4]
   b464c:	6803      	ldr	r3, [r0, #0]
   b464e:	691b      	ldr	r3, [r3, #16]
   b4650:	4798      	blx	r3
   b4652:	b178      	cbz	r0, b4674 <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh+0x13c>
      *(header->payload+index) = (uint8_t)_s->read();
   b4654:	6878      	ldr	r0, [r7, #4]
   b4656:	6803      	ldr	r3, [r0, #0]
   b4658:	695b      	ldr	r3, [r3, #20]
   b465a:	4798      	blx	r3
   b465c:	eb05 030a 	add.w	r3, r5, sl
      remain--;
   b4660:	3c01      	subs	r4, #1
      *(header->payload+index) = (uint8_t)_s->read();
   b4662:	7118      	strb	r0, [r3, #4]
   b4664:	f000 f940 	bl	b48e8 <HAL_Timer_Get_Milli_Seconds>
      index++;
   b4668:	f10a 0a01 	add.w	sl, sl, #1
   b466c:	fa1f fa8a 	uxth.w	sl, sl
   b4670:	4681      	mov	r9, r0
      remain--;
   b4672:	b2a4      	uxth	r4, r4
   b4674:	f000 f938 	bl	b48e8 <HAL_Timer_Get_Milli_Seconds>
    if((millis() - time) > _timeout) {
   b4678:	683b      	ldr	r3, [r7, #0]
   b467a:	eba0 0009 	sub.w	r0, r0, r9
   b467e:	4298      	cmp	r0, r3
   b4680:	d903      	bls.n	b468a <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh+0x152>
    free(header);
   b4682:	4628      	mov	r0, r5
   b4684:	f000 fadc 	bl	b4c40 <free>
    if(error != NULL) *error = eRTU_RECV_ERROR;
   b4688:	e798      	b.n	b45bc <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh+0x84>
  while(remain){
   b468a:	2c00      	cmp	r4, #0
   b468c:	d1dd      	bne.n	b464a <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh+0x112>
  crc = (header->payload[(header->len)-4] << 8) | header->payload[(header->len)-3];
   b468e:	4629      	mov	r1, r5
  if(crc != calculateCRC((uint8_t *)&(header->id), (header->len) - 2)){
   b4690:	4638      	mov	r0, r7
  crc = (header->payload[(header->len)-4] << 8) | header->payload[(header->len)-3];
   b4692:	f831 9b02 	ldrh.w	r9, [r1], #2
  if(crc != calculateCRC((uint8_t *)&(header->id), (header->len) - 2)){
   b4696:	f1a9 0202 	sub.w	r2, r9, #2
   b469a:	b2d2      	uxtb	r2, r2
   b469c:	f7ff fefd 	bl	b449a <_ZN11DFRobot_RTU12calculateCRCEPhh>
  crc = (header->payload[(header->len)-4] << 8) | header->payload[(header->len)-3];
   b46a0:	f815 2009 	ldrb.w	r2, [r5, r9]
   b46a4:	44a9      	add	r9, r5
   b46a6:	f899 3001 	ldrb.w	r3, [r9, #1]
  if(crc != calculateCRC((uint8_t *)&(header->id), (header->len) - 2)){
   b46aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   b46ae:	4283      	cmp	r3, r0
   b46b0:	d1e7      	bne.n	b4682 <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh+0x14a>
  if(error != NULL) *error = 0;
   b46b2:	b106      	cbz	r6, b46b6 <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh+0x17e>
   b46b4:	7034      	strb	r4, [r6, #0]
  if(head[1] & 0x80){
   b46b6:	f018 0f80 	tst.w	r8, #128	; 0x80
    *error = head[2];
   b46ba:	bf1c      	itt	ne
   b46bc:	f89d 300e 	ldrbne.w	r3, [sp, #14]
   b46c0:	7033      	strbne	r3, [r6, #0]
   b46c2:	e77d      	b.n	b45c0 <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh+0x88>

000b46c4 <_ZN11DFRobot_RTU15clearRecvBufferEv>:

void DFRobot_RTU::clearRecvBuffer(){
   b46c4:	b510      	push	{r4, lr}
   b46c6:	4604      	mov	r4, r0
  while(_s->available()){
   b46c8:	6860      	ldr	r0, [r4, #4]
   b46ca:	6803      	ldr	r3, [r0, #0]
   b46cc:	691b      	ldr	r3, [r3, #16]
   b46ce:	4798      	blx	r3
   b46d0:	b138      	cbz	r0, b46e2 <_ZN11DFRobot_RTU15clearRecvBufferEv+0x1e>
    _s->read();
   b46d2:	6860      	ldr	r0, [r4, #4]
   b46d4:	6803      	ldr	r3, [r0, #0]
   b46d6:	695b      	ldr	r3, [r3, #20]
   b46d8:	4798      	blx	r3
    delay(2);
   b46da:	2002      	movs	r0, #2
   b46dc:	f000 fac8 	bl	b4c70 <delay>
  while(_s->available()){
   b46e0:	e7f2      	b.n	b46c8 <_ZN11DFRobot_RTU15clearRecvBufferEv+0x4>
  }
}
   b46e2:	bd10      	pop	{r4, pc}

000b46e4 <_ZN11DFRobot_RTU11sendPackageEPNS_18sRtuPacketHeader_tE>:
void DFRobot_RTU::sendPackage(pRtuPacketHeader_t header){
   b46e4:	b538      	push	{r3, r4, r5, lr}
   b46e6:	460d      	mov	r5, r1
   b46e8:	4604      	mov	r4, r0
  clearRecvBuffer();
   b46ea:	f7ff ffeb 	bl	b46c4 <_ZN11DFRobot_RTU15clearRecvBufferEv>
  if(header != NULL){
   b46ee:	b305      	cbz	r5, b4732 <_ZN11DFRobot_RTU11sendPackageEPNS_18sRtuPacketHeader_tE+0x4e>
    if(_dePin>0){
   b46f0:	68a0      	ldr	r0, [r4, #8]
   b46f2:	2800      	cmp	r0, #0
   b46f4:	dd06      	ble.n	b4704 <_ZN11DFRobot_RTU11sendPackageEPNS_18sRtuPacketHeader_tE+0x20>
      digitalWrite(_dePin,HIGH);
   b46f6:	b280      	uxth	r0, r0
   b46f8:	2101      	movs	r1, #1
   b46fa:	f001 f81b 	bl	b5734 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b46fe:	2032      	movs	r0, #50	; 0x32
   b4700:	f000 f8ea 	bl	b48d8 <HAL_Delay_Microseconds>
    _s->write((uint8_t *)&(header->id), header->len);
   b4704:	6860      	ldr	r0, [r4, #4]
   b4706:	4629      	mov	r1, r5
   b4708:	6803      	ldr	r3, [r0, #0]
   b470a:	f831 2b02 	ldrh.w	r2, [r1], #2
   b470e:	68db      	ldr	r3, [r3, #12]
   b4710:	4798      	blx	r3
    _s->flush();
   b4712:	6860      	ldr	r0, [r4, #4]
   b4714:	6803      	ldr	r3, [r0, #0]
   b4716:	69db      	ldr	r3, [r3, #28]
   b4718:	4798      	blx	r3
    free(header);
   b471a:	4628      	mov	r0, r5
   b471c:	f000 fa90 	bl	b4c40 <free>
    if(_dePin>0){
   b4720:	68a0      	ldr	r0, [r4, #8]
   b4722:	2800      	cmp	r0, #0
   b4724:	dd05      	ble.n	b4732 <_ZN11DFRobot_RTU11sendPackageEPNS_18sRtuPacketHeader_tE+0x4e>
}
   b4726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      digitalWrite(_dePin,LOW);
   b472a:	2100      	movs	r1, #0
   b472c:	b280      	uxth	r0, r0
   b472e:	f001 b801 	b.w	b5734 <digitalWrite>
}
   b4732:	bd38      	pop	{r3, r4, r5, pc}

000b4734 <_ZN11DFRobot_RTU17readInputRegisterEht>:
uint16_t DFRobot_RTU::readInputRegister(uint8_t id, uint16_t reg){
   b4734:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t temp[] = {(uint8_t)((reg >> 8) & 0xFF), (uint8_t)(reg & 0xFF), 0x00, 0x01};
   b4736:	2301      	movs	r3, #1
   b4738:	f88d 300f 	strb.w	r3, [sp, #15]
   b473c:	f88d 200d 	strb.w	r2, [sp, #13]
   b4740:	0a13      	lsrs	r3, r2, #8
   b4742:	2204      	movs	r2, #4
   b4744:	9200      	str	r2, [sp, #0]
   b4746:	2600      	movs	r6, #0
   b4748:	f88d 300c 	strb.w	r3, [sp, #12]
   b474c:	ab03      	add	r3, sp, #12
uint16_t DFRobot_RTU::readInputRegister(uint8_t id, uint16_t reg){
   b474e:	460c      	mov	r4, r1
   b4750:	4605      	mov	r5, r0
  uint8_t temp[] = {(uint8_t)((reg >> 8) & 0xFF), (uint8_t)(reg & 0xFF), 0x00, 0x01};
   b4752:	f88d 600e 	strb.w	r6, [sp, #14]
  uint8_t ret = 0;
   b4756:	f88d 600b 	strb.w	r6, [sp, #11]
  if((data == NULL) || (size == 0)) return NULL;
   b475a:	f7ff feb8 	bl	b44ce <_ZN11DFRobot_RTU6packedEhhPvt.part.0>
   b475e:	4601      	mov	r1, r0
  sendPackage(header);
   b4760:	4628      	mov	r0, r5
   b4762:	f7ff ffbf 	bl	b46e4 <_ZN11DFRobot_RTU11sendPackageEPNS_18sRtuPacketHeader_tE>
  header = recvAndParsePackage(id, (uint8_t)eCMD_READ_INPUT, 2, &ret);
   b4766:	f10d 030b 	add.w	r3, sp, #11
   b476a:	9300      	str	r3, [sp, #0]
   b476c:	4621      	mov	r1, r4
   b476e:	2302      	movs	r3, #2
   b4770:	2204      	movs	r2, #4
   b4772:	4628      	mov	r0, r5
   b4774:	f7ff fee0 	bl	b4538 <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh>
  if((ret == 0) && (header != NULL)){
   b4778:	f89d 300b 	ldrb.w	r3, [sp, #11]
  header = recvAndParsePackage(id, (uint8_t)eCMD_READ_INPUT, 2, &ret);
   b477c:	4604      	mov	r4, r0
  if((ret == 0) && (header != NULL)){
   b477e:	b94b      	cbnz	r3, b4794 <_ZN11DFRobot_RTU17readInputRegisterEht+0x60>
   b4780:	b128      	cbz	r0, b478e <_ZN11DFRobot_RTU17readInputRegisterEht+0x5a>
    val = (header->payload[1] << 8) | header->payload[2];
   b4782:	f8b0 4005 	ldrh.w	r4, [r0, #5]
   b4786:	ba64      	rev16	r4, r4
   b4788:	b2a4      	uxth	r4, r4
    free(header);
   b478a:	f000 fa59 	bl	b4c40 <free>
}
   b478e:	4620      	mov	r0, r4
   b4790:	b004      	add	sp, #16
   b4792:	bd70      	pop	{r4, r5, r6, pc}
  uint16_t val = 0;
   b4794:	4634      	mov	r4, r6
   b4796:	e7fa      	b.n	b478e <_ZN11DFRobot_RTU17readInputRegisterEht+0x5a>

000b4798 <_ZN11DFRobot_RTU17readInputRegisterEhtPvt>:
uint8_t DFRobot_RTU::readInputRegister(uint8_t id, uint16_t reg, void *data, uint16_t size){
   b4798:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b479c:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
  uint8_t temp[] = {(uint8_t)((reg >> 8) & 0xFF), (uint8_t)(reg & 0xFF), (uint8_t)((length >> 8) & 0xFF), (uint8_t)(length & 0xFF)};
   b47a0:	f88d 200d 	strb.w	r2, [sp, #13]
  uint8_t length = size/2 + ((size%2) ? 1 : 0);
   b47a4:	f007 0401 	and.w	r4, r7, #1
  uint8_t temp[] = {(uint8_t)((reg >> 8) & 0xFF), (uint8_t)(reg & 0xFF), (uint8_t)((length >> 8) & 0xFF), (uint8_t)(length & 0xFF)};
   b47a8:	ea4f 2c12 	mov.w	ip, r2, lsr #8
uint8_t DFRobot_RTU::readInputRegister(uint8_t id, uint16_t reg, void *data, uint16_t size){
   b47ac:	461d      	mov	r5, r3
   b47ae:	2204      	movs	r2, #4
  uint8_t temp[] = {(uint8_t)((reg >> 8) & 0xFF), (uint8_t)(reg & 0xFF), (uint8_t)((length >> 8) & 0xFF), (uint8_t)(length & 0xFF)};
   b47b0:	2300      	movs	r3, #0
  uint8_t length = size/2 + ((size%2) ? 1 : 0);
   b47b2:	eb04 0457 	add.w	r4, r4, r7, lsr #1
   b47b6:	b2e4      	uxtb	r4, r4
  uint8_t temp[] = {(uint8_t)((reg >> 8) & 0xFF), (uint8_t)(reg & 0xFF), (uint8_t)((length >> 8) & 0xFF), (uint8_t)(length & 0xFF)};
   b47b8:	9200      	str	r2, [sp, #0]
   b47ba:	f88d 300e 	strb.w	r3, [sp, #14]
  uint8_t ret = 0;
   b47be:	f88d 300b 	strb.w	r3, [sp, #11]
   b47c2:	ab03      	add	r3, sp, #12
uint8_t DFRobot_RTU::readInputRegister(uint8_t id, uint16_t reg, void *data, uint16_t size){
   b47c4:	4606      	mov	r6, r0
   b47c6:	4688      	mov	r8, r1
  uint8_t temp[] = {(uint8_t)((reg >> 8) & 0xFF), (uint8_t)(reg & 0xFF), (uint8_t)((length >> 8) & 0xFF), (uint8_t)(length & 0xFF)};
   b47c8:	f88d c00c 	strb.w	ip, [sp, #12]
   b47cc:	f88d 400f 	strb.w	r4, [sp, #15]
  if((data == NULL) || (size == 0)) return NULL;
   b47d0:	f7ff fe7d 	bl	b44ce <_ZN11DFRobot_RTU6packedEhhPvt.part.0>
   b47d4:	4601      	mov	r1, r0
  sendPackage(header);
   b47d6:	4630      	mov	r0, r6
   b47d8:	f7ff ff84 	bl	b46e4 <_ZN11DFRobot_RTU11sendPackageEPNS_18sRtuPacketHeader_tE>
  header = recvAndParsePackage(id, (uint8_t)eCMD_READ_INPUT, length*2, &ret);
   b47dc:	f10d 030b 	add.w	r3, sp, #11
   b47e0:	9300      	str	r3, [sp, #0]
   b47e2:	2204      	movs	r2, #4
   b47e4:	0063      	lsls	r3, r4, #1
   b47e6:	4641      	mov	r1, r8
   b47e8:	4630      	mov	r0, r6
   b47ea:	f7ff fea5 	bl	b4538 <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh>
  if((ret == 0) && (header != NULL)){
   b47ee:	f89d 300b 	ldrb.w	r3, [sp, #11]
  header = recvAndParsePackage(id, (uint8_t)eCMD_READ_INPUT, length*2, &ret);
   b47f2:	4604      	mov	r4, r0
  if((ret == 0) && (header != NULL)){
   b47f4:	b94b      	cbnz	r3, b480a <_ZN11DFRobot_RTU17readInputRegisterEhtPvt+0x72>
   b47f6:	b140      	cbz	r0, b480a <_ZN11DFRobot_RTU17readInputRegisterEhtPvt+0x72>
    if(data != NULL) memcpy(data, (uint8_t *)&(header->payload[1]), size);
   b47f8:	b125      	cbz	r5, b4804 <_ZN11DFRobot_RTU17readInputRegisterEhtPvt+0x6c>
   b47fa:	1d41      	adds	r1, r0, #5
   b47fc:	463a      	mov	r2, r7
   b47fe:	4628      	mov	r0, r5
   b4800:	f001 fd3c 	bl	b627c <memcpy>
    free(header);
   b4804:	4620      	mov	r0, r4
   b4806:	f000 fa1b 	bl	b4c40 <free>
}
   b480a:	f89d 000b 	ldrb.w	r0, [sp, #11]
   b480e:	b004      	add	sp, #16
   b4810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4814 <_ZN11DFRobot_RTU20writeHoldingRegisterEhtPvt>:
uint8_t DFRobot_RTU::writeHoldingRegister(uint8_t id, uint16_t reg, void *data, uint16_t size){
   b4814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4818:	b085      	sub	sp, #20
   b481a:	af02      	add	r7, sp, #8
   b481c:	4616      	mov	r6, r2
   b481e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   b4820:	4604      	mov	r4, r0
  if(((size % 2) != 0) || (size > 250) || data == NULL) return (uint8_t)eRTU_EXCEPTION_ILLEGAL_DATA_VALUE;
   b4822:	f012 0001 	ands.w	r0, r2, #1
uint8_t DFRobot_RTU::writeHoldingRegister(uint8_t id, uint16_t reg, void *data, uint16_t size){
   b4826:	460d      	mov	r5, r1
  if(((size % 2) != 0) || (size > 250) || data == NULL) return (uint8_t)eRTU_EXCEPTION_ILLEGAL_DATA_VALUE;
   b4828:	d142      	bne.n	b48b0 <_ZN11DFRobot_RTU20writeHoldingRegisterEhtPvt+0x9c>
   b482a:	2afa      	cmp	r2, #250	; 0xfa
   b482c:	d840      	bhi.n	b48b0 <_ZN11DFRobot_RTU20writeHoldingRegisterEhtPvt+0x9c>
   b482e:	2b00      	cmp	r3, #0
   b4830:	d03e      	beq.n	b48b0 <_ZN11DFRobot_RTU20writeHoldingRegisterEhtPvt+0x9c>
  uint8_t temp[size + 5];
   b4832:	f102 010c 	add.w	r1, r2, #12
   b4836:	46ec      	mov	ip, sp
   b4838:	08c9      	lsrs	r1, r1, #3
   b483a:	ebac 01c1 	sub.w	r1, ip, r1, lsl #3
   b483e:	468d      	mov	sp, r1
  temp[0] = (uint8_t)((reg >> 8) & 0xFF);
   b4840:	0a31      	lsrs	r1, r6, #8
   b4842:	f88d 1008 	strb.w	r1, [sp, #8]
  if(id > 0xF7){
   b4846:	2df7      	cmp	r5, #247	; 0xf7
  temp[2] = (uint8_t)(((size/2) >> 8) & 0xFF);
   b4848:	ea4f 0152 	mov.w	r1, r2, lsr #1
  uint8_t temp[size + 5];
   b484c:	f102 0905 	add.w	r9, r2, #5
   b4850:	f10d 0808 	add.w	r8, sp, #8
  temp[1] = (uint8_t)(reg & 0xFF);
   b4854:	f88d 6009 	strb.w	r6, [sp, #9]
  temp[2] = (uint8_t)(((size/2) >> 8) & 0xFF);
   b4858:	f88d 000a 	strb.w	r0, [sp, #10]
  temp[3] = (uint8_t)((size/2) & 0xFF);
   b485c:	f88d 100b 	strb.w	r1, [sp, #11]
  temp[4] = (uint8_t)size;
   b4860:	f88d 200c 	strb.w	r2, [sp, #12]
  uint8_t ret = 0;
   b4864:	71f8      	strb	r0, [r7, #7]
  if(id > 0xF7){
   b4866:	d825      	bhi.n	b48b4 <_ZN11DFRobot_RTU20writeHoldingRegisterEhtPvt+0xa0>
  memcpy(temp+5, data, size);
   b4868:	4619      	mov	r1, r3
   b486a:	f10d 000d 	add.w	r0, sp, #13
   b486e:	f001 fd05 	bl	b627c <memcpy>
  return packed(id, (uint8_t)cmd, data, size);
   b4872:	fa1f f389 	uxth.w	r3, r9
   b4876:	2210      	movs	r2, #16
   b4878:	9300      	str	r3, [sp, #0]
   b487a:	4629      	mov	r1, r5
   b487c:	4643      	mov	r3, r8
   b487e:	4620      	mov	r0, r4
   b4880:	f7ff fe4c 	bl	b451c <_ZN11DFRobot_RTU6packedEhhPvt>
   b4884:	4601      	mov	r1, r0
  sendPackage(header);
   b4886:	4620      	mov	r0, r4
   b4888:	f7ff ff2c 	bl	b46e4 <_ZN11DFRobot_RTU11sendPackageEPNS_18sRtuPacketHeader_tE>
  header = recvAndParsePackage(id, (uint8_t)eCMD_WRITE_MULTI_HOLDING, reg, &ret);
   b488c:	1dfb      	adds	r3, r7, #7
   b488e:	9300      	str	r3, [sp, #0]
   b4890:	2210      	movs	r2, #16
   b4892:	4633      	mov	r3, r6
   b4894:	4629      	mov	r1, r5
   b4896:	4620      	mov	r0, r4
   b4898:	f7ff fe4e 	bl	b4538 <_ZN11DFRobot_RTU19recvAndParsePackageEhhtPh>
  if((ret == 0) && (header != NULL)){
   b489c:	79fa      	ldrb	r2, [r7, #7]
   b489e:	b912      	cbnz	r2, b48a6 <_ZN11DFRobot_RTU20writeHoldingRegisterEhtPvt+0x92>
   b48a0:	b108      	cbz	r0, b48a6 <_ZN11DFRobot_RTU20writeHoldingRegisterEhtPvt+0x92>
    free(header);
   b48a2:	f000 f9cd 	bl	b4c40 <free>
  return ret;
   b48a6:	79f8      	ldrb	r0, [r7, #7]
}
   b48a8:	370c      	adds	r7, #12
   b48aa:	46bd      	mov	sp, r7
   b48ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(((size % 2) != 0) || (size > 250) || data == NULL) return (uint8_t)eRTU_EXCEPTION_ILLEGAL_DATA_VALUE;
   b48b0:	2003      	movs	r0, #3
   b48b2:	e7f9      	b.n	b48a8 <_ZN11DFRobot_RTU20writeHoldingRegisterEhtPvt+0x94>
    return (uint8_t)eRTU_ID_ERROR;
   b48b4:	200b      	movs	r0, #11
   b48b6:	e7f7      	b.n	b48a8 <_ZN11DFRobot_RTU20writeHoldingRegisterEhtPvt+0x94>

000b48b8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b48b8:	b508      	push	{r3, lr}
   b48ba:	4b02      	ldr	r3, [pc, #8]	; (b48c4 <os_mutex_recursive_create+0xc>)
   b48bc:	681b      	ldr	r3, [r3, #0]
   b48be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b48c0:	9301      	str	r3, [sp, #4]
   b48c2:	bd08      	pop	{r3, pc}
   b48c4:	00030248 	.word	0x00030248

000b48c8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b48c8:	b508      	push	{r3, lr}
   b48ca:	4b02      	ldr	r3, [pc, #8]	; (b48d4 <HAL_RNG_GetRandomNumber+0xc>)
   b48cc:	681b      	ldr	r3, [r3, #0]
   b48ce:	685b      	ldr	r3, [r3, #4]
   b48d0:	9301      	str	r3, [sp, #4]
   b48d2:	bd08      	pop	{r3, pc}
   b48d4:	00030218 	.word	0x00030218

000b48d8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b48d8:	b508      	push	{r3, lr}
   b48da:	4b02      	ldr	r3, [pc, #8]	; (b48e4 <HAL_Delay_Microseconds+0xc>)
   b48dc:	681b      	ldr	r3, [r3, #0]
   b48de:	68db      	ldr	r3, [r3, #12]
   b48e0:	9301      	str	r3, [sp, #4]
   b48e2:	bd08      	pop	{r3, pc}
   b48e4:	00030218 	.word	0x00030218

000b48e8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b48e8:	b508      	push	{r3, lr}
   b48ea:	4b02      	ldr	r3, [pc, #8]	; (b48f4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b48ec:	681b      	ldr	r3, [r3, #0]
   b48ee:	695b      	ldr	r3, [r3, #20]
   b48f0:	9301      	str	r3, [sp, #4]
   b48f2:	bd08      	pop	{r3, pc}
   b48f4:	00030218 	.word	0x00030218

000b48f8 <HAL_Get_Pin_Mode>:
DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b48f8:	b508      	push	{r3, lr}
   b48fa:	4b02      	ldr	r3, [pc, #8]	; (b4904 <HAL_Get_Pin_Mode+0xc>)
   b48fc:	681b      	ldr	r3, [r3, #0]
   b48fe:	68db      	ldr	r3, [r3, #12]
   b4900:	9301      	str	r3, [sp, #4]
   b4902:	bd08      	pop	{r3, pc}
   b4904:	0003022c 	.word	0x0003022c

000b4908 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4908:	b508      	push	{r3, lr}
   b490a:	4b02      	ldr	r3, [pc, #8]	; (b4914 <HAL_GPIO_Write+0xc>)
   b490c:	681b      	ldr	r3, [r3, #0]
   b490e:	691b      	ldr	r3, [r3, #16]
   b4910:	9301      	str	r3, [sp, #4]
   b4912:	bd08      	pop	{r3, pc}
   b4914:	0003022c 	.word	0x0003022c

000b4918 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4918:	b508      	push	{r3, lr}
   b491a:	4b02      	ldr	r3, [pc, #8]	; (b4924 <hal_i2c_begin+0xc>)
   b491c:	681b      	ldr	r3, [r3, #0]
   b491e:	68db      	ldr	r3, [r3, #12]
   b4920:	9301      	str	r3, [sp, #4]
   b4922:	bd08      	pop	{r3, pc}
   b4924:	00030228 	.word	0x00030228

000b4928 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4928:	b508      	push	{r3, lr}
   b492a:	4b02      	ldr	r3, [pc, #8]	; (b4934 <hal_i2c_begin_transmission+0xc>)
   b492c:	681b      	ldr	r3, [r3, #0]
   b492e:	699b      	ldr	r3, [r3, #24]
   b4930:	9301      	str	r3, [sp, #4]
   b4932:	bd08      	pop	{r3, pc}
   b4934:	00030228 	.word	0x00030228

000b4938 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4938:	b508      	push	{r3, lr}
   b493a:	4b02      	ldr	r3, [pc, #8]	; (b4944 <hal_i2c_end_transmission+0xc>)
   b493c:	681b      	ldr	r3, [r3, #0]
   b493e:	69db      	ldr	r3, [r3, #28]
   b4940:	9301      	str	r3, [sp, #4]
   b4942:	bd08      	pop	{r3, pc}
   b4944:	00030228 	.word	0x00030228

000b4948 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4948:	b508      	push	{r3, lr}
   b494a:	4b02      	ldr	r3, [pc, #8]	; (b4954 <hal_i2c_write+0xc>)
   b494c:	681b      	ldr	r3, [r3, #0]
   b494e:	6a1b      	ldr	r3, [r3, #32]
   b4950:	9301      	str	r3, [sp, #4]
   b4952:	bd08      	pop	{r3, pc}
   b4954:	00030228 	.word	0x00030228

000b4958 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4958:	b508      	push	{r3, lr}
   b495a:	4b02      	ldr	r3, [pc, #8]	; (b4964 <hal_i2c_available+0xc>)
   b495c:	681b      	ldr	r3, [r3, #0]
   b495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4960:	9301      	str	r3, [sp, #4]
   b4962:	bd08      	pop	{r3, pc}
   b4964:	00030228 	.word	0x00030228

000b4968 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4968:	b508      	push	{r3, lr}
   b496a:	4b02      	ldr	r3, [pc, #8]	; (b4974 <hal_i2c_read+0xc>)
   b496c:	681b      	ldr	r3, [r3, #0]
   b496e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4970:	9301      	str	r3, [sp, #4]
   b4972:	bd08      	pop	{r3, pc}
   b4974:	00030228 	.word	0x00030228

000b4978 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4978:	b508      	push	{r3, lr}
   b497a:	4b02      	ldr	r3, [pc, #8]	; (b4984 <hal_i2c_peek+0xc>)
   b497c:	681b      	ldr	r3, [r3, #0]
   b497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4980:	9301      	str	r3, [sp, #4]
   b4982:	bd08      	pop	{r3, pc}
   b4984:	00030228 	.word	0x00030228

000b4988 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4988:	b508      	push	{r3, lr}
   b498a:	4b02      	ldr	r3, [pc, #8]	; (b4994 <hal_i2c_flush+0xc>)
   b498c:	681b      	ldr	r3, [r3, #0]
   b498e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4990:	9301      	str	r3, [sp, #4]
   b4992:	bd08      	pop	{r3, pc}
   b4994:	00030228 	.word	0x00030228

000b4998 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4998:	b508      	push	{r3, lr}
   b499a:	4b02      	ldr	r3, [pc, #8]	; (b49a4 <hal_i2c_is_enabled+0xc>)
   b499c:	681b      	ldr	r3, [r3, #0]
   b499e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b49a0:	9301      	str	r3, [sp, #4]
   b49a2:	bd08      	pop	{r3, pc}
   b49a4:	00030228 	.word	0x00030228

000b49a8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b49a8:	b508      	push	{r3, lr}
   b49aa:	4b02      	ldr	r3, [pc, #8]	; (b49b4 <hal_i2c_init+0xc>)
   b49ac:	681b      	ldr	r3, [r3, #0]
   b49ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b49b0:	9301      	str	r3, [sp, #4]
   b49b2:	bd08      	pop	{r3, pc}
   b49b4:	00030228 	.word	0x00030228

000b49b8 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b49b8:	b508      	push	{r3, lr}
   b49ba:	4b02      	ldr	r3, [pc, #8]	; (b49c4 <hal_i2c_request_ex+0xc>)
   b49bc:	681b      	ldr	r3, [r3, #0]
   b49be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b49c0:	9301      	str	r3, [sp, #4]
   b49c2:	bd08      	pop	{r3, pc}
   b49c4:	00030228 	.word	0x00030228

000b49c8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b49c8:	b508      	push	{r3, lr}
   b49ca:	4b02      	ldr	r3, [pc, #8]	; (b49d4 <inet_inet_ntop+0xc>)
   b49cc:	681b      	ldr	r3, [r3, #0]
   b49ce:	695b      	ldr	r3, [r3, #20]
   b49d0:	9301      	str	r3, [sp, #4]
   b49d2:	bd08      	pop	{r3, pc}
   b49d4:	00030264 	.word	0x00030264

000b49d8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b49d8:	b508      	push	{r3, lr}
   b49da:	4b02      	ldr	r3, [pc, #8]	; (b49e4 <netdb_freeaddrinfo+0xc>)
   b49dc:	681b      	ldr	r3, [r3, #0]
   b49de:	689b      	ldr	r3, [r3, #8]
   b49e0:	9301      	str	r3, [sp, #4]
   b49e2:	bd08      	pop	{r3, pc}
   b49e4:	00030268 	.word	0x00030268

000b49e8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b49e8:	b508      	push	{r3, lr}
   b49ea:	4b02      	ldr	r3, [pc, #8]	; (b49f4 <netdb_getaddrinfo+0xc>)
   b49ec:	681b      	ldr	r3, [r3, #0]
   b49ee:	68db      	ldr	r3, [r3, #12]
   b49f0:	9301      	str	r3, [sp, #4]
   b49f2:	bd08      	pop	{r3, pc}
   b49f4:	00030268 	.word	0x00030268

000b49f8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b49f8:	b508      	push	{r3, lr}
   b49fa:	4b02      	ldr	r3, [pc, #8]	; (b4a04 <hal_spi_init+0xc>)
   b49fc:	681b      	ldr	r3, [r3, #0]
   b49fe:	69db      	ldr	r3, [r3, #28]
   b4a00:	9301      	str	r3, [sp, #4]
   b4a02:	bd08      	pop	{r3, pc}
   b4a04:	00030230 	.word	0x00030230

000b4a08 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4a08:	b508      	push	{r3, lr}
   b4a0a:	4b02      	ldr	r3, [pc, #8]	; (b4a14 <hal_spi_is_enabled+0xc>)
   b4a0c:	681b      	ldr	r3, [r3, #0]
   b4a0e:	6a1b      	ldr	r3, [r3, #32]
   b4a10:	9301      	str	r3, [sp, #4]
   b4a12:	bd08      	pop	{r3, pc}
   b4a14:	00030230 	.word	0x00030230

000b4a18 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4a18:	b508      	push	{r3, lr}
   b4a1a:	4b02      	ldr	r3, [pc, #8]	; (b4a24 <hal_usart_write+0xc>)
   b4a1c:	681b      	ldr	r3, [r3, #0]
   b4a1e:	68db      	ldr	r3, [r3, #12]
   b4a20:	9301      	str	r3, [sp, #4]
   b4a22:	bd08      	pop	{r3, pc}
   b4a24:	0003023c 	.word	0x0003023c

000b4a28 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4a28:	b508      	push	{r3, lr}
   b4a2a:	4b02      	ldr	r3, [pc, #8]	; (b4a34 <hal_usart_available+0xc>)
   b4a2c:	681b      	ldr	r3, [r3, #0]
   b4a2e:	691b      	ldr	r3, [r3, #16]
   b4a30:	9301      	str	r3, [sp, #4]
   b4a32:	bd08      	pop	{r3, pc}
   b4a34:	0003023c 	.word	0x0003023c

000b4a38 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4a38:	b508      	push	{r3, lr}
   b4a3a:	4b02      	ldr	r3, [pc, #8]	; (b4a44 <hal_usart_read+0xc>)
   b4a3c:	681b      	ldr	r3, [r3, #0]
   b4a3e:	695b      	ldr	r3, [r3, #20]
   b4a40:	9301      	str	r3, [sp, #4]
   b4a42:	bd08      	pop	{r3, pc}
   b4a44:	0003023c 	.word	0x0003023c

000b4a48 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4a48:	b508      	push	{r3, lr}
   b4a4a:	4b02      	ldr	r3, [pc, #8]	; (b4a54 <hal_usart_peek+0xc>)
   b4a4c:	681b      	ldr	r3, [r3, #0]
   b4a4e:	699b      	ldr	r3, [r3, #24]
   b4a50:	9301      	str	r3, [sp, #4]
   b4a52:	bd08      	pop	{r3, pc}
   b4a54:	0003023c 	.word	0x0003023c

000b4a58 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4a58:	b508      	push	{r3, lr}
   b4a5a:	4b02      	ldr	r3, [pc, #8]	; (b4a64 <hal_usart_flush+0xc>)
   b4a5c:	681b      	ldr	r3, [r3, #0]
   b4a5e:	69db      	ldr	r3, [r3, #28]
   b4a60:	9301      	str	r3, [sp, #4]
   b4a62:	bd08      	pop	{r3, pc}
   b4a64:	0003023c 	.word	0x0003023c

000b4a68 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4a68:	b508      	push	{r3, lr}
   b4a6a:	4b02      	ldr	r3, [pc, #8]	; (b4a74 <hal_usart_is_enabled+0xc>)
   b4a6c:	681b      	ldr	r3, [r3, #0]
   b4a6e:	6a1b      	ldr	r3, [r3, #32]
   b4a70:	9301      	str	r3, [sp, #4]
   b4a72:	bd08      	pop	{r3, pc}
   b4a74:	0003023c 	.word	0x0003023c

000b4a78 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4a78:	b508      	push	{r3, lr}
   b4a7a:	4b02      	ldr	r3, [pc, #8]	; (b4a84 <hal_usart_available_data_for_write+0xc>)
   b4a7c:	681b      	ldr	r3, [r3, #0]
   b4a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4a80:	9301      	str	r3, [sp, #4]
   b4a82:	bd08      	pop	{r3, pc}
   b4a84:	0003023c 	.word	0x0003023c

000b4a88 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b4a88:	b508      	push	{r3, lr}
   b4a8a:	4b02      	ldr	r3, [pc, #8]	; (b4a94 <hal_usart_begin_config+0xc>)
   b4a8c:	681b      	ldr	r3, [r3, #0]
   b4a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4a90:	9301      	str	r3, [sp, #4]
   b4a92:	bd08      	pop	{r3, pc}
   b4a94:	0003023c 	.word	0x0003023c

000b4a98 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4a98:	b508      	push	{r3, lr}
   b4a9a:	4b02      	ldr	r3, [pc, #8]	; (b4aa4 <hal_usart_init_ex+0xc>)
   b4a9c:	681b      	ldr	r3, [r3, #0]
   b4a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4aa0:	9301      	str	r3, [sp, #4]
   b4aa2:	bd08      	pop	{r3, pc}
   b4aa4:	0003023c 	.word	0x0003023c

000b4aa8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4aa8:	b508      	push	{r3, lr}
   b4aaa:	4b02      	ldr	r3, [pc, #8]	; (b4ab4 <HAL_USB_USART_Init+0xc>)
   b4aac:	681b      	ldr	r3, [r3, #0]
   b4aae:	681b      	ldr	r3, [r3, #0]
   b4ab0:	9301      	str	r3, [sp, #4]
   b4ab2:	bd08      	pop	{r3, pc}
   b4ab4:	0003024c 	.word	0x0003024c

000b4ab8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4ab8:	b508      	push	{r3, lr}
   b4aba:	4b02      	ldr	r3, [pc, #8]	; (b4ac4 <HAL_USB_USART_Begin+0xc>)
   b4abc:	681b      	ldr	r3, [r3, #0]
   b4abe:	685b      	ldr	r3, [r3, #4]
   b4ac0:	9301      	str	r3, [sp, #4]
   b4ac2:	bd08      	pop	{r3, pc}
   b4ac4:	0003024c 	.word	0x0003024c

000b4ac8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4ac8:	b508      	push	{r3, lr}
   b4aca:	4b02      	ldr	r3, [pc, #8]	; (b4ad4 <HAL_USB_USART_Available_Data+0xc>)
   b4acc:	681b      	ldr	r3, [r3, #0]
   b4ace:	691b      	ldr	r3, [r3, #16]
   b4ad0:	9301      	str	r3, [sp, #4]
   b4ad2:	bd08      	pop	{r3, pc}
   b4ad4:	0003024c 	.word	0x0003024c

000b4ad8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4ad8:	b508      	push	{r3, lr}
   b4ada:	4b02      	ldr	r3, [pc, #8]	; (b4ae4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4adc:	681b      	ldr	r3, [r3, #0]
   b4ade:	695b      	ldr	r3, [r3, #20]
   b4ae0:	9301      	str	r3, [sp, #4]
   b4ae2:	bd08      	pop	{r3, pc}
   b4ae4:	0003024c 	.word	0x0003024c

000b4ae8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4ae8:	b508      	push	{r3, lr}
   b4aea:	4b02      	ldr	r3, [pc, #8]	; (b4af4 <HAL_USB_USART_Receive_Data+0xc>)
   b4aec:	681b      	ldr	r3, [r3, #0]
   b4aee:	699b      	ldr	r3, [r3, #24]
   b4af0:	9301      	str	r3, [sp, #4]
   b4af2:	bd08      	pop	{r3, pc}
   b4af4:	0003024c 	.word	0x0003024c

000b4af8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4af8:	b508      	push	{r3, lr}
   b4afa:	4b02      	ldr	r3, [pc, #8]	; (b4b04 <HAL_USB_USART_Send_Data+0xc>)
   b4afc:	681b      	ldr	r3, [r3, #0]
   b4afe:	69db      	ldr	r3, [r3, #28]
   b4b00:	9301      	str	r3, [sp, #4]
   b4b02:	bd08      	pop	{r3, pc}
   b4b04:	0003024c 	.word	0x0003024c

000b4b08 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4b08:	b508      	push	{r3, lr}
   b4b0a:	4b02      	ldr	r3, [pc, #8]	; (b4b14 <HAL_USB_USART_Flush_Data+0xc>)
   b4b0c:	681b      	ldr	r3, [r3, #0]
   b4b0e:	6a1b      	ldr	r3, [r3, #32]
   b4b10:	9301      	str	r3, [sp, #4]
   b4b12:	bd08      	pop	{r3, pc}
   b4b14:	0003024c 	.word	0x0003024c

000b4b18 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4b18:	b508      	push	{r3, lr}
   b4b1a:	4b02      	ldr	r3, [pc, #8]	; (b4b24 <set_system_mode+0xc>)
   b4b1c:	681b      	ldr	r3, [r3, #0]
   b4b1e:	685b      	ldr	r3, [r3, #4]
   b4b20:	9301      	str	r3, [sp, #4]
   b4b22:	bd08      	pop	{r3, pc}
   b4b24:	00030220 	.word	0x00030220

000b4b28 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4b28:	b508      	push	{r3, lr}
   b4b2a:	4b02      	ldr	r3, [pc, #8]	; (b4b34 <system_delay_ms+0xc>)
   b4b2c:	681b      	ldr	r3, [r3, #0]
   b4b2e:	695b      	ldr	r3, [r3, #20]
   b4b30:	9301      	str	r3, [sp, #4]
   b4b32:	bd08      	pop	{r3, pc}
   b4b34:	00030220 	.word	0x00030220

000b4b38 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4b38:	b508      	push	{r3, lr}
   b4b3a:	4b03      	ldr	r3, [pc, #12]	; (b4b48 <system_ctrl_set_app_request_handler+0x10>)
   b4b3c:	681b      	ldr	r3, [r3, #0]
   b4b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4b42:	9301      	str	r3, [sp, #4]
   b4b44:	bd08      	pop	{r3, pc}
   b4b46:	0000      	.short	0x0000
   b4b48:	00030220 	.word	0x00030220

000b4b4c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4b4c:	b508      	push	{r3, lr}
   b4b4e:	4b03      	ldr	r3, [pc, #12]	; (b4b5c <system_ctrl_set_result+0x10>)
   b4b50:	681b      	ldr	r3, [r3, #0]
   b4b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4b56:	9301      	str	r3, [sp, #4]
   b4b58:	bd08      	pop	{r3, pc}
   b4b5a:	0000      	.short	0x0000
   b4b5c:	00030220 	.word	0x00030220

000b4b60 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4b60:	b508      	push	{r3, lr}
   b4b62:	4b02      	ldr	r3, [pc, #8]	; (b4b6c <spark_set_random_seed_from_cloud_handler+0xc>)
   b4b64:	681b      	ldr	r3, [r3, #0]
   b4b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4b68:	9301      	str	r3, [sp, #4]
   b4b6a:	bd08      	pop	{r3, pc}
   b4b6c:	00030244 	.word	0x00030244

000b4b70 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4b70:	b508      	push	{r3, lr}
   b4b72:	4b02      	ldr	r3, [pc, #8]	; (b4b7c <network_connect+0xc>)
   b4b74:	681b      	ldr	r3, [r3, #0]
   b4b76:	685b      	ldr	r3, [r3, #4]
   b4b78:	9301      	str	r3, [sp, #4]
   b4b7a:	bd08      	pop	{r3, pc}
   b4b7c:	00030240 	.word	0x00030240

000b4b80 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4b80:	b508      	push	{r3, lr}
   b4b82:	4b02      	ldr	r3, [pc, #8]	; (b4b8c <network_connecting+0xc>)
   b4b84:	681b      	ldr	r3, [r3, #0]
   b4b86:	689b      	ldr	r3, [r3, #8]
   b4b88:	9301      	str	r3, [sp, #4]
   b4b8a:	bd08      	pop	{r3, pc}
   b4b8c:	00030240 	.word	0x00030240

000b4b90 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4b90:	b508      	push	{r3, lr}
   b4b92:	4b02      	ldr	r3, [pc, #8]	; (b4b9c <network_disconnect+0xc>)
   b4b94:	681b      	ldr	r3, [r3, #0]
   b4b96:	68db      	ldr	r3, [r3, #12]
   b4b98:	9301      	str	r3, [sp, #4]
   b4b9a:	bd08      	pop	{r3, pc}
   b4b9c:	00030240 	.word	0x00030240

000b4ba0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4ba0:	b508      	push	{r3, lr}
   b4ba2:	4b02      	ldr	r3, [pc, #8]	; (b4bac <network_ready+0xc>)
   b4ba4:	681b      	ldr	r3, [r3, #0]
   b4ba6:	691b      	ldr	r3, [r3, #16]
   b4ba8:	9301      	str	r3, [sp, #4]
   b4baa:	bd08      	pop	{r3, pc}
   b4bac:	00030240 	.word	0x00030240

000b4bb0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4bb0:	b508      	push	{r3, lr}
   b4bb2:	4b02      	ldr	r3, [pc, #8]	; (b4bbc <network_on+0xc>)
   b4bb4:	681b      	ldr	r3, [r3, #0]
   b4bb6:	695b      	ldr	r3, [r3, #20]
   b4bb8:	9301      	str	r3, [sp, #4]
   b4bba:	bd08      	pop	{r3, pc}
   b4bbc:	00030240 	.word	0x00030240

000b4bc0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4bc0:	b508      	push	{r3, lr}
   b4bc2:	4b02      	ldr	r3, [pc, #8]	; (b4bcc <network_off+0xc>)
   b4bc4:	681b      	ldr	r3, [r3, #0]
   b4bc6:	699b      	ldr	r3, [r3, #24]
   b4bc8:	9301      	str	r3, [sp, #4]
   b4bca:	bd08      	pop	{r3, pc}
   b4bcc:	00030240 	.word	0x00030240

000b4bd0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4bd0:	b508      	push	{r3, lr}
   b4bd2:	4b02      	ldr	r3, [pc, #8]	; (b4bdc <network_listen+0xc>)
   b4bd4:	681b      	ldr	r3, [r3, #0]
   b4bd6:	69db      	ldr	r3, [r3, #28]
   b4bd8:	9301      	str	r3, [sp, #4]
   b4bda:	bd08      	pop	{r3, pc}
   b4bdc:	00030240 	.word	0x00030240

000b4be0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4be0:	b508      	push	{r3, lr}
   b4be2:	4b02      	ldr	r3, [pc, #8]	; (b4bec <network_listening+0xc>)
   b4be4:	681b      	ldr	r3, [r3, #0]
   b4be6:	6a1b      	ldr	r3, [r3, #32]
   b4be8:	9301      	str	r3, [sp, #4]
   b4bea:	bd08      	pop	{r3, pc}
   b4bec:	00030240 	.word	0x00030240

000b4bf0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4bf0:	b508      	push	{r3, lr}
   b4bf2:	4b02      	ldr	r3, [pc, #8]	; (b4bfc <network_set_listen_timeout+0xc>)
   b4bf4:	681b      	ldr	r3, [r3, #0]
   b4bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4bf8:	9301      	str	r3, [sp, #4]
   b4bfa:	bd08      	pop	{r3, pc}
   b4bfc:	00030240 	.word	0x00030240

000b4c00 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4c00:	b508      	push	{r3, lr}
   b4c02:	4b02      	ldr	r3, [pc, #8]	; (b4c0c <network_get_listen_timeout+0xc>)
   b4c04:	681b      	ldr	r3, [r3, #0]
   b4c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4c08:	9301      	str	r3, [sp, #4]
   b4c0a:	bd08      	pop	{r3, pc}
   b4c0c:	00030240 	.word	0x00030240

000b4c10 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4c10:	b508      	push	{r3, lr}
   b4c12:	4b02      	ldr	r3, [pc, #8]	; (b4c1c <network_is_on+0xc>)
   b4c14:	681b      	ldr	r3, [r3, #0]
   b4c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4c18:	9301      	str	r3, [sp, #4]
   b4c1a:	bd08      	pop	{r3, pc}
   b4c1c:	00030240 	.word	0x00030240

000b4c20 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4c20:	b508      	push	{r3, lr}
   b4c22:	4b02      	ldr	r3, [pc, #8]	; (b4c2c <network_is_off+0xc>)
   b4c24:	681b      	ldr	r3, [r3, #0]
   b4c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4c28:	9301      	str	r3, [sp, #4]
   b4c2a:	bd08      	pop	{r3, pc}
   b4c2c:	00030240 	.word	0x00030240

000b4c30 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4c30:	b508      	push	{r3, lr}
   b4c32:	4b02      	ldr	r3, [pc, #8]	; (b4c3c <malloc+0xc>)
   b4c34:	681b      	ldr	r3, [r3, #0]
   b4c36:	681b      	ldr	r3, [r3, #0]
   b4c38:	9301      	str	r3, [sp, #4]
   b4c3a:	bd08      	pop	{r3, pc}
   b4c3c:	0003021c 	.word	0x0003021c

000b4c40 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4c40:	b508      	push	{r3, lr}
   b4c42:	4b02      	ldr	r3, [pc, #8]	; (b4c4c <free+0xc>)
   b4c44:	681b      	ldr	r3, [r3, #0]
   b4c46:	685b      	ldr	r3, [r3, #4]
   b4c48:	9301      	str	r3, [sp, #4]
   b4c4a:	bd08      	pop	{r3, pc}
   b4c4c:	0003021c 	.word	0x0003021c

000b4c50 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4c50:	b508      	push	{r3, lr}
   b4c52:	4b02      	ldr	r3, [pc, #8]	; (b4c5c <__assert_func+0xc>)
   b4c54:	681b      	ldr	r3, [r3, #0]
   b4c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4c58:	9301      	str	r3, [sp, #4]
   b4c5a:	bd08      	pop	{r3, pc}
   b4c5c:	0003021c 	.word	0x0003021c

000b4c60 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4c60:	b508      	push	{r3, lr}
   b4c62:	4b02      	ldr	r3, [pc, #8]	; (b4c6c <newlib_impure_ptr_callback+0xc>)
   b4c64:	681b      	ldr	r3, [r3, #0]
   b4c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4c68:	9301      	str	r3, [sp, #4]
   b4c6a:	bd08      	pop	{r3, pc}
   b4c6c:	0003021c 	.word	0x0003021c

000b4c70 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4c70:	2100      	movs	r1, #0
   b4c72:	f7ff bf59 	b.w	b4b28 <system_delay_ms>
	...

000b4c78 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4c78:	4802      	ldr	r0, [pc, #8]	; (b4c84 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4c7a:	2300      	movs	r3, #0
   b4c7c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4c7e:	f7ff be1b 	b.w	b48b8 <os_mutex_recursive_create>
   b4c82:	bf00      	nop
   b4c84:	2003e6b8 	.word	0x2003e6b8

000b4c88 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4c88:	2200      	movs	r2, #0
   b4c8a:	6840      	ldr	r0, [r0, #4]
   b4c8c:	4611      	mov	r1, r2
   b4c8e:	f7ff bfa7 	b.w	b4be0 <network_listening>

000b4c92 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4c92:	2200      	movs	r2, #0
   b4c94:	6840      	ldr	r0, [r0, #4]
   b4c96:	4611      	mov	r1, r2
   b4c98:	f7ff bfb2 	b.w	b4c00 <network_get_listen_timeout>

000b4c9c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4c9c:	6840      	ldr	r0, [r0, #4]
   b4c9e:	2200      	movs	r2, #0
   b4ca0:	f7ff bfa6 	b.w	b4bf0 <network_set_listen_timeout>

000b4ca4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4ca4:	6840      	ldr	r0, [r0, #4]
   b4ca6:	2200      	movs	r2, #0
   b4ca8:	f081 0101 	eor.w	r1, r1, #1
   b4cac:	f7ff bf90 	b.w	b4bd0 <network_listen>

000b4cb0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4cb0:	2300      	movs	r3, #0
   b4cb2:	6840      	ldr	r0, [r0, #4]
   b4cb4:	461a      	mov	r2, r3
   b4cb6:	4619      	mov	r1, r3
   b4cb8:	f7ff bf82 	b.w	b4bc0 <network_off>

000b4cbc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4cbc:	2300      	movs	r3, #0
   b4cbe:	6840      	ldr	r0, [r0, #4]
   b4cc0:	461a      	mov	r2, r3
   b4cc2:	4619      	mov	r1, r3
   b4cc4:	f7ff bf74 	b.w	b4bb0 <network_on>

000b4cc8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4cc8:	2200      	movs	r2, #0
   b4cca:	6840      	ldr	r0, [r0, #4]
   b4ccc:	4611      	mov	r1, r2
   b4cce:	f7ff bf67 	b.w	b4ba0 <network_ready>

000b4cd2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4cd2:	2200      	movs	r2, #0
   b4cd4:	6840      	ldr	r0, [r0, #4]
   b4cd6:	4611      	mov	r1, r2
   b4cd8:	f7ff bf52 	b.w	b4b80 <network_connecting>

000b4cdc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4cdc:	6840      	ldr	r0, [r0, #4]
   b4cde:	2200      	movs	r2, #0
   b4ce0:	2102      	movs	r1, #2
   b4ce2:	f7ff bf55 	b.w	b4b90 <network_disconnect>

000b4ce6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4ce6:	2300      	movs	r3, #0
   b4ce8:	6840      	ldr	r0, [r0, #4]
   b4cea:	461a      	mov	r2, r3
   b4cec:	f7ff bf40 	b.w	b4b70 <network_connect>

000b4cf0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4cf0:	4b02      	ldr	r3, [pc, #8]	; (b4cfc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4cf2:	2203      	movs	r2, #3
   b4cf4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4cf6:	4a02      	ldr	r2, [pc, #8]	; (b4d00 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4cf8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4cfa:	4770      	bx	lr
   b4cfc:	2003e6bc 	.word	0x2003e6bc
   b4d00:	000b6480 	.word	0x000b6480

000b4d04 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4d04:	4770      	bx	lr

000b4d06 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4d08:	4606      	mov	r6, r0
   b4d0a:	4615      	mov	r5, r2
   b4d0c:	460c      	mov	r4, r1
   b4d0e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4d10:	42bc      	cmp	r4, r7
   b4d12:	d006      	beq.n	b4d22 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4d14:	6833      	ldr	r3, [r6, #0]
   b4d16:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4d1a:	689b      	ldr	r3, [r3, #8]
   b4d1c:	4630      	mov	r0, r6
   b4d1e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4d20:	e7f6      	b.n	b4d10 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4d22:	4628      	mov	r0, r5
   b4d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4d26 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4d26:	7c00      	ldrb	r0, [r0, #16]
   b4d28:	2200      	movs	r2, #0
   b4d2a:	f7ff be0d 	b.w	b4948 <hal_i2c_write>

000b4d2e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4d2e:	7c00      	ldrb	r0, [r0, #16]
   b4d30:	2100      	movs	r1, #0
   b4d32:	f7ff be11 	b.w	b4958 <hal_i2c_available>

000b4d36 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4d36:	7c00      	ldrb	r0, [r0, #16]
   b4d38:	2100      	movs	r1, #0
   b4d3a:	f7ff be15 	b.w	b4968 <hal_i2c_read>

000b4d3e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4d3e:	7c00      	ldrb	r0, [r0, #16]
   b4d40:	2100      	movs	r1, #0
   b4d42:	f7ff be19 	b.w	b4978 <hal_i2c_peek>

000b4d46 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4d46:	7c00      	ldrb	r0, [r0, #16]
   b4d48:	2100      	movs	r1, #0
   b4d4a:	f7ff be1d 	b.w	b4988 <hal_i2c_flush>

000b4d4e <_ZN7TwoWireD0Ev>:
   b4d4e:	b510      	push	{r4, lr}
   b4d50:	2114      	movs	r1, #20
   b4d52:	4604      	mov	r4, r0
   b4d54:	f7ff f9a1 	bl	b409a <_ZdlPvj>
   b4d58:	4620      	mov	r0, r4
   b4d5a:	bd10      	pop	{r4, pc}

000b4d5c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4d5c:	b538      	push	{r3, r4, r5, lr}
   b4d5e:	4604      	mov	r4, r0
   b4d60:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4d66:	2200      	movs	r2, #0
   b4d68:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4d6c:	4b09      	ldr	r3, [pc, #36]	; (b4d94 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b4d6e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4d70:	4608      	mov	r0, r1
   b4d72:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b4d74:	4629      	mov	r1, r5
   b4d76:	f7ff fe17 	bl	b49a8 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4d7a:	30bf      	adds	r0, #191	; 0xbf
   b4d7c:	d108      	bne.n	b4d90 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b4d7e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4d80:	07db      	lsls	r3, r3, #31
   b4d82:	d505      	bpl.n	b4d90 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b4d84:	6868      	ldr	r0, [r5, #4]
   b4d86:	f7ff ff5b 	bl	b4c40 <free>
    free(conf.tx_buffer);
   b4d8a:	68e8      	ldr	r0, [r5, #12]
   b4d8c:	f7ff ff58 	bl	b4c40 <free>
}
   b4d90:	4620      	mov	r0, r4
   b4d92:	bd38      	pop	{r3, r4, r5, pc}
   b4d94:	000b64bc 	.word	0x000b64bc

000b4d98 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b4d98:	2300      	movs	r3, #0
   b4d9a:	7c00      	ldrb	r0, [r0, #16]
   b4d9c:	461a      	mov	r2, r3
   b4d9e:	4619      	mov	r1, r3
   b4da0:	f7ff bdba 	b.w	b4918 <hal_i2c_begin>

000b4da4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b4da4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b4da6:	2200      	movs	r2, #0
   b4da8:	2314      	movs	r3, #20
   b4daa:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b4dae:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b4db2:	780b      	ldrb	r3, [r1, #0]
   b4db4:	f88d 3008 	strb.w	r3, [sp, #8]
   b4db8:	684b      	ldr	r3, [r1, #4]
   b4dba:	9303      	str	r3, [sp, #12]
   b4dbc:	68cb      	ldr	r3, [r1, #12]
   b4dbe:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b4dc0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b4dc2:	7a0b      	ldrb	r3, [r1, #8]
   b4dc4:	9305      	str	r3, [sp, #20]
   b4dc6:	a901      	add	r1, sp, #4
   b4dc8:	f7ff fdf6 	bl	b49b8 <hal_i2c_request_ex>
}
   b4dcc:	b007      	add	sp, #28
   b4dce:	f85d fb04 	ldr.w	pc, [sp], #4

000b4dd2 <_ZN7TwoWire11requestFromEhjh>:
{
   b4dd2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b4dd4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b4dd6:	f88d 1000 	strb.w	r1, [sp]
   b4dda:	f04f 0164 	mov.w	r1, #100	; 0x64
   b4dde:	9103      	str	r1, [sp, #12]
   b4de0:	bf18      	it	ne
   b4de2:	2301      	movne	r3, #1
   b4de4:	4669      	mov	r1, sp
    size_ = size;
   b4de6:	9201      	str	r2, [sp, #4]
   b4de8:	f88d 3008 	strb.w	r3, [sp, #8]
   b4dec:	f7ff ffda 	bl	b4da4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b4df0:	b005      	add	sp, #20
   b4df2:	f85d fb04 	ldr.w	pc, [sp], #4

000b4df6 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b4df6:	2301      	movs	r3, #1
   b4df8:	f7ff bfeb 	b.w	b4dd2 <_ZN7TwoWire11requestFromEhjh>

000b4dfc <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b4dfc:	7c00      	ldrb	r0, [r0, #16]
   b4dfe:	2200      	movs	r2, #0
   b4e00:	f7ff bd92 	b.w	b4928 <hal_i2c_begin_transmission>

000b4e04 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b4e04:	7c00      	ldrb	r0, [r0, #16]
   b4e06:	2200      	movs	r2, #0
   b4e08:	f7ff bd96 	b.w	b4938 <hal_i2c_end_transmission>

000b4e0c <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b4e0c:	2101      	movs	r1, #1
   b4e0e:	f7ff bff9 	b.w	b4e04 <_ZN7TwoWire15endTransmissionEh>

000b4e12 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4e12:	4770      	bx	lr

000b4e14 <_ZN9IPAddressD0Ev>:
   b4e14:	b510      	push	{r4, lr}
   b4e16:	2118      	movs	r1, #24
   b4e18:	4604      	mov	r4, r0
   b4e1a:	f7ff f93e 	bl	b409a <_ZdlPvj>
   b4e1e:	4620      	mov	r0, r4
   b4e20:	bd10      	pop	{r4, pc}

000b4e22 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4e22:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4e24:	7d03      	ldrb	r3, [r0, #20]
   b4e26:	2b06      	cmp	r3, #6
{
   b4e28:	b08d      	sub	sp, #52	; 0x34
   b4e2a:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4e2c:	f100 0704 	add.w	r7, r0, #4
   b4e30:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4e34:	d012      	beq.n	b4e5c <_ZNK9IPAddress7printToER5Print+0x3a>
   b4e36:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4e3a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4e3e:	220a      	movs	r2, #10
   b4e40:	4630      	mov	r0, r6
   b4e42:	f000 f95e 	bl	b5102 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4e46:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4e48:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4e4a:	d019      	beq.n	b4e80 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4e4c:	2c00      	cmp	r4, #0
   b4e4e:	d0f4      	beq.n	b4e3a <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4e50:	212e      	movs	r1, #46	; 0x2e
   b4e52:	4630      	mov	r0, r6
   b4e54:	f000 f93c 	bl	b50d0 <_ZN5Print5printEc>
   b4e58:	4404      	add	r4, r0
   b4e5a:	e7ee      	b.n	b4e3a <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4e5c:	232f      	movs	r3, #47	; 0x2f
   b4e5e:	466a      	mov	r2, sp
   b4e60:	4639      	mov	r1, r7
   b4e62:	200a      	movs	r0, #10
		buf[0] = 0;
   b4e64:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4e68:	f7ff fdae 	bl	b49c8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4e6c:	4668      	mov	r0, sp
   b4e6e:	f001 fa49 	bl	b6304 <strlen>
   b4e72:	6833      	ldr	r3, [r6, #0]
   b4e74:	4602      	mov	r2, r0
   b4e76:	68db      	ldr	r3, [r3, #12]
   b4e78:	4669      	mov	r1, sp
   b4e7a:	4630      	mov	r0, r6
   b4e7c:	4798      	blx	r3
   b4e7e:	4604      	mov	r4, r0
    }
    return n;
}
   b4e80:	4620      	mov	r0, r4
   b4e82:	b00d      	add	sp, #52	; 0x34
   b4e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b4e88 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4e88:	b510      	push	{r4, lr}
   b4e8a:	4b05      	ldr	r3, [pc, #20]	; (b4ea0 <_ZN9IPAddressC1Ev+0x18>)
   b4e8c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4e8e:	2211      	movs	r2, #17
   b4e90:	f840 3b04 	str.w	r3, [r0], #4
   b4e94:	2100      	movs	r1, #0
   b4e96:	f001 f9ff 	bl	b6298 <memset>
}
   b4e9a:	4620      	mov	r0, r4
   b4e9c:	bd10      	pop	{r4, pc}
   b4e9e:	bf00      	nop
   b4ea0:	000b64e4 	.word	0x000b64e4

000b4ea4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4ea4:	4603      	mov	r3, r0
   b4ea6:	4a07      	ldr	r2, [pc, #28]	; (b4ec4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4ea8:	b510      	push	{r4, lr}
   b4eaa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4eae:	f101 0210 	add.w	r2, r1, #16
   b4eb2:	f851 4b04 	ldr.w	r4, [r1], #4
   b4eb6:	f843 4b04 	str.w	r4, [r3], #4
   b4eba:	4291      	cmp	r1, r2
   b4ebc:	d1f9      	bne.n	b4eb2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4ebe:	780a      	ldrb	r2, [r1, #0]
   b4ec0:	701a      	strb	r2, [r3, #0]
}
   b4ec2:	bd10      	pop	{r4, pc}
   b4ec4:	000b64e4 	.word	0x000b64e4

000b4ec8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4ec8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4eca:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4ece:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4ed2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4ed6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4eda:	2304      	movs	r3, #4
   b4edc:	6041      	str	r1, [r0, #4]
   b4ede:	7503      	strb	r3, [r0, #20]
}
   b4ee0:	bd10      	pop	{r4, pc}
	...

000b4ee4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4ee4:	b507      	push	{r0, r1, r2, lr}
   b4ee6:	4b06      	ldr	r3, [pc, #24]	; (b4f00 <_ZN9IPAddressC1EPKh+0x1c>)
   b4ee8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4eea:	78cb      	ldrb	r3, [r1, #3]
   b4eec:	9300      	str	r3, [sp, #0]
   b4eee:	788b      	ldrb	r3, [r1, #2]
   b4ef0:	784a      	ldrb	r2, [r1, #1]
   b4ef2:	7809      	ldrb	r1, [r1, #0]
   b4ef4:	f7ff ffe8 	bl	b4ec8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4ef8:	b003      	add	sp, #12
   b4efa:	f85d fb04 	ldr.w	pc, [sp], #4
   b4efe:	bf00      	nop
   b4f00:	000b64e4 	.word	0x000b64e4

000b4f04 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4f04:	4b01      	ldr	r3, [pc, #4]	; (b4f0c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4f06:	4a02      	ldr	r2, [pc, #8]	; (b4f10 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4f08:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4f0a:	4770      	bx	lr
   b4f0c:	2003e6c4 	.word	0x2003e6c4
   b4f10:	000b64f0 	.word	0x000b64f0

000b4f14 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4f14:	2300      	movs	r3, #0
   b4f16:	6840      	ldr	r0, [r0, #4]
   b4f18:	461a      	mov	r2, r3
   b4f1a:	f7ff be29 	b.w	b4b70 <network_connect>

000b4f1e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4f1e:	6840      	ldr	r0, [r0, #4]
   b4f20:	2200      	movs	r2, #0
   b4f22:	2102      	movs	r1, #2
   b4f24:	f7ff be34 	b.w	b4b90 <network_disconnect>

000b4f28 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4f28:	2200      	movs	r2, #0
   b4f2a:	6840      	ldr	r0, [r0, #4]
   b4f2c:	4611      	mov	r1, r2
   b4f2e:	f7ff be27 	b.w	b4b80 <network_connecting>

000b4f32 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4f32:	2200      	movs	r2, #0
   b4f34:	6840      	ldr	r0, [r0, #4]
   b4f36:	4611      	mov	r1, r2
   b4f38:	f7ff be32 	b.w	b4ba0 <network_ready>

000b4f3c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4f3c:	2300      	movs	r3, #0
   b4f3e:	6840      	ldr	r0, [r0, #4]
   b4f40:	461a      	mov	r2, r3
   b4f42:	4619      	mov	r1, r3
   b4f44:	f7ff be34 	b.w	b4bb0 <network_on>

000b4f48 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4f48:	2300      	movs	r3, #0
   b4f4a:	6840      	ldr	r0, [r0, #4]
   b4f4c:	461a      	mov	r2, r3
   b4f4e:	4619      	mov	r1, r3
   b4f50:	f7ff be36 	b.w	b4bc0 <network_off>

000b4f54 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4f54:	6840      	ldr	r0, [r0, #4]
   b4f56:	2100      	movs	r1, #0
   b4f58:	f7ff be5a 	b.w	b4c10 <network_is_on>

000b4f5c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4f5c:	6840      	ldr	r0, [r0, #4]
   b4f5e:	2100      	movs	r1, #0
   b4f60:	f7ff be5e 	b.w	b4c20 <network_is_off>

000b4f64 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4f64:	6840      	ldr	r0, [r0, #4]
   b4f66:	2200      	movs	r2, #0
   b4f68:	f081 0101 	eor.w	r1, r1, #1
   b4f6c:	f7ff be30 	b.w	b4bd0 <network_listen>

000b4f70 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4f70:	6840      	ldr	r0, [r0, #4]
   b4f72:	2200      	movs	r2, #0
   b4f74:	f7ff be3c 	b.w	b4bf0 <network_set_listen_timeout>

000b4f78 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4f78:	2200      	movs	r2, #0
   b4f7a:	6840      	ldr	r0, [r0, #4]
   b4f7c:	4611      	mov	r1, r2
   b4f7e:	f7ff be3f 	b.w	b4c00 <network_get_listen_timeout>

000b4f82 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4f82:	2200      	movs	r2, #0
   b4f84:	6840      	ldr	r0, [r0, #4]
   b4f86:	4611      	mov	r1, r2
   b4f88:	f7ff be2a 	b.w	b4be0 <network_listening>

000b4f8c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4f8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4f90:	b095      	sub	sp, #84	; 0x54
   b4f92:	4614      	mov	r4, r2
   b4f94:	460d      	mov	r5, r1
   b4f96:	4607      	mov	r7, r0
    IPAddress addr;
   b4f98:	f7ff ff76 	bl	b4e88 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4f9c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4f9e:	221c      	movs	r2, #28
   b4fa0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b4fa2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4fa4:	f001 f978 	bl	b6298 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4fa8:	2340      	movs	r3, #64	; 0x40
   b4faa:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4fac:	4620      	mov	r0, r4
   b4fae:	466b      	mov	r3, sp
   b4fb0:	aa0c      	add	r2, sp, #48	; 0x30
   b4fb2:	2100      	movs	r1, #0
   b4fb4:	f7ff fd18 	bl	b49e8 <netdb_getaddrinfo>
    if (!r) {
   b4fb8:	4604      	mov	r4, r0
   b4fba:	2800      	cmp	r0, #0
   b4fbc:	d14b      	bne.n	b5056 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4fbe:	4602      	mov	r2, r0
   b4fc0:	2101      	movs	r1, #1
   b4fc2:	6868      	ldr	r0, [r5, #4]
   b4fc4:	f7ff fdec 	bl	b4ba0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4fc8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4fca:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4fcc:	4622      	mov	r2, r4
   b4fce:	6868      	ldr	r0, [r5, #4]
   b4fd0:	f7ff fde6 	bl	b4ba0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4fd4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4fd6:	4681      	mov	r9, r0
        bool ok = false;
   b4fd8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4fda:	2e00      	cmp	r6, #0
   b4fdc:	d03b      	beq.n	b5056 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4fde:	2900      	cmp	r1, #0
   b4fe0:	d139      	bne.n	b5056 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b4fe2:	6873      	ldr	r3, [r6, #4]
   b4fe4:	2b02      	cmp	r3, #2
   b4fe6:	d003      	beq.n	b4ff0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b4fe8:	2b0a      	cmp	r3, #10
   b4fea:	d011      	beq.n	b5010 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4fec:	69f6      	ldr	r6, [r6, #28]
   b4fee:	e7f4      	b.n	b4fda <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4ff0:	f1b8 0f00 	cmp.w	r8, #0
   b4ff4:	d0fa      	beq.n	b4fec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b4ff6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b4ff8:	a806      	add	r0, sp, #24
   b4ffa:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4ffc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4ffe:	f7ff ff71 	bl	b4ee4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5002:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5004:	1d3c      	adds	r4, r7, #4
   b5006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5008:	682b      	ldr	r3, [r5, #0]
   b500a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b500c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b500e:	e7ed      	b.n	b4fec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5010:	f1b9 0f00 	cmp.w	r9, #0
   b5014:	d0ea      	beq.n	b4fec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5016:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5018:	2210      	movs	r2, #16
   b501a:	a801      	add	r0, sp, #4
   b501c:	f001 f93c 	bl	b6298 <memset>
                    a.v = 6;
   b5020:	2306      	movs	r3, #6
   b5022:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5026:	ad01      	add	r5, sp, #4
   b5028:	f104 0308 	add.w	r3, r4, #8
   b502c:	3418      	adds	r4, #24
   b502e:	6818      	ldr	r0, [r3, #0]
   b5030:	6859      	ldr	r1, [r3, #4]
   b5032:	462a      	mov	r2, r5
   b5034:	c203      	stmia	r2!, {r0, r1}
   b5036:	3308      	adds	r3, #8
   b5038:	42a3      	cmp	r3, r4
   b503a:	4615      	mov	r5, r2
   b503c:	d1f7      	bne.n	b502e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b503e:	a901      	add	r1, sp, #4
   b5040:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5042:	ad07      	add	r5, sp, #28
   b5044:	f7ff ff2e 	bl	b4ea4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b504a:	1d3c      	adds	r4, r7, #4
   b504c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b504e:	682b      	ldr	r3, [r5, #0]
   b5050:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5052:	4649      	mov	r1, r9
   b5054:	e7ca      	b.n	b4fec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5056:	9800      	ldr	r0, [sp, #0]
   b5058:	f7ff fcbe 	bl	b49d8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b505c:	4638      	mov	r0, r7
   b505e:	b015      	add	sp, #84	; 0x54
   b5060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5064 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5064:	4b02      	ldr	r3, [pc, #8]	; (b5070 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5066:	4a03      	ldr	r2, [pc, #12]	; (b5074 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5068:	601a      	str	r2, [r3, #0]
   b506a:	2200      	movs	r2, #0
   b506c:	605a      	str	r2, [r3, #4]

} // spark
   b506e:	4770      	bx	lr
   b5070:	2003e6c8 	.word	0x2003e6c8
   b5074:	000b64fc 	.word	0x000b64fc

000b5078 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b507a:	4606      	mov	r6, r0
   b507c:	460d      	mov	r5, r1
  size_t n = 0;
   b507e:	188f      	adds	r7, r1, r2
   b5080:	2400      	movs	r4, #0
  while (size--) {
   b5082:	42bd      	cmp	r5, r7
   b5084:	d00c      	beq.n	b50a0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5086:	6833      	ldr	r3, [r6, #0]
   b5088:	f815 1b01 	ldrb.w	r1, [r5], #1
   b508c:	689b      	ldr	r3, [r3, #8]
   b508e:	4630      	mov	r0, r6
   b5090:	4798      	blx	r3
     if (chunk>=0)
   b5092:	1e03      	subs	r3, r0, #0
   b5094:	db01      	blt.n	b509a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5096:	441c      	add	r4, r3
  while (size--) {
   b5098:	e7f3      	b.n	b5082 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b509a:	2c00      	cmp	r4, #0
   b509c:	bf08      	it	eq
   b509e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b50a0:	4620      	mov	r0, r4
   b50a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b50a4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b50a4:	b513      	push	{r0, r1, r4, lr}
   b50a6:	4604      	mov	r4, r0
    }
   b50a8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b50aa:	b159      	cbz	r1, b50c4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b50ac:	9101      	str	r1, [sp, #4]
   b50ae:	f001 f929 	bl	b6304 <strlen>
   b50b2:	6823      	ldr	r3, [r4, #0]
   b50b4:	9901      	ldr	r1, [sp, #4]
   b50b6:	68db      	ldr	r3, [r3, #12]
   b50b8:	4602      	mov	r2, r0
   b50ba:	4620      	mov	r0, r4
    }
   b50bc:	b002      	add	sp, #8
   b50be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b50c2:	4718      	bx	r3
    }
   b50c4:	b002      	add	sp, #8
   b50c6:	bd10      	pop	{r4, pc}

000b50c8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b50c8:	b508      	push	{r3, lr}
  return write(str);
   b50ca:	f7ff ffeb 	bl	b50a4 <_ZN5Print5writeEPKc>
}
   b50ce:	bd08      	pop	{r3, pc}

000b50d0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b50d0:	6803      	ldr	r3, [r0, #0]
   b50d2:	689b      	ldr	r3, [r3, #8]
   b50d4:	4718      	bx	r3

000b50d6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b50d6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b50d8:	210d      	movs	r1, #13
{
   b50da:	4605      	mov	r5, r0
  size_t n = print('\r');
   b50dc:	f7ff fff8 	bl	b50d0 <_ZN5Print5printEc>
  n += print('\n');
   b50e0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b50e2:	4604      	mov	r4, r0
  n += print('\n');
   b50e4:	4628      	mov	r0, r5
   b50e6:	f7ff fff3 	bl	b50d0 <_ZN5Print5printEc>
  return n;
}
   b50ea:	4420      	add	r0, r4
   b50ec:	bd38      	pop	{r3, r4, r5, pc}

000b50ee <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b50ee:	b538      	push	{r3, r4, r5, lr}
   b50f0:	4605      	mov	r5, r0
  return write(str);
   b50f2:	f7ff ffd7 	bl	b50a4 <_ZN5Print5writeEPKc>
   b50f6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b50f8:	4628      	mov	r0, r5
   b50fa:	f7ff ffec 	bl	b50d6 <_ZN5Print7printlnEv>
  return n;
}
   b50fe:	4420      	add	r0, r4
   b5100:	bd38      	pop	{r3, r4, r5, pc}

000b5102 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5102:	b530      	push	{r4, r5, lr}
   b5104:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5106:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5108:	2a01      	cmp	r2, #1
  *str = '\0';
   b510a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b510e:	bf98      	it	ls
   b5110:	220a      	movls	r2, #10
   b5112:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5114:	460d      	mov	r5, r1
   b5116:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b511a:	fb01 5312 	mls	r3, r1, r2, r5
   b511e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5122:	2b09      	cmp	r3, #9
   b5124:	bf94      	ite	ls
   b5126:	3330      	addls	r3, #48	; 0x30
   b5128:	3337      	addhi	r3, #55	; 0x37
   b512a:	b2db      	uxtb	r3, r3
  } while(n);
   b512c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b512e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5132:	d9ef      	bls.n	b5114 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5134:	4621      	mov	r1, r4
   b5136:	f7ff ffb5 	bl	b50a4 <_ZN5Print5writeEPKc>
}
   b513a:	b00b      	add	sp, #44	; 0x2c
   b513c:	bd30      	pop	{r4, r5, pc}
	...

000b5140 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b5140:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5144:	ec55 4b10 	vmov	r4, r5, d0
   b5148:	4606      	mov	r6, r0
   b514a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b514c:	ee10 2a10 	vmov	r2, s0
   b5150:	ee10 0a10 	vmov	r0, s0
   b5154:	462b      	mov	r3, r5
   b5156:	4629      	mov	r1, r5
   b5158:	f000 ffdc 	bl	b6114 <__aeabi_dcmpun>
   b515c:	b140      	cbz	r0, b5170 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b515e:	4953      	ldr	r1, [pc, #332]	; (b52ac <_ZN5Print10printFloatEdh+0x16c>)
   b5160:	4630      	mov	r0, r6
   b5162:	f7ff ff9f 	bl	b50a4 <_ZN5Print5writeEPKc>
   b5166:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b5168:	4650      	mov	r0, sl
   b516a:	b003      	add	sp, #12
   b516c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b5170:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b5174:	4b4e      	ldr	r3, [pc, #312]	; (b52b0 <_ZN5Print10printFloatEdh+0x170>)
   b5176:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b517a:	4620      	mov	r0, r4
   b517c:	4649      	mov	r1, r9
   b517e:	f000 ffc9 	bl	b6114 <__aeabi_dcmpun>
   b5182:	b948      	cbnz	r0, b5198 <_ZN5Print10printFloatEdh+0x58>
   b5184:	4b4a      	ldr	r3, [pc, #296]	; (b52b0 <_ZN5Print10printFloatEdh+0x170>)
   b5186:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b518a:	4620      	mov	r0, r4
   b518c:	4649      	mov	r1, r9
   b518e:	f000 ffa3 	bl	b60d8 <__aeabi_dcmple>
   b5192:	b908      	cbnz	r0, b5198 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b5194:	4947      	ldr	r1, [pc, #284]	; (b52b4 <_ZN5Print10printFloatEdh+0x174>)
   b5196:	e7e3      	b.n	b5160 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b5198:	4b47      	ldr	r3, [pc, #284]	; (b52b8 <_ZN5Print10printFloatEdh+0x178>)
   b519a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b519e:	4620      	mov	r0, r4
   b51a0:	4629      	mov	r1, r5
   b51a2:	f000 ffad 	bl	b6100 <__aeabi_dcmpgt>
   b51a6:	b108      	cbz	r0, b51ac <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b51a8:	4944      	ldr	r1, [pc, #272]	; (b52bc <_ZN5Print10printFloatEdh+0x17c>)
   b51aa:	e7d9      	b.n	b5160 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b51ac:	4b44      	ldr	r3, [pc, #272]	; (b52c0 <_ZN5Print10printFloatEdh+0x180>)
   b51ae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b51b2:	4620      	mov	r0, r4
   b51b4:	4629      	mov	r1, r5
   b51b6:	f000 ff85 	bl	b60c4 <__aeabi_dcmplt>
   b51ba:	2800      	cmp	r0, #0
   b51bc:	d1f4      	bne.n	b51a8 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b51be:	2200      	movs	r2, #0
   b51c0:	2300      	movs	r3, #0
   b51c2:	4620      	mov	r0, r4
   b51c4:	4629      	mov	r1, r5
   b51c6:	f000 ff7d 	bl	b60c4 <__aeabi_dcmplt>
   b51ca:	b1d0      	cbz	r0, b5202 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b51cc:	212d      	movs	r1, #45	; 0x2d
   b51ce:	4630      	mov	r0, r6
   b51d0:	f7ff ff7e 	bl	b50d0 <_ZN5Print5printEc>
     number = -number;
   b51d4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b51d8:	4682      	mov	sl, r0
     number = -number;
   b51da:	461d      	mov	r5, r3
  double rounding = 0.5;
   b51dc:	4939      	ldr	r1, [pc, #228]	; (b52c4 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b51de:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b52cc <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b51e2:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b51e6:	2000      	movs	r0, #0
    rounding /= 10.0;
   b51e8:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b51ec:	fa5f f38b 	uxtb.w	r3, fp
   b51f0:	429f      	cmp	r7, r3
   b51f2:	d908      	bls.n	b5206 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b51f4:	4642      	mov	r2, r8
   b51f6:	464b      	mov	r3, r9
   b51f8:	f000 fe1c 	bl	b5e34 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b51fc:	f10b 0b01 	add.w	fp, fp, #1
   b5200:	e7f4      	b.n	b51ec <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b5202:	4682      	mov	sl, r0
   b5204:	e7ea      	b.n	b51dc <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b5206:	4622      	mov	r2, r4
   b5208:	462b      	mov	r3, r5
   b520a:	f000 fb33 	bl	b5874 <__adddf3>
   b520e:	460d      	mov	r5, r1
   b5210:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b5212:	f000 ffbd 	bl	b6190 <__aeabi_d2uiz>
   b5216:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b5218:	f000 fc68 	bl	b5aec <__aeabi_ui2d>
   b521c:	4602      	mov	r2, r0
   b521e:	460b      	mov	r3, r1
   b5220:	4620      	mov	r0, r4
   b5222:	4629      	mov	r1, r5
   b5224:	f000 fb24 	bl	b5870 <__aeabi_dsub>
        return printNumber(val, base) + t;
   b5228:	220a      	movs	r2, #10
   b522a:	4604      	mov	r4, r0
   b522c:	460d      	mov	r5, r1
   b522e:	4630      	mov	r0, r6
   b5230:	4641      	mov	r1, r8
   b5232:	f7ff ff66 	bl	b5102 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b5236:	4482      	add	sl, r0
  if (digits > 0) {
   b5238:	2f00      	cmp	r7, #0
   b523a:	d095      	beq.n	b5168 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b523c:	4922      	ldr	r1, [pc, #136]	; (b52c8 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b523e:	f8df 908c 	ldr.w	r9, [pc, #140]	; b52cc <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b5242:	4630      	mov	r0, r6
   b5244:	f7ff ff2e 	bl	b50a4 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b5248:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b524c:	4482      	add	sl, r0
  while (digits-- > 0)
   b524e:	2f00      	cmp	r7, #0
   b5250:	d08a      	beq.n	b5168 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b5252:	4642      	mov	r2, r8
   b5254:	464b      	mov	r3, r9
   b5256:	4620      	mov	r0, r4
   b5258:	4629      	mov	r1, r5
   b525a:	f000 fcc1 	bl	b5be0 <__aeabi_dmul>
   b525e:	4604      	mov	r4, r0
   b5260:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b5262:	f000 ff6d 	bl	b6140 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b5266:	f1b0 0b00 	subs.w	fp, r0, #0
   b526a:	da1c      	bge.n	b52a6 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b526c:	212d      	movs	r1, #45	; 0x2d
   b526e:	4630      	mov	r0, r6
   b5270:	f7ff ff2e 	bl	b50d0 <_ZN5Print5printEc>
            val = -n;
   b5274:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b5278:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b527a:	220a      	movs	r2, #10
   b527c:	4630      	mov	r0, r6
   b527e:	9301      	str	r3, [sp, #4]
   b5280:	f7ff ff3f 	bl	b5102 <_ZN5Print11printNumberEmh>
   b5284:	9b01      	ldr	r3, [sp, #4]
   b5286:	4418      	add	r0, r3
    n += print(toPrint);
   b5288:	4482      	add	sl, r0
    remainder -= toPrint;
   b528a:	4658      	mov	r0, fp
   b528c:	f000 fc3e 	bl	b5b0c <__aeabi_i2d>
   b5290:	4602      	mov	r2, r0
   b5292:	460b      	mov	r3, r1
   b5294:	4620      	mov	r0, r4
   b5296:	4629      	mov	r1, r5
   b5298:	f000 faea 	bl	b5870 <__aeabi_dsub>
   b529c:	3f01      	subs	r7, #1
   b529e:	4604      	mov	r4, r0
   b52a0:	460d      	mov	r5, r1
   b52a2:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b52a4:	e7d3      	b.n	b524e <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b52a6:	4659      	mov	r1, fp
        size_t t = 0;
   b52a8:	2300      	movs	r3, #0
   b52aa:	e7e6      	b.n	b527a <_ZN5Print10printFloatEdh+0x13a>
   b52ac:	000b6530 	.word	0x000b6530
   b52b0:	7fefffff 	.word	0x7fefffff
   b52b4:	000b6534 	.word	0x000b6534
   b52b8:	41efffff 	.word	0x41efffff
   b52bc:	000b6538 	.word	0x000b6538
   b52c0:	c1efffff 	.word	0xc1efffff
   b52c4:	3fe00000 	.word	0x3fe00000
   b52c8:	000b653c 	.word	0x000b653c
   b52cc:	40240000 	.word	0x40240000

000b52d0 <_ZN5Print5printEfi>:
{
   b52d0:	b538      	push	{r3, r4, r5, lr}
   b52d2:	4604      	mov	r4, r0
   b52d4:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   b52d8:	b2cd      	uxtb	r5, r1
   b52da:	f000 fc29 	bl	b5b30 <__aeabi_f2d>
   b52de:	ec41 0b10 	vmov	d0, r0, r1
   b52e2:	4629      	mov	r1, r5
   b52e4:	4620      	mov	r0, r4
}
   b52e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   b52ea:	f7ff bf29 	b.w	b5140 <_ZN5Print10printFloatEdh>
	...

000b52f0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b52f0:	4b01      	ldr	r3, [pc, #4]	; (b52f8 <_GLOBAL__sub_I_RGB+0x8>)
   b52f2:	2200      	movs	r2, #0
   b52f4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b52f6:	4770      	bx	lr
   b52f8:	2003e6d0 	.word	0x2003e6d0

000b52fc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b52fc:	b510      	push	{r4, lr}
   b52fe:	4604      	mov	r4, r0
   b5300:	4608      	mov	r0, r1
{
    _spi = spi;
   b5302:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5304:	f7ff fb78 	bl	b49f8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5308:	2300      	movs	r3, #0
   b530a:	6063      	str	r3, [r4, #4]
}
   b530c:	4620      	mov	r0, r4
   b530e:	bd10      	pop	{r4, pc}

000b5310 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5310:	4b05      	ldr	r3, [pc, #20]	; (b5328 <_GLOBAL__sub_I_System+0x18>)
   b5312:	2202      	movs	r2, #2
   b5314:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5316:	4b05      	ldr	r3, [pc, #20]	; (b532c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5318:	4a05      	ldr	r2, [pc, #20]	; (b5330 <_GLOBAL__sub_I_System+0x20>)
   b531a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b531c:	2000      	movs	r0, #0
   b531e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5322:	f7ff bbf9 	b.w	b4b18 <set_system_mode>
   b5326:	bf00      	nop
   b5328:	2003e6ec 	.word	0x2003e6ec
   b532c:	2003e6e0 	.word	0x2003e6e0
   b5330:	ffff0000 	.word	0xffff0000

000b5334 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5334:	4b02      	ldr	r3, [pc, #8]	; (b5340 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5336:	681a      	ldr	r2, [r3, #0]
   b5338:	4b02      	ldr	r3, [pc, #8]	; (b5344 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b533a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b533c:	4770      	bx	lr
   b533e:	bf00      	nop
   b5340:	2003e5f4 	.word	0x2003e5f4
   b5344:	2003e6f0 	.word	0x2003e6f0

000b5348 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5348:	4770      	bx	lr

000b534a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b534a:	7441      	strb	r1, [r0, #17]
}
   b534c:	4770      	bx	lr

000b534e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b534e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5350:	7c00      	ldrb	r0, [r0, #16]
   b5352:	f7ff fb91 	bl	b4a78 <hal_usart_available_data_for_write>
}
   b5356:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b535a:	bd08      	pop	{r3, pc}

000b535c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b535c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b535e:	7c00      	ldrb	r0, [r0, #16]
   b5360:	f7ff fb62 	bl	b4a28 <hal_usart_available>
}
   b5364:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5368:	bd08      	pop	{r3, pc}

000b536a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b536a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b536c:	7c00      	ldrb	r0, [r0, #16]
   b536e:	f7ff fb6b 	bl	b4a48 <hal_usart_peek>
}
   b5372:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5376:	bd08      	pop	{r3, pc}

000b5378 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5378:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b537a:	7c00      	ldrb	r0, [r0, #16]
   b537c:	f7ff fb5c 	bl	b4a38 <hal_usart_read>
}
   b5380:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5384:	bd08      	pop	{r3, pc}

000b5386 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5386:	7c00      	ldrb	r0, [r0, #16]
   b5388:	f7ff bb66 	b.w	b4a58 <hal_usart_flush>

000b538c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b538c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b538e:	7c45      	ldrb	r5, [r0, #17]
{
   b5390:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5392:	b12d      	cbz	r5, b53a0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5394:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5396:	b003      	add	sp, #12
   b5398:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b539c:	f7ff bb3c 	b.w	b4a18 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b53a0:	7c00      	ldrb	r0, [r0, #16]
   b53a2:	9101      	str	r1, [sp, #4]
   b53a4:	f7ff fb68 	bl	b4a78 <hal_usart_available_data_for_write>
   b53a8:	2800      	cmp	r0, #0
   b53aa:	9901      	ldr	r1, [sp, #4]
   b53ac:	dcf2      	bgt.n	b5394 <_ZN11USARTSerial5writeEh+0x8>
}
   b53ae:	4628      	mov	r0, r5
   b53b0:	b003      	add	sp, #12
   b53b2:	bd30      	pop	{r4, r5, pc}

000b53b4 <_ZN11USARTSerialD0Ev>:
   b53b4:	b510      	push	{r4, lr}
   b53b6:	2114      	movs	r1, #20
   b53b8:	4604      	mov	r4, r0
   b53ba:	f7fe fe6e 	bl	b409a <_ZdlPvj>
   b53be:	4620      	mov	r0, r4
   b53c0:	bd10      	pop	{r4, pc}
	...

000b53c4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b53c4:	b510      	push	{r4, lr}
   b53c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b53ca:	4604      	mov	r4, r0
   b53cc:	4608      	mov	r0, r1
   b53ce:	4611      	mov	r1, r2
   b53d0:	2200      	movs	r2, #0
   b53d2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b53d6:	4b04      	ldr	r3, [pc, #16]	; (b53e8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b53d8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b53da:	2301      	movs	r3, #1
  _serial = serial;
   b53dc:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b53de:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b53e0:	f7ff fb5a 	bl	b4a98 <hal_usart_init_ex>
}
   b53e4:	4620      	mov	r0, r4
   b53e6:	bd10      	pop	{r4, pc}
   b53e8:	000b6564 	.word	0x000b6564

000b53ec <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b53ec:	7c00      	ldrb	r0, [r0, #16]
   b53ee:	2300      	movs	r3, #0
   b53f0:	f7ff bb4a 	b.w	b4a88 <hal_usart_begin_config>

000b53f4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b53f4:	2200      	movs	r2, #0
   b53f6:	f7ff bff9 	b.w	b53ec <_ZN11USARTSerial5beginEmm>

000b53fa <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b53fa:	7441      	strb	r1, [r0, #17]
}
   b53fc:	4770      	bx	lr

000b53fe <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b53fe:	4770      	bx	lr

000b5400 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5400:	4770      	bx	lr

000b5402 <_ZN9USBSerial4readEv>:
{
   b5402:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5404:	2100      	movs	r1, #0
   b5406:	7c00      	ldrb	r0, [r0, #16]
   b5408:	f7ff fb6e 	bl	b4ae8 <HAL_USB_USART_Receive_Data>
}
   b540c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5410:	bd08      	pop	{r3, pc}

000b5412 <_ZN9USBSerial4peekEv>:
{
   b5412:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5414:	2101      	movs	r1, #1
   b5416:	7c00      	ldrb	r0, [r0, #16]
   b5418:	f7ff fb66 	bl	b4ae8 <HAL_USB_USART_Receive_Data>
}
   b541c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5420:	bd08      	pop	{r3, pc}

000b5422 <_ZN9USBSerial17availableForWriteEv>:
{
   b5422:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5424:	7c00      	ldrb	r0, [r0, #16]
   b5426:	f7ff fb57 	bl	b4ad8 <HAL_USB_USART_Available_Data_For_Write>
}
   b542a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b542e:	bd08      	pop	{r3, pc}

000b5430 <_ZN9USBSerial9availableEv>:
{
   b5430:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5432:	7c00      	ldrb	r0, [r0, #16]
   b5434:	f7ff fb48 	bl	b4ac8 <HAL_USB_USART_Available_Data>
}
   b5438:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b543c:	bd08      	pop	{r3, pc}

000b543e <_ZN9USBSerial5writeEh>:
{
   b543e:	b513      	push	{r0, r1, r4, lr}
   b5440:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5442:	7c00      	ldrb	r0, [r0, #16]
{
   b5444:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5446:	f7ff fb47 	bl	b4ad8 <HAL_USB_USART_Available_Data_For_Write>
   b544a:	2800      	cmp	r0, #0
   b544c:	9901      	ldr	r1, [sp, #4]
   b544e:	dc01      	bgt.n	b5454 <_ZN9USBSerial5writeEh+0x16>
   b5450:	7c60      	ldrb	r0, [r4, #17]
   b5452:	b120      	cbz	r0, b545e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5454:	7c20      	ldrb	r0, [r4, #16]
   b5456:	f7ff fb4f 	bl	b4af8 <HAL_USB_USART_Send_Data>
   b545a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b545e:	b002      	add	sp, #8
   b5460:	bd10      	pop	{r4, pc}

000b5462 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5462:	7c00      	ldrb	r0, [r0, #16]
   b5464:	f7ff bb50 	b.w	b4b08 <HAL_USB_USART_Flush_Data>

000b5468 <_ZN9USBSerialD0Ev>:
   b5468:	b510      	push	{r4, lr}
   b546a:	2114      	movs	r1, #20
   b546c:	4604      	mov	r4, r0
   b546e:	f7fe fe14 	bl	b409a <_ZdlPvj>
   b5472:	4620      	mov	r0, r4
   b5474:	bd10      	pop	{r4, pc}
	...

000b5478 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5478:	b510      	push	{r4, lr}
   b547a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b547e:	4604      	mov	r4, r0
   b5480:	4608      	mov	r0, r1
   b5482:	2100      	movs	r1, #0
   b5484:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5488:	4b04      	ldr	r3, [pc, #16]	; (b549c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b548a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b548c:	2301      	movs	r3, #1
  _serial = serial;
   b548e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5490:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5492:	4611      	mov	r1, r2
   b5494:	f7ff fb08 	bl	b4aa8 <HAL_USB_USART_Init>
}
   b5498:	4620      	mov	r0, r4
   b549a:	bd10      	pop	{r4, pc}
   b549c:	000b6594 	.word	0x000b6594

000b54a0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b54a0:	7c00      	ldrb	r0, [r0, #16]
   b54a2:	2200      	movs	r2, #0
   b54a4:	f7ff bb08 	b.w	b4ab8 <HAL_USB_USART_Begin>

000b54a8 <_Z19acquireSerialBufferv>:
{
   b54a8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b54aa:	2214      	movs	r2, #20
{
   b54ac:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b54ae:	2100      	movs	r1, #0
   b54b0:	f000 fef2 	bl	b6298 <memset>
}
   b54b4:	4620      	mov	r0, r4
   b54b6:	bd10      	pop	{r4, pc}

000b54b8 <_Z16_fetch_usbserialv>:
{
   b54b8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b54ba:	4c0f      	ldr	r4, [pc, #60]	; (b54f8 <_Z16_fetch_usbserialv+0x40>)
{
   b54bc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b54be:	a803      	add	r0, sp, #12
   b54c0:	f7ff fff2 	bl	b54a8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b54c4:	7821      	ldrb	r1, [r4, #0]
   b54c6:	f3bf 8f5b 	dmb	ish
   b54ca:	f011 0101 	ands.w	r1, r1, #1
   b54ce:	d10f      	bne.n	b54f0 <_Z16_fetch_usbserialv+0x38>
   b54d0:	4620      	mov	r0, r4
   b54d2:	9101      	str	r1, [sp, #4]
   b54d4:	f7fe fde3 	bl	b409e <__cxa_guard_acquire>
   b54d8:	9901      	ldr	r1, [sp, #4]
   b54da:	b148      	cbz	r0, b54f0 <_Z16_fetch_usbserialv+0x38>
   b54dc:	aa03      	add	r2, sp, #12
   b54de:	4807      	ldr	r0, [pc, #28]	; (b54fc <_Z16_fetch_usbserialv+0x44>)
   b54e0:	f7ff ffca 	bl	b5478 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b54e4:	4620      	mov	r0, r4
   b54e6:	f7fe fddf 	bl	b40a8 <__cxa_guard_release>
   b54ea:	4805      	ldr	r0, [pc, #20]	; (b5500 <_Z16_fetch_usbserialv+0x48>)
   b54ec:	f000 fec0 	bl	b6270 <atexit>
	return _usbserial;
}
   b54f0:	4802      	ldr	r0, [pc, #8]	; (b54fc <_Z16_fetch_usbserialv+0x44>)
   b54f2:	b008      	add	sp, #32
   b54f4:	bd10      	pop	{r4, pc}
   b54f6:	bf00      	nop
   b54f8:	2003e6f4 	.word	0x2003e6f4
   b54fc:	2003e6f8 	.word	0x2003e6f8
   b5500:	000b53ff 	.word	0x000b53ff

000b5504 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5504:	2200      	movs	r2, #0
   b5506:	6840      	ldr	r0, [r0, #4]
   b5508:	4611      	mov	r1, r2
   b550a:	f7ff bb49 	b.w	b4ba0 <network_ready>

000b550e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b550e:	2200      	movs	r2, #0
   b5510:	6840      	ldr	r0, [r0, #4]
   b5512:	4611      	mov	r1, r2
   b5514:	f7ff bb64 	b.w	b4be0 <network_listening>

000b5518 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5518:	2200      	movs	r2, #0
   b551a:	6840      	ldr	r0, [r0, #4]
   b551c:	4611      	mov	r1, r2
   b551e:	f7ff bb6f 	b.w	b4c00 <network_get_listen_timeout>

000b5522 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5522:	6840      	ldr	r0, [r0, #4]
   b5524:	2200      	movs	r2, #0
   b5526:	f7ff bb63 	b.w	b4bf0 <network_set_listen_timeout>

000b552a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b552a:	6840      	ldr	r0, [r0, #4]
   b552c:	2200      	movs	r2, #0
   b552e:	f081 0101 	eor.w	r1, r1, #1
   b5532:	f7ff bb4d 	b.w	b4bd0 <network_listen>

000b5536 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5536:	2300      	movs	r3, #0
   b5538:	6840      	ldr	r0, [r0, #4]
   b553a:	461a      	mov	r2, r3
   b553c:	4619      	mov	r1, r3
   b553e:	f7ff bb3f 	b.w	b4bc0 <network_off>

000b5542 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5542:	2300      	movs	r3, #0
   b5544:	6840      	ldr	r0, [r0, #4]
   b5546:	461a      	mov	r2, r3
   b5548:	4619      	mov	r1, r3
   b554a:	f7ff bb31 	b.w	b4bb0 <network_on>

000b554e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b554e:	2200      	movs	r2, #0
   b5550:	6840      	ldr	r0, [r0, #4]
   b5552:	4611      	mov	r1, r2
   b5554:	f7ff bb14 	b.w	b4b80 <network_connecting>

000b5558 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5558:	6840      	ldr	r0, [r0, #4]
   b555a:	2200      	movs	r2, #0
   b555c:	2102      	movs	r1, #2
   b555e:	f7ff bb17 	b.w	b4b90 <network_disconnect>

000b5562 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5562:	2300      	movs	r3, #0
   b5564:	6840      	ldr	r0, [r0, #4]
   b5566:	461a      	mov	r2, r3
   b5568:	f7ff bb02 	b.w	b4b70 <network_connect>

000b556c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b556c:	4b02      	ldr	r3, [pc, #8]	; (b5578 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b556e:	2204      	movs	r2, #4
   b5570:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5572:	4a02      	ldr	r2, [pc, #8]	; (b557c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5574:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5576:	4770      	bx	lr
   b5578:	2003e70c 	.word	0x2003e70c
   b557c:	000b65c4 	.word	0x000b65c4

000b5580 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5580:	4b01      	ldr	r3, [pc, #4]	; (b5588 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5582:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5584:	4770      	bx	lr
   b5586:	bf00      	nop
   b5588:	2003e5f8 	.word	0x2003e5f8

000b558c <serialEventRun>:
{
   b558c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b558e:	4b0b      	ldr	r3, [pc, #44]	; (b55bc <serialEventRun+0x30>)
   b5590:	b143      	cbz	r3, b55a4 <serialEventRun+0x18>
   b5592:	f7ff ff91 	bl	b54b8 <_Z16_fetch_usbserialv>
   b5596:	6803      	ldr	r3, [r0, #0]
   b5598:	691b      	ldr	r3, [r3, #16]
   b559a:	4798      	blx	r3
   b559c:	2800      	cmp	r0, #0
   b559e:	dd01      	ble.n	b55a4 <serialEventRun+0x18>
        serialEvent();
   b55a0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b55a4:	4b06      	ldr	r3, [pc, #24]	; (b55c0 <serialEventRun+0x34>)
   b55a6:	b143      	cbz	r3, b55ba <serialEventRun+0x2e>
   b55a8:	f000 f938 	bl	b581c <_Z22__fetch_global_Serial1v>
   b55ac:	6803      	ldr	r3, [r0, #0]
   b55ae:	691b      	ldr	r3, [r3, #16]
   b55b0:	4798      	blx	r3
   b55b2:	2800      	cmp	r0, #0
   b55b4:	dd01      	ble.n	b55ba <serialEventRun+0x2e>
        serialEvent1();
   b55b6:	f3af 8000 	nop.w
}
   b55ba:	bd08      	pop	{r3, pc}
	...

000b55c4 <_post_loop>:
{
   b55c4:	b508      	push	{r3, lr}
	serialEventRun();
   b55c6:	f7ff ffe1 	bl	b558c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b55ca:	f7ff f98d 	bl	b48e8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b55ce:	4b01      	ldr	r3, [pc, #4]	; (b55d4 <_post_loop+0x10>)
   b55d0:	6018      	str	r0, [r3, #0]
}
   b55d2:	bd08      	pop	{r3, pc}
   b55d4:	2003e728 	.word	0x2003e728

000b55d8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b55d8:	4805      	ldr	r0, [pc, #20]	; (b55f0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b55da:	4a06      	ldr	r2, [pc, #24]	; (b55f4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b55dc:	4906      	ldr	r1, [pc, #24]	; (b55f8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b55de:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b55e0:	1a12      	subs	r2, r2, r0
   b55e2:	f000 fe4b 	bl	b627c <memcpy>
    __backup_sram_signature = signature;
   b55e6:	4b05      	ldr	r3, [pc, #20]	; (b55fc <_Z33system_initialize_user_backup_ramv+0x24>)
   b55e8:	4a05      	ldr	r2, [pc, #20]	; (b5600 <_Z33system_initialize_user_backup_ramv+0x28>)
   b55ea:	601a      	str	r2, [r3, #0]
}
   b55ec:	bd08      	pop	{r3, pc}
   b55ee:	bf00      	nop
   b55f0:	2003f400 	.word	0x2003f400
   b55f4:	2003f404 	.word	0x2003f404
   b55f8:	000b66b4 	.word	0x000b66b4
   b55fc:	2003f400 	.word	0x2003f400
   b5600:	9a271c1e 	.word	0x9a271c1e

000b5604 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5604:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5606:	2300      	movs	r3, #0
   b5608:	9300      	str	r3, [sp, #0]
   b560a:	461a      	mov	r2, r3
   b560c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5610:	f7ff fa9c 	bl	b4b4c <system_ctrl_set_result>
}
   b5614:	b003      	add	sp, #12
   b5616:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b561c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b561c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b561e:	8843      	ldrh	r3, [r0, #2]
   b5620:	2b0a      	cmp	r3, #10
   b5622:	d008      	beq.n	b5636 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5624:	2b50      	cmp	r3, #80	; 0x50
   b5626:	d10b      	bne.n	b5640 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5628:	4b09      	ldr	r3, [pc, #36]	; (b5650 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b562a:	681b      	ldr	r3, [r3, #0]
   b562c:	b14b      	cbz	r3, b5642 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b562e:	b003      	add	sp, #12
   b5630:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5634:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5636:	f7ff ffe5 	bl	b5604 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b563a:	b003      	add	sp, #12
   b563c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5640:	2300      	movs	r3, #0
   b5642:	9300      	str	r3, [sp, #0]
   b5644:	461a      	mov	r2, r3
   b5646:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b564a:	f7ff fa7f 	bl	b4b4c <system_ctrl_set_result>
}
   b564e:	e7f4      	b.n	b563a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5650:	2003e718 	.word	0x2003e718

000b5654 <module_user_init_hook>:
{
   b5654:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5656:	4812      	ldr	r0, [pc, #72]	; (b56a0 <module_user_init_hook+0x4c>)
   b5658:	2100      	movs	r1, #0
   b565a:	f7ff fb01 	bl	b4c60 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b565e:	4b11      	ldr	r3, [pc, #68]	; (b56a4 <module_user_init_hook+0x50>)
   b5660:	681a      	ldr	r2, [r3, #0]
   b5662:	4b11      	ldr	r3, [pc, #68]	; (b56a8 <module_user_init_hook+0x54>)
   b5664:	429a      	cmp	r2, r3
   b5666:	4b11      	ldr	r3, [pc, #68]	; (b56ac <module_user_init_hook+0x58>)
   b5668:	bf0c      	ite	eq
   b566a:	2201      	moveq	r2, #1
   b566c:	2200      	movne	r2, #0
   b566e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5670:	d001      	beq.n	b5676 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5672:	f7ff ffb1 	bl	b55d8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5676:	f7ff f927 	bl	b48c8 <HAL_RNG_GetRandomNumber>
   b567a:	4604      	mov	r4, r0
    srand(seed);
   b567c:	f000 fe14 	bl	b62a8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5680:	4b0b      	ldr	r3, [pc, #44]	; (b56b0 <module_user_init_hook+0x5c>)
   b5682:	b113      	cbz	r3, b568a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5684:	4620      	mov	r0, r4
   b5686:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b568a:	2100      	movs	r1, #0
   b568c:	4808      	ldr	r0, [pc, #32]	; (b56b0 <module_user_init_hook+0x5c>)
   b568e:	f7ff fa67 	bl	b4b60 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5696:	4807      	ldr	r0, [pc, #28]	; (b56b4 <module_user_init_hook+0x60>)
   b5698:	2100      	movs	r1, #0
   b569a:	f7ff ba4d 	b.w	b4b38 <system_ctrl_set_app_request_handler>
   b569e:	bf00      	nop
   b56a0:	000b5581 	.word	0x000b5581
   b56a4:	2003f400 	.word	0x2003f400
   b56a8:	9a271c1e 	.word	0x9a271c1e
   b56ac:	2003e714 	.word	0x2003e714
   b56b0:	00000000 	.word	0x00000000
   b56b4:	000b561d 	.word	0x000b561d

000b56b8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b56b8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b56ba:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b56bc:	d902      	bls.n	b56c4 <pinAvailable+0xc>
    return false;
   b56be:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b56c0:	b002      	add	sp, #8
   b56c2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b56c4:	f1a0 030b 	sub.w	r3, r0, #11
   b56c8:	2b02      	cmp	r3, #2
   b56ca:	d81a      	bhi.n	b5702 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b56cc:	4c17      	ldr	r4, [pc, #92]	; (b572c <pinAvailable+0x74>)
   b56ce:	7821      	ldrb	r1, [r4, #0]
   b56d0:	f3bf 8f5b 	dmb	ish
   b56d4:	f011 0101 	ands.w	r1, r1, #1
   b56d8:	d10b      	bne.n	b56f2 <pinAvailable+0x3a>
   b56da:	4620      	mov	r0, r4
   b56dc:	9101      	str	r1, [sp, #4]
   b56de:	f7fe fcde 	bl	b409e <__cxa_guard_acquire>
   b56e2:	9901      	ldr	r1, [sp, #4]
   b56e4:	b128      	cbz	r0, b56f2 <pinAvailable+0x3a>
   b56e6:	4812      	ldr	r0, [pc, #72]	; (b5730 <pinAvailable+0x78>)
   b56e8:	f7ff fe08 	bl	b52fc <_ZN8SPIClassC1E19hal_spi_interface_t>
   b56ec:	4620      	mov	r0, r4
   b56ee:	f7fe fcdb 	bl	b40a8 <__cxa_guard_release>
   b56f2:	4b0f      	ldr	r3, [pc, #60]	; (b5730 <pinAvailable+0x78>)
   b56f4:	7818      	ldrb	r0, [r3, #0]
   b56f6:	f7ff f987 	bl	b4a08 <hal_spi_is_enabled>
   b56fa:	2800      	cmp	r0, #0
   b56fc:	d1df      	bne.n	b56be <pinAvailable+0x6>
  return true; // 'pin' is available
   b56fe:	2001      	movs	r0, #1
   b5700:	e7de      	b.n	b56c0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5702:	2801      	cmp	r0, #1
   b5704:	d809      	bhi.n	b571a <pinAvailable+0x62>
   b5706:	f000 f849 	bl	b579c <_Z19__fetch_global_Wirev>
   b570a:	2100      	movs	r1, #0
   b570c:	7c00      	ldrb	r0, [r0, #16]
   b570e:	f7ff f943 	bl	b4998 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5712:	f080 0001 	eor.w	r0, r0, #1
   b5716:	b2c0      	uxtb	r0, r0
   b5718:	e7d2      	b.n	b56c0 <pinAvailable+0x8>
   b571a:	3809      	subs	r0, #9
   b571c:	2801      	cmp	r0, #1
   b571e:	d8ee      	bhi.n	b56fe <pinAvailable+0x46>
   b5720:	f000 f87c 	bl	b581c <_Z22__fetch_global_Serial1v>
   b5724:	7c00      	ldrb	r0, [r0, #16]
   b5726:	f7ff f99f 	bl	b4a68 <hal_usart_is_enabled>
   b572a:	e7f2      	b.n	b5712 <pinAvailable+0x5a>
   b572c:	2003e71c 	.word	0x2003e71c
   b5730:	2003e720 	.word	0x2003e720

000b5734 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b5734:	b538      	push	{r3, r4, r5, lr}
   b5736:	4604      	mov	r4, r0
   b5738:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b573a:	f7ff f8dd 	bl	b48f8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b573e:	28ff      	cmp	r0, #255	; 0xff
   b5740:	d010      	beq.n	b5764 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5742:	2806      	cmp	r0, #6
   b5744:	d804      	bhi.n	b5750 <digitalWrite+0x1c>
   b5746:	234d      	movs	r3, #77	; 0x4d
   b5748:	fa23 f000 	lsr.w	r0, r3, r0
   b574c:	07c3      	lsls	r3, r0, #31
   b574e:	d409      	bmi.n	b5764 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5750:	4620      	mov	r0, r4
   b5752:	f7ff ffb1 	bl	b56b8 <pinAvailable>
   b5756:	b128      	cbz	r0, b5764 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b5758:	4629      	mov	r1, r5
   b575a:	4620      	mov	r0, r4
}
   b575c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b5760:	f7ff b8d2 	b.w	b4908 <HAL_GPIO_Write>
}
   b5764:	bd38      	pop	{r3, r4, r5, pc}

000b5766 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5766:	4770      	bx	lr

000b5768 <_Z17acquireWireBufferv>:
{
   b5768:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b576a:	4b0a      	ldr	r3, [pc, #40]	; (b5794 <_Z17acquireWireBufferv+0x2c>)
   b576c:	6003      	str	r3, [r0, #0]
   b576e:	2301      	movs	r3, #1
{
   b5770:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5772:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5774:	4908      	ldr	r1, [pc, #32]	; (b5798 <_Z17acquireWireBufferv+0x30>)
   b5776:	2020      	movs	r0, #32
   b5778:	f000 f874 	bl	b5864 <_ZnajRKSt9nothrow_t>
	};
   b577c:	2520      	movs	r5, #32
   b577e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5780:	4905      	ldr	r1, [pc, #20]	; (b5798 <_Z17acquireWireBufferv+0x30>)
	};
   b5782:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5784:	4628      	mov	r0, r5
   b5786:	f000 f86d 	bl	b5864 <_ZnajRKSt9nothrow_t>
	};
   b578a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b578e:	4620      	mov	r0, r4
   b5790:	bd38      	pop	{r3, r4, r5, pc}
   b5792:	bf00      	nop
   b5794:	00010018 	.word	0x00010018
   b5798:	000b65f8 	.word	0x000b65f8

000b579c <_Z19__fetch_global_Wirev>:
{
   b579c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b579e:	4d0e      	ldr	r5, [pc, #56]	; (b57d8 <_Z19__fetch_global_Wirev+0x3c>)
   b57a0:	7829      	ldrb	r1, [r5, #0]
   b57a2:	f3bf 8f5b 	dmb	ish
   b57a6:	f011 0401 	ands.w	r4, r1, #1
{
   b57aa:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b57ac:	d111      	bne.n	b57d2 <_Z19__fetch_global_Wirev+0x36>
   b57ae:	4628      	mov	r0, r5
   b57b0:	f7fe fc75 	bl	b409e <__cxa_guard_acquire>
   b57b4:	b168      	cbz	r0, b57d2 <_Z19__fetch_global_Wirev+0x36>
   b57b6:	4668      	mov	r0, sp
   b57b8:	f7ff ffd6 	bl	b5768 <_Z17acquireWireBufferv>
   b57bc:	466a      	mov	r2, sp
   b57be:	4621      	mov	r1, r4
   b57c0:	4806      	ldr	r0, [pc, #24]	; (b57dc <_Z19__fetch_global_Wirev+0x40>)
   b57c2:	f7ff facb 	bl	b4d5c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b57c6:	4628      	mov	r0, r5
   b57c8:	f7fe fc6e 	bl	b40a8 <__cxa_guard_release>
   b57cc:	4804      	ldr	r0, [pc, #16]	; (b57e0 <_Z19__fetch_global_Wirev+0x44>)
   b57ce:	f000 fd4f 	bl	b6270 <atexit>
	return wire;
}
   b57d2:	4802      	ldr	r0, [pc, #8]	; (b57dc <_Z19__fetch_global_Wirev+0x40>)
   b57d4:	b007      	add	sp, #28
   b57d6:	bd30      	pop	{r4, r5, pc}
   b57d8:	2003e72c 	.word	0x2003e72c
   b57dc:	2003e730 	.word	0x2003e730
   b57e0:	000b5767 	.word	0x000b5767

000b57e4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b57e4:	4770      	bx	lr
	...

000b57e8 <_Z20acquireSerial1Bufferv>:
{
   b57e8:	b538      	push	{r3, r4, r5, lr}
   b57ea:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b57ec:	2514      	movs	r5, #20
   b57ee:	462a      	mov	r2, r5
   b57f0:	2100      	movs	r1, #0
   b57f2:	f000 fd51 	bl	b6298 <memset>
   b57f6:	8025      	strh	r5, [r4, #0]
   b57f8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b57fa:	4907      	ldr	r1, [pc, #28]	; (b5818 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b57fc:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b57fe:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5800:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5802:	f000 f82f 	bl	b5864 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5806:	4904      	ldr	r1, [pc, #16]	; (b5818 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5808:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b580a:	4628      	mov	r0, r5
   b580c:	f000 f82a 	bl	b5864 <_ZnajRKSt9nothrow_t>
    };
   b5810:	60e0      	str	r0, [r4, #12]
}
   b5812:	4620      	mov	r0, r4
   b5814:	bd38      	pop	{r3, r4, r5, pc}
   b5816:	bf00      	nop
   b5818:	000b65f8 	.word	0x000b65f8

000b581c <_Z22__fetch_global_Serial1v>:
{
   b581c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b581e:	4d0e      	ldr	r5, [pc, #56]	; (b5858 <_Z22__fetch_global_Serial1v+0x3c>)
   b5820:	7829      	ldrb	r1, [r5, #0]
   b5822:	f3bf 8f5b 	dmb	ish
   b5826:	f011 0401 	ands.w	r4, r1, #1
{
   b582a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b582c:	d111      	bne.n	b5852 <_Z22__fetch_global_Serial1v+0x36>
   b582e:	4628      	mov	r0, r5
   b5830:	f7fe fc35 	bl	b409e <__cxa_guard_acquire>
   b5834:	b168      	cbz	r0, b5852 <_Z22__fetch_global_Serial1v+0x36>
   b5836:	a801      	add	r0, sp, #4
   b5838:	f7ff ffd6 	bl	b57e8 <_Z20acquireSerial1Bufferv>
   b583c:	aa01      	add	r2, sp, #4
   b583e:	4621      	mov	r1, r4
   b5840:	4806      	ldr	r0, [pc, #24]	; (b585c <_Z22__fetch_global_Serial1v+0x40>)
   b5842:	f7ff fdbf 	bl	b53c4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5846:	4628      	mov	r0, r5
   b5848:	f7fe fc2e 	bl	b40a8 <__cxa_guard_release>
   b584c:	4804      	ldr	r0, [pc, #16]	; (b5860 <_Z22__fetch_global_Serial1v+0x44>)
   b584e:	f000 fd0f 	bl	b6270 <atexit>
    return serial1;
}
   b5852:	4802      	ldr	r0, [pc, #8]	; (b585c <_Z22__fetch_global_Serial1v+0x40>)
   b5854:	b007      	add	sp, #28
   b5856:	bd30      	pop	{r4, r5, pc}
   b5858:	2003e744 	.word	0x2003e744
   b585c:	2003e748 	.word	0x2003e748
   b5860:	000b57e5 	.word	0x000b57e5

000b5864 <_ZnajRKSt9nothrow_t>:
   b5864:	f7fe bc17 	b.w	b4096 <_Znaj>

000b5868 <__aeabi_drsub>:
   b5868:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b586c:	e002      	b.n	b5874 <__adddf3>
   b586e:	bf00      	nop

000b5870 <__aeabi_dsub>:
   b5870:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b5874 <__adddf3>:
   b5874:	b530      	push	{r4, r5, lr}
   b5876:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b587a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b587e:	ea94 0f05 	teq	r4, r5
   b5882:	bf08      	it	eq
   b5884:	ea90 0f02 	teqeq	r0, r2
   b5888:	bf1f      	itttt	ne
   b588a:	ea54 0c00 	orrsne.w	ip, r4, r0
   b588e:	ea55 0c02 	orrsne.w	ip, r5, r2
   b5892:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b5896:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b589a:	f000 80e2 	beq.w	b5a62 <__adddf3+0x1ee>
   b589e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b58a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b58a6:	bfb8      	it	lt
   b58a8:	426d      	neglt	r5, r5
   b58aa:	dd0c      	ble.n	b58c6 <__adddf3+0x52>
   b58ac:	442c      	add	r4, r5
   b58ae:	ea80 0202 	eor.w	r2, r0, r2
   b58b2:	ea81 0303 	eor.w	r3, r1, r3
   b58b6:	ea82 0000 	eor.w	r0, r2, r0
   b58ba:	ea83 0101 	eor.w	r1, r3, r1
   b58be:	ea80 0202 	eor.w	r2, r0, r2
   b58c2:	ea81 0303 	eor.w	r3, r1, r3
   b58c6:	2d36      	cmp	r5, #54	; 0x36
   b58c8:	bf88      	it	hi
   b58ca:	bd30      	pophi	{r4, r5, pc}
   b58cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b58d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b58d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b58d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b58dc:	d002      	beq.n	b58e4 <__adddf3+0x70>
   b58de:	4240      	negs	r0, r0
   b58e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b58e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b58e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b58ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b58f0:	d002      	beq.n	b58f8 <__adddf3+0x84>
   b58f2:	4252      	negs	r2, r2
   b58f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b58f8:	ea94 0f05 	teq	r4, r5
   b58fc:	f000 80a7 	beq.w	b5a4e <__adddf3+0x1da>
   b5900:	f1a4 0401 	sub.w	r4, r4, #1
   b5904:	f1d5 0e20 	rsbs	lr, r5, #32
   b5908:	db0d      	blt.n	b5926 <__adddf3+0xb2>
   b590a:	fa02 fc0e 	lsl.w	ip, r2, lr
   b590e:	fa22 f205 	lsr.w	r2, r2, r5
   b5912:	1880      	adds	r0, r0, r2
   b5914:	f141 0100 	adc.w	r1, r1, #0
   b5918:	fa03 f20e 	lsl.w	r2, r3, lr
   b591c:	1880      	adds	r0, r0, r2
   b591e:	fa43 f305 	asr.w	r3, r3, r5
   b5922:	4159      	adcs	r1, r3
   b5924:	e00e      	b.n	b5944 <__adddf3+0xd0>
   b5926:	f1a5 0520 	sub.w	r5, r5, #32
   b592a:	f10e 0e20 	add.w	lr, lr, #32
   b592e:	2a01      	cmp	r2, #1
   b5930:	fa03 fc0e 	lsl.w	ip, r3, lr
   b5934:	bf28      	it	cs
   b5936:	f04c 0c02 	orrcs.w	ip, ip, #2
   b593a:	fa43 f305 	asr.w	r3, r3, r5
   b593e:	18c0      	adds	r0, r0, r3
   b5940:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b5944:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5948:	d507      	bpl.n	b595a <__adddf3+0xe6>
   b594a:	f04f 0e00 	mov.w	lr, #0
   b594e:	f1dc 0c00 	rsbs	ip, ip, #0
   b5952:	eb7e 0000 	sbcs.w	r0, lr, r0
   b5956:	eb6e 0101 	sbc.w	r1, lr, r1
   b595a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b595e:	d31b      	bcc.n	b5998 <__adddf3+0x124>
   b5960:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b5964:	d30c      	bcc.n	b5980 <__adddf3+0x10c>
   b5966:	0849      	lsrs	r1, r1, #1
   b5968:	ea5f 0030 	movs.w	r0, r0, rrx
   b596c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b5970:	f104 0401 	add.w	r4, r4, #1
   b5974:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b5978:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b597c:	f080 809a 	bcs.w	b5ab4 <__adddf3+0x240>
   b5980:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b5984:	bf08      	it	eq
   b5986:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b598a:	f150 0000 	adcs.w	r0, r0, #0
   b598e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b5992:	ea41 0105 	orr.w	r1, r1, r5
   b5996:	bd30      	pop	{r4, r5, pc}
   b5998:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b599c:	4140      	adcs	r0, r0
   b599e:	eb41 0101 	adc.w	r1, r1, r1
   b59a2:	3c01      	subs	r4, #1
   b59a4:	bf28      	it	cs
   b59a6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b59aa:	d2e9      	bcs.n	b5980 <__adddf3+0x10c>
   b59ac:	f091 0f00 	teq	r1, #0
   b59b0:	bf04      	itt	eq
   b59b2:	4601      	moveq	r1, r0
   b59b4:	2000      	moveq	r0, #0
   b59b6:	fab1 f381 	clz	r3, r1
   b59ba:	bf08      	it	eq
   b59bc:	3320      	addeq	r3, #32
   b59be:	f1a3 030b 	sub.w	r3, r3, #11
   b59c2:	f1b3 0220 	subs.w	r2, r3, #32
   b59c6:	da0c      	bge.n	b59e2 <__adddf3+0x16e>
   b59c8:	320c      	adds	r2, #12
   b59ca:	dd08      	ble.n	b59de <__adddf3+0x16a>
   b59cc:	f102 0c14 	add.w	ip, r2, #20
   b59d0:	f1c2 020c 	rsb	r2, r2, #12
   b59d4:	fa01 f00c 	lsl.w	r0, r1, ip
   b59d8:	fa21 f102 	lsr.w	r1, r1, r2
   b59dc:	e00c      	b.n	b59f8 <__adddf3+0x184>
   b59de:	f102 0214 	add.w	r2, r2, #20
   b59e2:	bfd8      	it	le
   b59e4:	f1c2 0c20 	rsble	ip, r2, #32
   b59e8:	fa01 f102 	lsl.w	r1, r1, r2
   b59ec:	fa20 fc0c 	lsr.w	ip, r0, ip
   b59f0:	bfdc      	itt	le
   b59f2:	ea41 010c 	orrle.w	r1, r1, ip
   b59f6:	4090      	lslle	r0, r2
   b59f8:	1ae4      	subs	r4, r4, r3
   b59fa:	bfa2      	ittt	ge
   b59fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b5a00:	4329      	orrge	r1, r5
   b5a02:	bd30      	popge	{r4, r5, pc}
   b5a04:	ea6f 0404 	mvn.w	r4, r4
   b5a08:	3c1f      	subs	r4, #31
   b5a0a:	da1c      	bge.n	b5a46 <__adddf3+0x1d2>
   b5a0c:	340c      	adds	r4, #12
   b5a0e:	dc0e      	bgt.n	b5a2e <__adddf3+0x1ba>
   b5a10:	f104 0414 	add.w	r4, r4, #20
   b5a14:	f1c4 0220 	rsb	r2, r4, #32
   b5a18:	fa20 f004 	lsr.w	r0, r0, r4
   b5a1c:	fa01 f302 	lsl.w	r3, r1, r2
   b5a20:	ea40 0003 	orr.w	r0, r0, r3
   b5a24:	fa21 f304 	lsr.w	r3, r1, r4
   b5a28:	ea45 0103 	orr.w	r1, r5, r3
   b5a2c:	bd30      	pop	{r4, r5, pc}
   b5a2e:	f1c4 040c 	rsb	r4, r4, #12
   b5a32:	f1c4 0220 	rsb	r2, r4, #32
   b5a36:	fa20 f002 	lsr.w	r0, r0, r2
   b5a3a:	fa01 f304 	lsl.w	r3, r1, r4
   b5a3e:	ea40 0003 	orr.w	r0, r0, r3
   b5a42:	4629      	mov	r1, r5
   b5a44:	bd30      	pop	{r4, r5, pc}
   b5a46:	fa21 f004 	lsr.w	r0, r1, r4
   b5a4a:	4629      	mov	r1, r5
   b5a4c:	bd30      	pop	{r4, r5, pc}
   b5a4e:	f094 0f00 	teq	r4, #0
   b5a52:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b5a56:	bf06      	itte	eq
   b5a58:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b5a5c:	3401      	addeq	r4, #1
   b5a5e:	3d01      	subne	r5, #1
   b5a60:	e74e      	b.n	b5900 <__adddf3+0x8c>
   b5a62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b5a66:	bf18      	it	ne
   b5a68:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b5a6c:	d029      	beq.n	b5ac2 <__adddf3+0x24e>
   b5a6e:	ea94 0f05 	teq	r4, r5
   b5a72:	bf08      	it	eq
   b5a74:	ea90 0f02 	teqeq	r0, r2
   b5a78:	d005      	beq.n	b5a86 <__adddf3+0x212>
   b5a7a:	ea54 0c00 	orrs.w	ip, r4, r0
   b5a7e:	bf04      	itt	eq
   b5a80:	4619      	moveq	r1, r3
   b5a82:	4610      	moveq	r0, r2
   b5a84:	bd30      	pop	{r4, r5, pc}
   b5a86:	ea91 0f03 	teq	r1, r3
   b5a8a:	bf1e      	ittt	ne
   b5a8c:	2100      	movne	r1, #0
   b5a8e:	2000      	movne	r0, #0
   b5a90:	bd30      	popne	{r4, r5, pc}
   b5a92:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b5a96:	d105      	bne.n	b5aa4 <__adddf3+0x230>
   b5a98:	0040      	lsls	r0, r0, #1
   b5a9a:	4149      	adcs	r1, r1
   b5a9c:	bf28      	it	cs
   b5a9e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b5aa2:	bd30      	pop	{r4, r5, pc}
   b5aa4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b5aa8:	bf3c      	itt	cc
   b5aaa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b5aae:	bd30      	popcc	{r4, r5, pc}
   b5ab0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5ab4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b5ab8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b5abc:	f04f 0000 	mov.w	r0, #0
   b5ac0:	bd30      	pop	{r4, r5, pc}
   b5ac2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b5ac6:	bf1a      	itte	ne
   b5ac8:	4619      	movne	r1, r3
   b5aca:	4610      	movne	r0, r2
   b5acc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b5ad0:	bf1c      	itt	ne
   b5ad2:	460b      	movne	r3, r1
   b5ad4:	4602      	movne	r2, r0
   b5ad6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b5ada:	bf06      	itte	eq
   b5adc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b5ae0:	ea91 0f03 	teqeq	r1, r3
   b5ae4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b5ae8:	bd30      	pop	{r4, r5, pc}
   b5aea:	bf00      	nop

000b5aec <__aeabi_ui2d>:
   b5aec:	f090 0f00 	teq	r0, #0
   b5af0:	bf04      	itt	eq
   b5af2:	2100      	moveq	r1, #0
   b5af4:	4770      	bxeq	lr
   b5af6:	b530      	push	{r4, r5, lr}
   b5af8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b5afc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b5b00:	f04f 0500 	mov.w	r5, #0
   b5b04:	f04f 0100 	mov.w	r1, #0
   b5b08:	e750      	b.n	b59ac <__adddf3+0x138>
   b5b0a:	bf00      	nop

000b5b0c <__aeabi_i2d>:
   b5b0c:	f090 0f00 	teq	r0, #0
   b5b10:	bf04      	itt	eq
   b5b12:	2100      	moveq	r1, #0
   b5b14:	4770      	bxeq	lr
   b5b16:	b530      	push	{r4, r5, lr}
   b5b18:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b5b1c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b5b20:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b5b24:	bf48      	it	mi
   b5b26:	4240      	negmi	r0, r0
   b5b28:	f04f 0100 	mov.w	r1, #0
   b5b2c:	e73e      	b.n	b59ac <__adddf3+0x138>
   b5b2e:	bf00      	nop

000b5b30 <__aeabi_f2d>:
   b5b30:	0042      	lsls	r2, r0, #1
   b5b32:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b5b36:	ea4f 0131 	mov.w	r1, r1, rrx
   b5b3a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b5b3e:	bf1f      	itttt	ne
   b5b40:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b5b44:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b5b48:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b5b4c:	4770      	bxne	lr
   b5b4e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b5b52:	bf08      	it	eq
   b5b54:	4770      	bxeq	lr
   b5b56:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b5b5a:	bf04      	itt	eq
   b5b5c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b5b60:	4770      	bxeq	lr
   b5b62:	b530      	push	{r4, r5, lr}
   b5b64:	f44f 7460 	mov.w	r4, #896	; 0x380
   b5b68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5b6c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b5b70:	e71c      	b.n	b59ac <__adddf3+0x138>
   b5b72:	bf00      	nop

000b5b74 <__aeabi_ul2d>:
   b5b74:	ea50 0201 	orrs.w	r2, r0, r1
   b5b78:	bf08      	it	eq
   b5b7a:	4770      	bxeq	lr
   b5b7c:	b530      	push	{r4, r5, lr}
   b5b7e:	f04f 0500 	mov.w	r5, #0
   b5b82:	e00a      	b.n	b5b9a <__aeabi_l2d+0x16>

000b5b84 <__aeabi_l2d>:
   b5b84:	ea50 0201 	orrs.w	r2, r0, r1
   b5b88:	bf08      	it	eq
   b5b8a:	4770      	bxeq	lr
   b5b8c:	b530      	push	{r4, r5, lr}
   b5b8e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b5b92:	d502      	bpl.n	b5b9a <__aeabi_l2d+0x16>
   b5b94:	4240      	negs	r0, r0
   b5b96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b5b9a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b5b9e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b5ba2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b5ba6:	f43f aed8 	beq.w	b595a <__adddf3+0xe6>
   b5baa:	f04f 0203 	mov.w	r2, #3
   b5bae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b5bb2:	bf18      	it	ne
   b5bb4:	3203      	addne	r2, #3
   b5bb6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b5bba:	bf18      	it	ne
   b5bbc:	3203      	addne	r2, #3
   b5bbe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b5bc2:	f1c2 0320 	rsb	r3, r2, #32
   b5bc6:	fa00 fc03 	lsl.w	ip, r0, r3
   b5bca:	fa20 f002 	lsr.w	r0, r0, r2
   b5bce:	fa01 fe03 	lsl.w	lr, r1, r3
   b5bd2:	ea40 000e 	orr.w	r0, r0, lr
   b5bd6:	fa21 f102 	lsr.w	r1, r1, r2
   b5bda:	4414      	add	r4, r2
   b5bdc:	e6bd      	b.n	b595a <__adddf3+0xe6>
   b5bde:	bf00      	nop

000b5be0 <__aeabi_dmul>:
   b5be0:	b570      	push	{r4, r5, r6, lr}
   b5be2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b5be6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b5bea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b5bee:	bf1d      	ittte	ne
   b5bf0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b5bf4:	ea94 0f0c 	teqne	r4, ip
   b5bf8:	ea95 0f0c 	teqne	r5, ip
   b5bfc:	f000 f8de 	bleq	b5dbc <__aeabi_dmul+0x1dc>
   b5c00:	442c      	add	r4, r5
   b5c02:	ea81 0603 	eor.w	r6, r1, r3
   b5c06:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b5c0a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b5c0e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b5c12:	bf18      	it	ne
   b5c14:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b5c18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5c1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b5c20:	d038      	beq.n	b5c94 <__aeabi_dmul+0xb4>
   b5c22:	fba0 ce02 	umull	ip, lr, r0, r2
   b5c26:	f04f 0500 	mov.w	r5, #0
   b5c2a:	fbe1 e502 	umlal	lr, r5, r1, r2
   b5c2e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b5c32:	fbe0 e503 	umlal	lr, r5, r0, r3
   b5c36:	f04f 0600 	mov.w	r6, #0
   b5c3a:	fbe1 5603 	umlal	r5, r6, r1, r3
   b5c3e:	f09c 0f00 	teq	ip, #0
   b5c42:	bf18      	it	ne
   b5c44:	f04e 0e01 	orrne.w	lr, lr, #1
   b5c48:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b5c4c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b5c50:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b5c54:	d204      	bcs.n	b5c60 <__aeabi_dmul+0x80>
   b5c56:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b5c5a:	416d      	adcs	r5, r5
   b5c5c:	eb46 0606 	adc.w	r6, r6, r6
   b5c60:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b5c64:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b5c68:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b5c6c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b5c70:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b5c74:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b5c78:	bf88      	it	hi
   b5c7a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b5c7e:	d81e      	bhi.n	b5cbe <__aeabi_dmul+0xde>
   b5c80:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b5c84:	bf08      	it	eq
   b5c86:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b5c8a:	f150 0000 	adcs.w	r0, r0, #0
   b5c8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b5c92:	bd70      	pop	{r4, r5, r6, pc}
   b5c94:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b5c98:	ea46 0101 	orr.w	r1, r6, r1
   b5c9c:	ea40 0002 	orr.w	r0, r0, r2
   b5ca0:	ea81 0103 	eor.w	r1, r1, r3
   b5ca4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b5ca8:	bfc2      	ittt	gt
   b5caa:	ebd4 050c 	rsbsgt	r5, r4, ip
   b5cae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b5cb2:	bd70      	popgt	{r4, r5, r6, pc}
   b5cb4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5cb8:	f04f 0e00 	mov.w	lr, #0
   b5cbc:	3c01      	subs	r4, #1
   b5cbe:	f300 80ab 	bgt.w	b5e18 <__aeabi_dmul+0x238>
   b5cc2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b5cc6:	bfde      	ittt	le
   b5cc8:	2000      	movle	r0, #0
   b5cca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b5cce:	bd70      	pople	{r4, r5, r6, pc}
   b5cd0:	f1c4 0400 	rsb	r4, r4, #0
   b5cd4:	3c20      	subs	r4, #32
   b5cd6:	da35      	bge.n	b5d44 <__aeabi_dmul+0x164>
   b5cd8:	340c      	adds	r4, #12
   b5cda:	dc1b      	bgt.n	b5d14 <__aeabi_dmul+0x134>
   b5cdc:	f104 0414 	add.w	r4, r4, #20
   b5ce0:	f1c4 0520 	rsb	r5, r4, #32
   b5ce4:	fa00 f305 	lsl.w	r3, r0, r5
   b5ce8:	fa20 f004 	lsr.w	r0, r0, r4
   b5cec:	fa01 f205 	lsl.w	r2, r1, r5
   b5cf0:	ea40 0002 	orr.w	r0, r0, r2
   b5cf4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b5cf8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b5cfc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b5d00:	fa21 f604 	lsr.w	r6, r1, r4
   b5d04:	eb42 0106 	adc.w	r1, r2, r6
   b5d08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b5d0c:	bf08      	it	eq
   b5d0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b5d12:	bd70      	pop	{r4, r5, r6, pc}
   b5d14:	f1c4 040c 	rsb	r4, r4, #12
   b5d18:	f1c4 0520 	rsb	r5, r4, #32
   b5d1c:	fa00 f304 	lsl.w	r3, r0, r4
   b5d20:	fa20 f005 	lsr.w	r0, r0, r5
   b5d24:	fa01 f204 	lsl.w	r2, r1, r4
   b5d28:	ea40 0002 	orr.w	r0, r0, r2
   b5d2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5d30:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b5d34:	f141 0100 	adc.w	r1, r1, #0
   b5d38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b5d3c:	bf08      	it	eq
   b5d3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b5d42:	bd70      	pop	{r4, r5, r6, pc}
   b5d44:	f1c4 0520 	rsb	r5, r4, #32
   b5d48:	fa00 f205 	lsl.w	r2, r0, r5
   b5d4c:	ea4e 0e02 	orr.w	lr, lr, r2
   b5d50:	fa20 f304 	lsr.w	r3, r0, r4
   b5d54:	fa01 f205 	lsl.w	r2, r1, r5
   b5d58:	ea43 0302 	orr.w	r3, r3, r2
   b5d5c:	fa21 f004 	lsr.w	r0, r1, r4
   b5d60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5d64:	fa21 f204 	lsr.w	r2, r1, r4
   b5d68:	ea20 0002 	bic.w	r0, r0, r2
   b5d6c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b5d70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b5d74:	bf08      	it	eq
   b5d76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b5d7a:	bd70      	pop	{r4, r5, r6, pc}
   b5d7c:	f094 0f00 	teq	r4, #0
   b5d80:	d10f      	bne.n	b5da2 <__aeabi_dmul+0x1c2>
   b5d82:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b5d86:	0040      	lsls	r0, r0, #1
   b5d88:	eb41 0101 	adc.w	r1, r1, r1
   b5d8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b5d90:	bf08      	it	eq
   b5d92:	3c01      	subeq	r4, #1
   b5d94:	d0f7      	beq.n	b5d86 <__aeabi_dmul+0x1a6>
   b5d96:	ea41 0106 	orr.w	r1, r1, r6
   b5d9a:	f095 0f00 	teq	r5, #0
   b5d9e:	bf18      	it	ne
   b5da0:	4770      	bxne	lr
   b5da2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b5da6:	0052      	lsls	r2, r2, #1
   b5da8:	eb43 0303 	adc.w	r3, r3, r3
   b5dac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b5db0:	bf08      	it	eq
   b5db2:	3d01      	subeq	r5, #1
   b5db4:	d0f7      	beq.n	b5da6 <__aeabi_dmul+0x1c6>
   b5db6:	ea43 0306 	orr.w	r3, r3, r6
   b5dba:	4770      	bx	lr
   b5dbc:	ea94 0f0c 	teq	r4, ip
   b5dc0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b5dc4:	bf18      	it	ne
   b5dc6:	ea95 0f0c 	teqne	r5, ip
   b5dca:	d00c      	beq.n	b5de6 <__aeabi_dmul+0x206>
   b5dcc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b5dd0:	bf18      	it	ne
   b5dd2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b5dd6:	d1d1      	bne.n	b5d7c <__aeabi_dmul+0x19c>
   b5dd8:	ea81 0103 	eor.w	r1, r1, r3
   b5ddc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5de0:	f04f 0000 	mov.w	r0, #0
   b5de4:	bd70      	pop	{r4, r5, r6, pc}
   b5de6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b5dea:	bf06      	itte	eq
   b5dec:	4610      	moveq	r0, r2
   b5dee:	4619      	moveq	r1, r3
   b5df0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b5df4:	d019      	beq.n	b5e2a <__aeabi_dmul+0x24a>
   b5df6:	ea94 0f0c 	teq	r4, ip
   b5dfa:	d102      	bne.n	b5e02 <__aeabi_dmul+0x222>
   b5dfc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b5e00:	d113      	bne.n	b5e2a <__aeabi_dmul+0x24a>
   b5e02:	ea95 0f0c 	teq	r5, ip
   b5e06:	d105      	bne.n	b5e14 <__aeabi_dmul+0x234>
   b5e08:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b5e0c:	bf1c      	itt	ne
   b5e0e:	4610      	movne	r0, r2
   b5e10:	4619      	movne	r1, r3
   b5e12:	d10a      	bne.n	b5e2a <__aeabi_dmul+0x24a>
   b5e14:	ea81 0103 	eor.w	r1, r1, r3
   b5e18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5e1c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b5e20:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b5e24:	f04f 0000 	mov.w	r0, #0
   b5e28:	bd70      	pop	{r4, r5, r6, pc}
   b5e2a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b5e2e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b5e32:	bd70      	pop	{r4, r5, r6, pc}

000b5e34 <__aeabi_ddiv>:
   b5e34:	b570      	push	{r4, r5, r6, lr}
   b5e36:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b5e3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b5e3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b5e42:	bf1d      	ittte	ne
   b5e44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b5e48:	ea94 0f0c 	teqne	r4, ip
   b5e4c:	ea95 0f0c 	teqne	r5, ip
   b5e50:	f000 f8a7 	bleq	b5fa2 <__aeabi_ddiv+0x16e>
   b5e54:	eba4 0405 	sub.w	r4, r4, r5
   b5e58:	ea81 0e03 	eor.w	lr, r1, r3
   b5e5c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b5e60:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b5e64:	f000 8088 	beq.w	b5f78 <__aeabi_ddiv+0x144>
   b5e68:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b5e6c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b5e70:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b5e74:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b5e78:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b5e7c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b5e80:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b5e84:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b5e88:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b5e8c:	429d      	cmp	r5, r3
   b5e8e:	bf08      	it	eq
   b5e90:	4296      	cmpeq	r6, r2
   b5e92:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b5e96:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b5e9a:	d202      	bcs.n	b5ea2 <__aeabi_ddiv+0x6e>
   b5e9c:	085b      	lsrs	r3, r3, #1
   b5e9e:	ea4f 0232 	mov.w	r2, r2, rrx
   b5ea2:	1ab6      	subs	r6, r6, r2
   b5ea4:	eb65 0503 	sbc.w	r5, r5, r3
   b5ea8:	085b      	lsrs	r3, r3, #1
   b5eaa:	ea4f 0232 	mov.w	r2, r2, rrx
   b5eae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b5eb2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b5eb6:	ebb6 0e02 	subs.w	lr, r6, r2
   b5eba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5ebe:	bf22      	ittt	cs
   b5ec0:	1ab6      	subcs	r6, r6, r2
   b5ec2:	4675      	movcs	r5, lr
   b5ec4:	ea40 000c 	orrcs.w	r0, r0, ip
   b5ec8:	085b      	lsrs	r3, r3, #1
   b5eca:	ea4f 0232 	mov.w	r2, r2, rrx
   b5ece:	ebb6 0e02 	subs.w	lr, r6, r2
   b5ed2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5ed6:	bf22      	ittt	cs
   b5ed8:	1ab6      	subcs	r6, r6, r2
   b5eda:	4675      	movcs	r5, lr
   b5edc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b5ee0:	085b      	lsrs	r3, r3, #1
   b5ee2:	ea4f 0232 	mov.w	r2, r2, rrx
   b5ee6:	ebb6 0e02 	subs.w	lr, r6, r2
   b5eea:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5eee:	bf22      	ittt	cs
   b5ef0:	1ab6      	subcs	r6, r6, r2
   b5ef2:	4675      	movcs	r5, lr
   b5ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b5ef8:	085b      	lsrs	r3, r3, #1
   b5efa:	ea4f 0232 	mov.w	r2, r2, rrx
   b5efe:	ebb6 0e02 	subs.w	lr, r6, r2
   b5f02:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5f06:	bf22      	ittt	cs
   b5f08:	1ab6      	subcs	r6, r6, r2
   b5f0a:	4675      	movcs	r5, lr
   b5f0c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b5f10:	ea55 0e06 	orrs.w	lr, r5, r6
   b5f14:	d018      	beq.n	b5f48 <__aeabi_ddiv+0x114>
   b5f16:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b5f1a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b5f1e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b5f22:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b5f26:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b5f2a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b5f2e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b5f32:	d1c0      	bne.n	b5eb6 <__aeabi_ddiv+0x82>
   b5f34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b5f38:	d10b      	bne.n	b5f52 <__aeabi_ddiv+0x11e>
   b5f3a:	ea41 0100 	orr.w	r1, r1, r0
   b5f3e:	f04f 0000 	mov.w	r0, #0
   b5f42:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b5f46:	e7b6      	b.n	b5eb6 <__aeabi_ddiv+0x82>
   b5f48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b5f4c:	bf04      	itt	eq
   b5f4e:	4301      	orreq	r1, r0
   b5f50:	2000      	moveq	r0, #0
   b5f52:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b5f56:	bf88      	it	hi
   b5f58:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b5f5c:	f63f aeaf 	bhi.w	b5cbe <__aeabi_dmul+0xde>
   b5f60:	ebb5 0c03 	subs.w	ip, r5, r3
   b5f64:	bf04      	itt	eq
   b5f66:	ebb6 0c02 	subseq.w	ip, r6, r2
   b5f6a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b5f6e:	f150 0000 	adcs.w	r0, r0, #0
   b5f72:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b5f76:	bd70      	pop	{r4, r5, r6, pc}
   b5f78:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b5f7c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b5f80:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b5f84:	bfc2      	ittt	gt
   b5f86:	ebd4 050c 	rsbsgt	r5, r4, ip
   b5f8a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b5f8e:	bd70      	popgt	{r4, r5, r6, pc}
   b5f90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5f94:	f04f 0e00 	mov.w	lr, #0
   b5f98:	3c01      	subs	r4, #1
   b5f9a:	e690      	b.n	b5cbe <__aeabi_dmul+0xde>
   b5f9c:	ea45 0e06 	orr.w	lr, r5, r6
   b5fa0:	e68d      	b.n	b5cbe <__aeabi_dmul+0xde>
   b5fa2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b5fa6:	ea94 0f0c 	teq	r4, ip
   b5faa:	bf08      	it	eq
   b5fac:	ea95 0f0c 	teqeq	r5, ip
   b5fb0:	f43f af3b 	beq.w	b5e2a <__aeabi_dmul+0x24a>
   b5fb4:	ea94 0f0c 	teq	r4, ip
   b5fb8:	d10a      	bne.n	b5fd0 <__aeabi_ddiv+0x19c>
   b5fba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b5fbe:	f47f af34 	bne.w	b5e2a <__aeabi_dmul+0x24a>
   b5fc2:	ea95 0f0c 	teq	r5, ip
   b5fc6:	f47f af25 	bne.w	b5e14 <__aeabi_dmul+0x234>
   b5fca:	4610      	mov	r0, r2
   b5fcc:	4619      	mov	r1, r3
   b5fce:	e72c      	b.n	b5e2a <__aeabi_dmul+0x24a>
   b5fd0:	ea95 0f0c 	teq	r5, ip
   b5fd4:	d106      	bne.n	b5fe4 <__aeabi_ddiv+0x1b0>
   b5fd6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b5fda:	f43f aefd 	beq.w	b5dd8 <__aeabi_dmul+0x1f8>
   b5fde:	4610      	mov	r0, r2
   b5fe0:	4619      	mov	r1, r3
   b5fe2:	e722      	b.n	b5e2a <__aeabi_dmul+0x24a>
   b5fe4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b5fe8:	bf18      	it	ne
   b5fea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b5fee:	f47f aec5 	bne.w	b5d7c <__aeabi_dmul+0x19c>
   b5ff2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b5ff6:	f47f af0d 	bne.w	b5e14 <__aeabi_dmul+0x234>
   b5ffa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b5ffe:	f47f aeeb 	bne.w	b5dd8 <__aeabi_dmul+0x1f8>
   b6002:	e712      	b.n	b5e2a <__aeabi_dmul+0x24a>

000b6004 <__gedf2>:
   b6004:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b6008:	e006      	b.n	b6018 <__cmpdf2+0x4>
   b600a:	bf00      	nop

000b600c <__ledf2>:
   b600c:	f04f 0c01 	mov.w	ip, #1
   b6010:	e002      	b.n	b6018 <__cmpdf2+0x4>
   b6012:	bf00      	nop

000b6014 <__cmpdf2>:
   b6014:	f04f 0c01 	mov.w	ip, #1
   b6018:	f84d cd04 	str.w	ip, [sp, #-4]!
   b601c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6020:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6024:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6028:	bf18      	it	ne
   b602a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b602e:	d01b      	beq.n	b6068 <__cmpdf2+0x54>
   b6030:	b001      	add	sp, #4
   b6032:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b6036:	bf0c      	ite	eq
   b6038:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b603c:	ea91 0f03 	teqne	r1, r3
   b6040:	bf02      	ittt	eq
   b6042:	ea90 0f02 	teqeq	r0, r2
   b6046:	2000      	moveq	r0, #0
   b6048:	4770      	bxeq	lr
   b604a:	f110 0f00 	cmn.w	r0, #0
   b604e:	ea91 0f03 	teq	r1, r3
   b6052:	bf58      	it	pl
   b6054:	4299      	cmppl	r1, r3
   b6056:	bf08      	it	eq
   b6058:	4290      	cmpeq	r0, r2
   b605a:	bf2c      	ite	cs
   b605c:	17d8      	asrcs	r0, r3, #31
   b605e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b6062:	f040 0001 	orr.w	r0, r0, #1
   b6066:	4770      	bx	lr
   b6068:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b606c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6070:	d102      	bne.n	b6078 <__cmpdf2+0x64>
   b6072:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b6076:	d107      	bne.n	b6088 <__cmpdf2+0x74>
   b6078:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b607c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6080:	d1d6      	bne.n	b6030 <__cmpdf2+0x1c>
   b6082:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b6086:	d0d3      	beq.n	b6030 <__cmpdf2+0x1c>
   b6088:	f85d 0b04 	ldr.w	r0, [sp], #4
   b608c:	4770      	bx	lr
   b608e:	bf00      	nop

000b6090 <__aeabi_cdrcmple>:
   b6090:	4684      	mov	ip, r0
   b6092:	4610      	mov	r0, r2
   b6094:	4662      	mov	r2, ip
   b6096:	468c      	mov	ip, r1
   b6098:	4619      	mov	r1, r3
   b609a:	4663      	mov	r3, ip
   b609c:	e000      	b.n	b60a0 <__aeabi_cdcmpeq>
   b609e:	bf00      	nop

000b60a0 <__aeabi_cdcmpeq>:
   b60a0:	b501      	push	{r0, lr}
   b60a2:	f7ff ffb7 	bl	b6014 <__cmpdf2>
   b60a6:	2800      	cmp	r0, #0
   b60a8:	bf48      	it	mi
   b60aa:	f110 0f00 	cmnmi.w	r0, #0
   b60ae:	bd01      	pop	{r0, pc}

000b60b0 <__aeabi_dcmpeq>:
   b60b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b60b4:	f7ff fff4 	bl	b60a0 <__aeabi_cdcmpeq>
   b60b8:	bf0c      	ite	eq
   b60ba:	2001      	moveq	r0, #1
   b60bc:	2000      	movne	r0, #0
   b60be:	f85d fb08 	ldr.w	pc, [sp], #8
   b60c2:	bf00      	nop

000b60c4 <__aeabi_dcmplt>:
   b60c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b60c8:	f7ff ffea 	bl	b60a0 <__aeabi_cdcmpeq>
   b60cc:	bf34      	ite	cc
   b60ce:	2001      	movcc	r0, #1
   b60d0:	2000      	movcs	r0, #0
   b60d2:	f85d fb08 	ldr.w	pc, [sp], #8
   b60d6:	bf00      	nop

000b60d8 <__aeabi_dcmple>:
   b60d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b60dc:	f7ff ffe0 	bl	b60a0 <__aeabi_cdcmpeq>
   b60e0:	bf94      	ite	ls
   b60e2:	2001      	movls	r0, #1
   b60e4:	2000      	movhi	r0, #0
   b60e6:	f85d fb08 	ldr.w	pc, [sp], #8
   b60ea:	bf00      	nop

000b60ec <__aeabi_dcmpge>:
   b60ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   b60f0:	f7ff ffce 	bl	b6090 <__aeabi_cdrcmple>
   b60f4:	bf94      	ite	ls
   b60f6:	2001      	movls	r0, #1
   b60f8:	2000      	movhi	r0, #0
   b60fa:	f85d fb08 	ldr.w	pc, [sp], #8
   b60fe:	bf00      	nop

000b6100 <__aeabi_dcmpgt>:
   b6100:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6104:	f7ff ffc4 	bl	b6090 <__aeabi_cdrcmple>
   b6108:	bf34      	ite	cc
   b610a:	2001      	movcc	r0, #1
   b610c:	2000      	movcs	r0, #0
   b610e:	f85d fb08 	ldr.w	pc, [sp], #8
   b6112:	bf00      	nop

000b6114 <__aeabi_dcmpun>:
   b6114:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6118:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b611c:	d102      	bne.n	b6124 <__aeabi_dcmpun+0x10>
   b611e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b6122:	d10a      	bne.n	b613a <__aeabi_dcmpun+0x26>
   b6124:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6128:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b612c:	d102      	bne.n	b6134 <__aeabi_dcmpun+0x20>
   b612e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b6132:	d102      	bne.n	b613a <__aeabi_dcmpun+0x26>
   b6134:	f04f 0000 	mov.w	r0, #0
   b6138:	4770      	bx	lr
   b613a:	f04f 0001 	mov.w	r0, #1
   b613e:	4770      	bx	lr

000b6140 <__aeabi_d2iz>:
   b6140:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b6144:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b6148:	d215      	bcs.n	b6176 <__aeabi_d2iz+0x36>
   b614a:	d511      	bpl.n	b6170 <__aeabi_d2iz+0x30>
   b614c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b6150:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b6154:	d912      	bls.n	b617c <__aeabi_d2iz+0x3c>
   b6156:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b615a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b615e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b6162:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6166:	fa23 f002 	lsr.w	r0, r3, r2
   b616a:	bf18      	it	ne
   b616c:	4240      	negne	r0, r0
   b616e:	4770      	bx	lr
   b6170:	f04f 0000 	mov.w	r0, #0
   b6174:	4770      	bx	lr
   b6176:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b617a:	d105      	bne.n	b6188 <__aeabi_d2iz+0x48>
   b617c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b6180:	bf08      	it	eq
   b6182:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b6186:	4770      	bx	lr
   b6188:	f04f 0000 	mov.w	r0, #0
   b618c:	4770      	bx	lr
   b618e:	bf00      	nop

000b6190 <__aeabi_d2uiz>:
   b6190:	004a      	lsls	r2, r1, #1
   b6192:	d211      	bcs.n	b61b8 <__aeabi_d2uiz+0x28>
   b6194:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b6198:	d211      	bcs.n	b61be <__aeabi_d2uiz+0x2e>
   b619a:	d50d      	bpl.n	b61b8 <__aeabi_d2uiz+0x28>
   b619c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b61a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b61a4:	d40e      	bmi.n	b61c4 <__aeabi_d2uiz+0x34>
   b61a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b61aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b61ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b61b2:	fa23 f002 	lsr.w	r0, r3, r2
   b61b6:	4770      	bx	lr
   b61b8:	f04f 0000 	mov.w	r0, #0
   b61bc:	4770      	bx	lr
   b61be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b61c2:	d102      	bne.n	b61ca <__aeabi_d2uiz+0x3a>
   b61c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b61c8:	4770      	bx	lr
   b61ca:	f04f 0000 	mov.w	r0, #0
   b61ce:	4770      	bx	lr

000b61d0 <__aeabi_d2f>:
   b61d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b61d4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b61d8:	bf24      	itt	cs
   b61da:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b61de:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b61e2:	d90d      	bls.n	b6200 <__aeabi_d2f+0x30>
   b61e4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b61e8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b61ec:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b61f0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b61f4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b61f8:	bf08      	it	eq
   b61fa:	f020 0001 	biceq.w	r0, r0, #1
   b61fe:	4770      	bx	lr
   b6200:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b6204:	d121      	bne.n	b624a <__aeabi_d2f+0x7a>
   b6206:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b620a:	bfbc      	itt	lt
   b620c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b6210:	4770      	bxlt	lr
   b6212:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6216:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b621a:	f1c2 0218 	rsb	r2, r2, #24
   b621e:	f1c2 0c20 	rsb	ip, r2, #32
   b6222:	fa10 f30c 	lsls.w	r3, r0, ip
   b6226:	fa20 f002 	lsr.w	r0, r0, r2
   b622a:	bf18      	it	ne
   b622c:	f040 0001 	orrne.w	r0, r0, #1
   b6230:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b6234:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b6238:	fa03 fc0c 	lsl.w	ip, r3, ip
   b623c:	ea40 000c 	orr.w	r0, r0, ip
   b6240:	fa23 f302 	lsr.w	r3, r3, r2
   b6244:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b6248:	e7cc      	b.n	b61e4 <__aeabi_d2f+0x14>
   b624a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b624e:	d107      	bne.n	b6260 <__aeabi_d2f+0x90>
   b6250:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b6254:	bf1e      	ittt	ne
   b6256:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b625a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b625e:	4770      	bxne	lr
   b6260:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b6264:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b6268:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b626c:	4770      	bx	lr
   b626e:	bf00      	nop

000b6270 <atexit>:
   b6270:	2300      	movs	r3, #0
   b6272:	4601      	mov	r1, r0
   b6274:	461a      	mov	r2, r3
   b6276:	4618      	mov	r0, r3
   b6278:	f000 b84c 	b.w	b6314 <__register_exitproc>

000b627c <memcpy>:
   b627c:	440a      	add	r2, r1
   b627e:	4291      	cmp	r1, r2
   b6280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b6284:	d100      	bne.n	b6288 <memcpy+0xc>
   b6286:	4770      	bx	lr
   b6288:	b510      	push	{r4, lr}
   b628a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b628e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6292:	4291      	cmp	r1, r2
   b6294:	d1f9      	bne.n	b628a <memcpy+0xe>
   b6296:	bd10      	pop	{r4, pc}

000b6298 <memset>:
   b6298:	4402      	add	r2, r0
   b629a:	4603      	mov	r3, r0
   b629c:	4293      	cmp	r3, r2
   b629e:	d100      	bne.n	b62a2 <memset+0xa>
   b62a0:	4770      	bx	lr
   b62a2:	f803 1b01 	strb.w	r1, [r3], #1
   b62a6:	e7f9      	b.n	b629c <memset+0x4>

000b62a8 <srand>:
   b62a8:	b538      	push	{r3, r4, r5, lr}
   b62aa:	4b10      	ldr	r3, [pc, #64]	; (b62ec <srand+0x44>)
   b62ac:	681d      	ldr	r5, [r3, #0]
   b62ae:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b62b0:	4604      	mov	r4, r0
   b62b2:	b9b3      	cbnz	r3, b62e2 <srand+0x3a>
   b62b4:	2018      	movs	r0, #24
   b62b6:	f7fe fcbb 	bl	b4c30 <malloc>
   b62ba:	4602      	mov	r2, r0
   b62bc:	63a8      	str	r0, [r5, #56]	; 0x38
   b62be:	b920      	cbnz	r0, b62ca <srand+0x22>
   b62c0:	4b0b      	ldr	r3, [pc, #44]	; (b62f0 <srand+0x48>)
   b62c2:	480c      	ldr	r0, [pc, #48]	; (b62f4 <srand+0x4c>)
   b62c4:	2142      	movs	r1, #66	; 0x42
   b62c6:	f7fe fcc3 	bl	b4c50 <__assert_func>
   b62ca:	490b      	ldr	r1, [pc, #44]	; (b62f8 <srand+0x50>)
   b62cc:	4b0b      	ldr	r3, [pc, #44]	; (b62fc <srand+0x54>)
   b62ce:	e9c0 1300 	strd	r1, r3, [r0]
   b62d2:	4b0b      	ldr	r3, [pc, #44]	; (b6300 <srand+0x58>)
   b62d4:	6083      	str	r3, [r0, #8]
   b62d6:	230b      	movs	r3, #11
   b62d8:	8183      	strh	r3, [r0, #12]
   b62da:	2100      	movs	r1, #0
   b62dc:	2001      	movs	r0, #1
   b62de:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b62e2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b62e4:	2200      	movs	r2, #0
   b62e6:	611c      	str	r4, [r3, #16]
   b62e8:	615a      	str	r2, [r3, #20]
   b62ea:	bd38      	pop	{r3, r4, r5, pc}
   b62ec:	2003e5f8 	.word	0x2003e5f8
   b62f0:	000b65f9 	.word	0x000b65f9
   b62f4:	000b6610 	.word	0x000b6610
   b62f8:	abcd330e 	.word	0xabcd330e
   b62fc:	e66d1234 	.word	0xe66d1234
   b6300:	0005deec 	.word	0x0005deec

000b6304 <strlen>:
   b6304:	4603      	mov	r3, r0
   b6306:	f813 2b01 	ldrb.w	r2, [r3], #1
   b630a:	2a00      	cmp	r2, #0
   b630c:	d1fb      	bne.n	b6306 <strlen+0x2>
   b630e:	1a18      	subs	r0, r3, r0
   b6310:	3801      	subs	r0, #1
   b6312:	4770      	bx	lr

000b6314 <__register_exitproc>:
   b6314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6318:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b63d4 <__register_exitproc+0xc0>
   b631c:	4606      	mov	r6, r0
   b631e:	f8d8 0000 	ldr.w	r0, [r8]
   b6322:	461f      	mov	r7, r3
   b6324:	460d      	mov	r5, r1
   b6326:	4691      	mov	r9, r2
   b6328:	f000 f856 	bl	b63d8 <__retarget_lock_acquire_recursive>
   b632c:	4b25      	ldr	r3, [pc, #148]	; (b63c4 <__register_exitproc+0xb0>)
   b632e:	681c      	ldr	r4, [r3, #0]
   b6330:	b934      	cbnz	r4, b6340 <__register_exitproc+0x2c>
   b6332:	4c25      	ldr	r4, [pc, #148]	; (b63c8 <__register_exitproc+0xb4>)
   b6334:	601c      	str	r4, [r3, #0]
   b6336:	4b25      	ldr	r3, [pc, #148]	; (b63cc <__register_exitproc+0xb8>)
   b6338:	b113      	cbz	r3, b6340 <__register_exitproc+0x2c>
   b633a:	681b      	ldr	r3, [r3, #0]
   b633c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6340:	6863      	ldr	r3, [r4, #4]
   b6342:	2b1f      	cmp	r3, #31
   b6344:	dd07      	ble.n	b6356 <__register_exitproc+0x42>
   b6346:	f8d8 0000 	ldr.w	r0, [r8]
   b634a:	f000 f847 	bl	b63dc <__retarget_lock_release_recursive>
   b634e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6356:	b34e      	cbz	r6, b63ac <__register_exitproc+0x98>
   b6358:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b635c:	b988      	cbnz	r0, b6382 <__register_exitproc+0x6e>
   b635e:	4b1c      	ldr	r3, [pc, #112]	; (b63d0 <__register_exitproc+0xbc>)
   b6360:	b923      	cbnz	r3, b636c <__register_exitproc+0x58>
   b6362:	f8d8 0000 	ldr.w	r0, [r8]
   b6366:	f000 f838 	bl	b63da <__retarget_lock_release>
   b636a:	e7f0      	b.n	b634e <__register_exitproc+0x3a>
   b636c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6370:	f7fe fc5e 	bl	b4c30 <malloc>
   b6374:	2800      	cmp	r0, #0
   b6376:	d0f4      	beq.n	b6362 <__register_exitproc+0x4e>
   b6378:	2300      	movs	r3, #0
   b637a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b637e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6382:	6863      	ldr	r3, [r4, #4]
   b6384:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6388:	2201      	movs	r2, #1
   b638a:	409a      	lsls	r2, r3
   b638c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6390:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6394:	4313      	orrs	r3, r2
   b6396:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b639a:	2e02      	cmp	r6, #2
   b639c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b63a0:	bf02      	ittt	eq
   b63a2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b63a6:	4313      	orreq	r3, r2
   b63a8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b63ac:	6863      	ldr	r3, [r4, #4]
   b63ae:	f8d8 0000 	ldr.w	r0, [r8]
   b63b2:	1c5a      	adds	r2, r3, #1
   b63b4:	3302      	adds	r3, #2
   b63b6:	6062      	str	r2, [r4, #4]
   b63b8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b63bc:	f000 f80e 	bl	b63dc <__retarget_lock_release_recursive>
   b63c0:	2000      	movs	r0, #0
   b63c2:	e7c6      	b.n	b6352 <__register_exitproc+0x3e>
   b63c4:	2003e7e8 	.word	0x2003e7e8
   b63c8:	2003e75c 	.word	0x2003e75c
   b63cc:	00000000 	.word	0x00000000
   b63d0:	000b4c31 	.word	0x000b4c31
   b63d4:	2003e65c 	.word	0x2003e65c

000b63d8 <__retarget_lock_acquire_recursive>:
   b63d8:	4770      	bx	lr

000b63da <__retarget_lock_release>:
   b63da:	4770      	bx	lr

000b63dc <__retarget_lock_release_recursive>:
   b63dc:	4770      	bx	lr

000b63de <link_code_end>:
	...

000b63e0 <dynalib_user>:
   b63e0:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b63f0:	0000 0000 5320 6e65 6f73 2072 6e69 7469     .... Sensor init
   b6400:	6169 696c 657a 6620 6961 656c 2164 0021     ialize failed!!.
   b6410:	5320 6e65 6f73 2072 6920 696e 6974 6c61      Sensor  initial
   b6420:	7a69 2065 7573 6363 7365 2173 0021 6164     ize success!!.da
   b6430:	6174 003a 4c41 3a53 4c00 7875 0000 0000     ta:.ALS:.Lux....
   b6440:	0301 0906 0012 0000 0000 0000 0000 4010     ...............@
   b6450:	0000 0000 0000 4000 0000 0000 0000 3ff0     .......@.......?
   b6460:	0000 0000 0000 3fe0 0000 0000 0000 3fd0     .......?.......?
   b6470:	0000 0000 0000 3fa0                         .......?

000b6478 <_ZTVN5spark13EthernetClassE>:
	...
   b6480:	4ce7 000b 4cdd 000b 4cd3 000b 4cc9 000b     .L...L...L...L..
   b6490:	4cbd 000b 4cb1 000b 4f55 000b 4f5d 000b     .L...L..UO..]O..
   b64a0:	4ca5 000b 4c9d 000b 4c93 000b 4c89 000b     .L...L...L...L..
   b64b0:	4f8d 000b                                   .O..

000b64b4 <_ZTV7TwoWire>:
	...
   b64bc:	4d05 000b 4d4f 000b 4d27 000b 4d07 000b     .M..OM..'M...M..
   b64cc:	4d2f 000b 4d37 000b 4d3f 000b 4d47 000b     /M..7M..?M..GM..

000b64dc <_ZTV9IPAddress>:
	...
   b64e4:	4e23 000b 4e13 000b 4e15 000b 7061 0070     #N...N...N..app.

000b64f4 <_ZTVN5spark12NetworkClassE>:
	...
   b64fc:	4f15 000b 4f1f 000b 4f29 000b 4f33 000b     .O...O..)O..3O..
   b650c:	4f3d 000b 4f49 000b 4f55 000b 4f5d 000b     =O..IO..UO..]O..
   b651c:	4f65 000b 4f71 000b 4f79 000b 4f83 000b     eO..qO..yO...O..
   b652c:	4f8d 000b 616e 006e 6e69 0066 766f 0066     .O..nan.inf.ovf.
   b653c:	002e 5925 252d 2d6d 6425 2554 3a48 4d25     ..%Y-%m-%dT%H:%M
   b654c:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000b655c <_ZTV11USARTSerial>:
	...
   b6564:	5349 000b 53b5 000b 538d 000b 5079 000b     IS...S...S..yP..
   b6574:	535d 000b 5379 000b 536b 000b 5387 000b     ]S..yS..kS...S..
   b6584:	534b 000b 534f 000b                         KS..OS..

000b658c <_ZTV9USBSerial>:
	...
   b6594:	5401 000b 5469 000b 543f 000b 5079 000b     .T..iT..?T..yP..
   b65a4:	5431 000b 5403 000b 5413 000b 5463 000b     1T...T...T..cT..
   b65b4:	5423 000b 53fb 000b                         #T...S..

000b65bc <_ZTVN5spark9WiFiClassE>:
	...
   b65c4:	5563 000b 5559 000b 554f 000b 5505 000b     cU..YU..OU...U..
   b65d4:	5543 000b 5537 000b 4f55 000b 4f5d 000b     CU..7U..UO..]O..
   b65e4:	552b 000b 5523 000b 5519 000b 550f 000b     +U..#U...U...U..
   b65f4:	4f8d 000b                                   .O..

000b65f8 <_ZSt7nothrow>:
   b65f8:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b6608:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b6618:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b6628:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b6638:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b6648:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b6658:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b6669 <link_const_variable_data_end>:
   b6669:	00          	.byte	0x00
	...

000b666c <link_constructors_location>:
   b666c:	000b4195 	.word	0x000b4195
   b6670:	000b4c79 	.word	0x000b4c79
   b6674:	000b4cf1 	.word	0x000b4cf1
   b6678:	000b4f05 	.word	0x000b4f05
   b667c:	000b5065 	.word	0x000b5065
   b6680:	000b52f1 	.word	0x000b52f1
   b6684:	000b5311 	.word	0x000b5311
   b6688:	000b5335 	.word	0x000b5335
   b668c:	000b556d 	.word	0x000b556d
